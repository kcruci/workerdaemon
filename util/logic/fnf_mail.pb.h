// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fnf_mail.proto

#ifndef PROTOBUF_fnf_5fmail_2eproto__INCLUDED
#define PROTOBUF_fnf_5fmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace FNF {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fnf_5fmail_2eproto();
void protobuf_AssignDesc_fnf_5fmail_2eproto();
void protobuf_ShutdownFile_fnf_5fmail_2eproto();

class idip_gift;
class mail_item;
class mailbox;

enum EMMailType {
  MAIL_HEART = 1,
  MAIL_SYSTEM_TEXT = 2,
  MAIL_SYSTEM_PIC = 3,
  MAIL_SYSTEM_URL_TEXT = 4,
  MAIL_SYSTEM_URL_PIC = 5,
  MAIL_SELF_DEFINATION = 6
};
bool EMMailType_IsValid(int value);
const EMMailType EMMailType_MIN = MAIL_HEART;
const EMMailType EMMailType_MAX = MAIL_SELF_DEFINATION;
const int EMMailType_ARRAYSIZE = EMMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMMailType_descriptor();
inline const ::std::string& EMMailType_Name(EMMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMMailType_descriptor(), value);
}
inline bool EMMailType_Parse(
    const ::std::string& name, EMMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMMailType>(
    EMMailType_descriptor(), name, value);
}
enum EMMailStatus {
  PRIZE_NONE = 0,
  PRIZE_GOT = 1
};
bool EMMailStatus_IsValid(int value);
const EMMailStatus EMMailStatus_MIN = PRIZE_NONE;
const EMMailStatus EMMailStatus_MAX = PRIZE_GOT;
const int EMMailStatus_ARRAYSIZE = EMMailStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMMailStatus_descriptor();
inline const ::std::string& EMMailStatus_Name(EMMailStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMMailStatus_descriptor(), value);
}
inline bool EMMailStatus_Parse(
    const ::std::string& name, EMMailStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMMailStatus>(
    EMMailStatus_descriptor(), name, value);
}
enum EMMailPlat {
  MAIL_IOS_Plat = 1,
  MAIL_AND_Plat = 2,
  MAIL_BOTH_Plat = 3
};
bool EMMailPlat_IsValid(int value);
const EMMailPlat EMMailPlat_MIN = MAIL_IOS_Plat;
const EMMailPlat EMMailPlat_MAX = MAIL_BOTH_Plat;
const int EMMailPlat_ARRAYSIZE = EMMailPlat_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMMailPlat_descriptor();
inline const ::std::string& EMMailPlat_Name(EMMailPlat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMMailPlat_descriptor(), value);
}
inline bool EMMailPlat_Parse(
    const ::std::string& name, EMMailPlat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMMailPlat>(
    EMMailPlat_descriptor(), name, value);
}
enum EMIdipGiftType {
  IDIP_GIFT_TYPE_BASE = 0,
  IDIP_GIFT_TYPE_STARFRUIT = 1,
  IDIP_GIFT_TYPE_GEM = 2,
  IDIP_GIFT_TYPE_ENERGY = 3,
  IDIP_GIFT_TYPE_PROP = 4,
  IDIP_GIFT_TYPE_PET = 5,
  IDIP_GIFT_TYPE_NINJIA = 6,
  IDIP_GIFT_TYPE_BLADE = 7
};
bool EMIdipGiftType_IsValid(int value);
const EMIdipGiftType EMIdipGiftType_MIN = IDIP_GIFT_TYPE_BASE;
const EMIdipGiftType EMIdipGiftType_MAX = IDIP_GIFT_TYPE_BLADE;
const int EMIdipGiftType_ARRAYSIZE = EMIdipGiftType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMIdipGiftType_descriptor();
inline const ::std::string& EMIdipGiftType_Name(EMIdipGiftType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMIdipGiftType_descriptor(), value);
}
inline bool EMIdipGiftType_Parse(
    const ::std::string& name, EMIdipGiftType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMIdipGiftType>(
    EMIdipGiftType_descriptor(), name, value);
}
// ===================================================================

class idip_gift : public ::google::protobuf::Message {
 public:
  idip_gift();
  virtual ~idip_gift();

  idip_gift(const idip_gift& from);

  inline idip_gift& operator=(const idip_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const idip_gift& default_instance();

  void Swap(idip_gift* other);

  // implements Message ----------------------------------------------

  idip_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const idip_gift& from);
  void MergeFrom(const idip_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .FNF.EMIdipGiftType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FNF::EMIdipGiftType type() const;
  inline void set_type(::FNF::EMIdipGiftType value);

  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.idip_gift)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fmail_2eproto();
  friend void protobuf_AssignDesc_fnf_5fmail_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fmail_2eproto();

  void InitAsDefaultInstance();
  static idip_gift* default_instance_;
};
// -------------------------------------------------------------------

class mail_item : public ::google::protobuf::Message {
 public:
  mail_item();
  virtual ~mail_item();

  mail_item(const mail_item& from);

  inline mail_item& operator=(const mail_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_item& default_instance();

  void Swap(mail_item* other);

  // implements Message ----------------------------------------------

  mail_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_item& from);
  void MergeFrom(const mail_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .FNF.EMMailType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FNF::EMMailType type() const;
  inline void set_type(::FNF::EMMailType value);

  // required string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int32 expire_time = 5;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 5;
  inline ::google::protobuf::int32 expire_time() const;
  inline void set_expire_time(::google::protobuf::int32 value);

  // required int32 send_time = 6;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 6;
  inline ::google::protobuf::int32 send_time() const;
  inline void set_send_time(::google::protobuf::int32 value);

  // required int64 sender_uid = 7;
  inline bool has_sender_uid() const;
  inline void clear_sender_uid();
  static const int kSenderUidFieldNumber = 7;
  inline ::google::protobuf::int64 sender_uid() const;
  inline void set_sender_uid(::google::protobuf::int64 value);

  // optional string sender_nickname = 8;
  inline bool has_sender_nickname() const;
  inline void clear_sender_nickname();
  static const int kSenderNicknameFieldNumber = 8;
  inline const ::std::string& sender_nickname() const;
  inline void set_sender_nickname(const ::std::string& value);
  inline void set_sender_nickname(const char* value);
  inline void set_sender_nickname(const char* value, size_t size);
  inline ::std::string* mutable_sender_nickname();
  inline ::std::string* release_sender_nickname();
  inline void set_allocated_sender_nickname(::std::string* sender_nickname);

  // optional string pic_url = 9;
  inline bool has_pic_url() const;
  inline void clear_pic_url();
  static const int kPicUrlFieldNumber = 9;
  inline const ::std::string& pic_url() const;
  inline void set_pic_url(const ::std::string& value);
  inline void set_pic_url(const char* value);
  inline void set_pic_url(const char* value, size_t size);
  inline ::std::string* mutable_pic_url();
  inline ::std::string* release_pic_url();
  inline void set_allocated_pic_url(::std::string* pic_url);

  // optional string web_url = 10;
  inline bool has_web_url() const;
  inline void clear_web_url();
  static const int kWebUrlFieldNumber = 10;
  inline const ::std::string& web_url() const;
  inline void set_web_url(const ::std::string& value);
  inline void set_web_url(const char* value);
  inline void set_web_url(const char* value, size_t size);
  inline ::std::string* mutable_web_url();
  inline ::std::string* release_web_url();
  inline void set_allocated_web_url(::std::string* web_url);

  // optional int32 prize_id = 11;
  inline bool has_prize_id() const;
  inline void clear_prize_id();
  static const int kPrizeIdFieldNumber = 11;
  inline ::google::protobuf::int32 prize_id() const;
  inline void set_prize_id(::google::protobuf::int32 value);

  // optional .FNF.EMMailStatus prize_status = 12;
  inline bool has_prize_status() const;
  inline void clear_prize_status();
  static const int kPrizeStatusFieldNumber = 12;
  inline ::FNF::EMMailStatus prize_status() const;
  inline void set_prize_status(::FNF::EMMailStatus value);

  // optional int32 pop_out = 13;
  inline bool has_pop_out() const;
  inline void clear_pop_out();
  static const int kPopOutFieldNumber = 13;
  inline ::google::protobuf::int32 pop_out() const;
  inline void set_pop_out(::google::protobuf::int32 value);

  // optional .FNF.EMMailPlat plat_id = 14;
  inline bool has_plat_id() const;
  inline void clear_plat_id();
  static const int kPlatIdFieldNumber = 14;
  inline ::FNF::EMMailPlat plat_id() const;
  inline void set_plat_id(::FNF::EMMailPlat value);

  // optional string sender_pic = 15;
  inline bool has_sender_pic() const;
  inline void clear_sender_pic();
  static const int kSenderPicFieldNumber = 15;
  inline const ::std::string& sender_pic() const;
  inline void set_sender_pic(const ::std::string& value);
  inline void set_sender_pic(const char* value);
  inline void set_sender_pic(const char* value, size_t size);
  inline ::std::string* mutable_sender_pic();
  inline ::std::string* release_sender_pic();
  inline void set_allocated_sender_pic(::std::string* sender_pic);

  // repeated .FNF.idip_gift idip_gift = 16;
  inline int idip_gift_size() const;
  inline void clear_idip_gift();
  static const int kIdipGiftFieldNumber = 16;
  inline const ::FNF::idip_gift& idip_gift(int index) const;
  inline ::FNF::idip_gift* mutable_idip_gift(int index);
  inline ::FNF::idip_gift* add_idip_gift();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::idip_gift >&
      idip_gift() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::idip_gift >*
      mutable_idip_gift();

  // @@protoc_insertion_point(class_scope:FNF.mail_item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_sender_uid();
  inline void clear_has_sender_uid();
  inline void set_has_sender_nickname();
  inline void clear_has_sender_nickname();
  inline void set_has_pic_url();
  inline void clear_has_pic_url();
  inline void set_has_web_url();
  inline void clear_has_web_url();
  inline void set_has_prize_id();
  inline void clear_has_prize_id();
  inline void set_has_prize_status();
  inline void clear_has_prize_status();
  inline void set_has_pop_out();
  inline void clear_has_pop_out();
  inline void set_has_plat_id();
  inline void clear_has_plat_id();
  inline void set_has_sender_pic();
  inline void clear_has_sender_pic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int32 expire_time_;
  ::google::protobuf::int32 send_time_;
  ::google::protobuf::int64 sender_uid_;
  ::std::string* sender_nickname_;
  ::std::string* pic_url_;
  ::std::string* web_url_;
  ::google::protobuf::int32 prize_id_;
  int prize_status_;
  ::google::protobuf::int32 pop_out_;
  int plat_id_;
  ::std::string* sender_pic_;
  ::google::protobuf::RepeatedPtrField< ::FNF::idip_gift > idip_gift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fmail_2eproto();
  friend void protobuf_AssignDesc_fnf_5fmail_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_item* default_instance_;
};
// -------------------------------------------------------------------

class mailbox : public ::google::protobuf::Message {
 public:
  mailbox();
  virtual ~mailbox();

  mailbox(const mailbox& from);

  inline mailbox& operator=(const mailbox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mailbox& default_instance();

  void Swap(mailbox* other);

  // implements Message ----------------------------------------------

  mailbox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mailbox& from);
  void MergeFrom(const mailbox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FNF.mail_item user_mail = 1;
  inline int user_mail_size() const;
  inline void clear_user_mail();
  static const int kUserMailFieldNumber = 1;
  inline const ::FNF::mail_item& user_mail(int index) const;
  inline ::FNF::mail_item* mutable_user_mail(int index);
  inline ::FNF::mail_item* add_user_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >&
      user_mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >*
      mutable_user_mail();

  // repeated .FNF.mail_item system_mail = 2;
  inline int system_mail_size() const;
  inline void clear_system_mail();
  static const int kSystemMailFieldNumber = 2;
  inline const ::FNF::mail_item& system_mail(int index) const;
  inline ::FNF::mail_item* mutable_system_mail(int index);
  inline ::FNF::mail_item* add_system_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >&
      system_mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >*
      mutable_system_mail();

  // @@protoc_insertion_point(class_scope:FNF.mailbox)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FNF::mail_item > user_mail_;
  ::google::protobuf::RepeatedPtrField< ::FNF::mail_item > system_mail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fmail_2eproto();
  friend void protobuf_AssignDesc_fnf_5fmail_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mailbox* default_instance_;
};
// ===================================================================


// ===================================================================

// idip_gift

// required int32 id = 1;
inline bool idip_gift::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void idip_gift::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void idip_gift::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void idip_gift::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 idip_gift::id() const {
  return id_;
}
inline void idip_gift::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .FNF.EMIdipGiftType type = 2;
inline bool idip_gift::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void idip_gift::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void idip_gift::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void idip_gift::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::FNF::EMIdipGiftType idip_gift::type() const {
  return static_cast< ::FNF::EMIdipGiftType >(type_);
}
inline void idip_gift::set_type(::FNF::EMIdipGiftType value) {
  assert(::FNF::EMIdipGiftType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 count = 3;
inline bool idip_gift::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void idip_gift::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void idip_gift::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void idip_gift::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 idip_gift::count() const {
  return count_;
}
inline void idip_gift::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 level = 4;
inline bool idip_gift::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void idip_gift::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void idip_gift::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void idip_gift::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 idip_gift::level() const {
  return level_;
}
inline void idip_gift::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// mail_item

// required int32 id = 1;
inline bool mail_item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 mail_item::id() const {
  return id_;
}
inline void mail_item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .FNF.EMMailType type = 2;
inline bool mail_item::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_item::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_item::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_item::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FNF::EMMailType mail_item::type() const {
  return static_cast< ::FNF::EMMailType >(type_);
}
inline void mail_item::set_type(::FNF::EMMailType value) {
  assert(::FNF::EMMailType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string title = 3;
inline bool mail_item::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_item::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_item::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_item::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_item::title() const {
  return *title_;
}
inline void mail_item::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_item::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_item::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_item::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail_item::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_item::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4;
inline bool mail_item::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_item::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_item::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_item::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_item::content() const {
  return *content_;
}
inline void mail_item::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_item::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_item::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_item::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail_item::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_item::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 expire_time = 5;
inline bool mail_item::has_expire_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_item::set_has_expire_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_item::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_item::clear_expire_time() {
  expire_time_ = 0;
  clear_has_expire_time();
}
inline ::google::protobuf::int32 mail_item::expire_time() const {
  return expire_time_;
}
inline void mail_item::set_expire_time(::google::protobuf::int32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// required int32 send_time = 6;
inline bool mail_item::has_send_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_item::set_has_send_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_item::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_item::clear_send_time() {
  send_time_ = 0;
  clear_has_send_time();
}
inline ::google::protobuf::int32 mail_item::send_time() const {
  return send_time_;
}
inline void mail_item::set_send_time(::google::protobuf::int32 value) {
  set_has_send_time();
  send_time_ = value;
}

// required int64 sender_uid = 7;
inline bool mail_item::has_sender_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mail_item::set_has_sender_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mail_item::clear_has_sender_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mail_item::clear_sender_uid() {
  sender_uid_ = GOOGLE_LONGLONG(0);
  clear_has_sender_uid();
}
inline ::google::protobuf::int64 mail_item::sender_uid() const {
  return sender_uid_;
}
inline void mail_item::set_sender_uid(::google::protobuf::int64 value) {
  set_has_sender_uid();
  sender_uid_ = value;
}

// optional string sender_nickname = 8;
inline bool mail_item::has_sender_nickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail_item::set_has_sender_nickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail_item::clear_has_sender_nickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail_item::clear_sender_nickname() {
  if (sender_nickname_ != &::google::protobuf::internal::kEmptyString) {
    sender_nickname_->clear();
  }
  clear_has_sender_nickname();
}
inline const ::std::string& mail_item::sender_nickname() const {
  return *sender_nickname_;
}
inline void mail_item::set_sender_nickname(const ::std::string& value) {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  sender_nickname_->assign(value);
}
inline void mail_item::set_sender_nickname(const char* value) {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  sender_nickname_->assign(value);
}
inline void mail_item::set_sender_nickname(const char* value, size_t size) {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  sender_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_item::mutable_sender_nickname() {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  return sender_nickname_;
}
inline ::std::string* mail_item::release_sender_nickname() {
  clear_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_nickname_;
    sender_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_item::set_allocated_sender_nickname(::std::string* sender_nickname) {
  if (sender_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_nickname_;
  }
  if (sender_nickname) {
    set_has_sender_nickname();
    sender_nickname_ = sender_nickname;
  } else {
    clear_has_sender_nickname();
    sender_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pic_url = 9;
inline bool mail_item::has_pic_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mail_item::set_has_pic_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mail_item::clear_has_pic_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mail_item::clear_pic_url() {
  if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
    pic_url_->clear();
  }
  clear_has_pic_url();
}
inline const ::std::string& mail_item::pic_url() const {
  return *pic_url_;
}
inline void mail_item::set_pic_url(const ::std::string& value) {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  pic_url_->assign(value);
}
inline void mail_item::set_pic_url(const char* value) {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  pic_url_->assign(value);
}
inline void mail_item::set_pic_url(const char* value, size_t size) {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  pic_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_item::mutable_pic_url() {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  return pic_url_;
}
inline ::std::string* mail_item::release_pic_url() {
  clear_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_url_;
    pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_item::set_allocated_pic_url(::std::string* pic_url) {
  if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_url_;
  }
  if (pic_url) {
    set_has_pic_url();
    pic_url_ = pic_url;
  } else {
    clear_has_pic_url();
    pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string web_url = 10;
inline bool mail_item::has_web_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mail_item::set_has_web_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mail_item::clear_has_web_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mail_item::clear_web_url() {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    web_url_->clear();
  }
  clear_has_web_url();
}
inline const ::std::string& mail_item::web_url() const {
  return *web_url_;
}
inline void mail_item::set_web_url(const ::std::string& value) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(value);
}
inline void mail_item::set_web_url(const char* value) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(value);
}
inline void mail_item::set_web_url(const char* value, size_t size) {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  web_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_item::mutable_web_url() {
  set_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    web_url_ = new ::std::string;
  }
  return web_url_;
}
inline ::std::string* mail_item::release_web_url() {
  clear_has_web_url();
  if (web_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = web_url_;
    web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_item::set_allocated_web_url(::std::string* web_url) {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_url_;
  }
  if (web_url) {
    set_has_web_url();
    web_url_ = web_url;
  } else {
    clear_has_web_url();
    web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prize_id = 11;
inline bool mail_item::has_prize_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mail_item::set_has_prize_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mail_item::clear_has_prize_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mail_item::clear_prize_id() {
  prize_id_ = 0;
  clear_has_prize_id();
}
inline ::google::protobuf::int32 mail_item::prize_id() const {
  return prize_id_;
}
inline void mail_item::set_prize_id(::google::protobuf::int32 value) {
  set_has_prize_id();
  prize_id_ = value;
}

// optional .FNF.EMMailStatus prize_status = 12;
inline bool mail_item::has_prize_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mail_item::set_has_prize_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mail_item::clear_has_prize_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mail_item::clear_prize_status() {
  prize_status_ = 0;
  clear_has_prize_status();
}
inline ::FNF::EMMailStatus mail_item::prize_status() const {
  return static_cast< ::FNF::EMMailStatus >(prize_status_);
}
inline void mail_item::set_prize_status(::FNF::EMMailStatus value) {
  assert(::FNF::EMMailStatus_IsValid(value));
  set_has_prize_status();
  prize_status_ = value;
}

// optional int32 pop_out = 13;
inline bool mail_item::has_pop_out() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mail_item::set_has_pop_out() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mail_item::clear_has_pop_out() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mail_item::clear_pop_out() {
  pop_out_ = 0;
  clear_has_pop_out();
}
inline ::google::protobuf::int32 mail_item::pop_out() const {
  return pop_out_;
}
inline void mail_item::set_pop_out(::google::protobuf::int32 value) {
  set_has_pop_out();
  pop_out_ = value;
}

// optional .FNF.EMMailPlat plat_id = 14;
inline bool mail_item::has_plat_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mail_item::set_has_plat_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mail_item::clear_has_plat_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mail_item::clear_plat_id() {
  plat_id_ = 1;
  clear_has_plat_id();
}
inline ::FNF::EMMailPlat mail_item::plat_id() const {
  return static_cast< ::FNF::EMMailPlat >(plat_id_);
}
inline void mail_item::set_plat_id(::FNF::EMMailPlat value) {
  assert(::FNF::EMMailPlat_IsValid(value));
  set_has_plat_id();
  plat_id_ = value;
}

// optional string sender_pic = 15;
inline bool mail_item::has_sender_pic() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mail_item::set_has_sender_pic() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mail_item::clear_has_sender_pic() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mail_item::clear_sender_pic() {
  if (sender_pic_ != &::google::protobuf::internal::kEmptyString) {
    sender_pic_->clear();
  }
  clear_has_sender_pic();
}
inline const ::std::string& mail_item::sender_pic() const {
  return *sender_pic_;
}
inline void mail_item::set_sender_pic(const ::std::string& value) {
  set_has_sender_pic();
  if (sender_pic_ == &::google::protobuf::internal::kEmptyString) {
    sender_pic_ = new ::std::string;
  }
  sender_pic_->assign(value);
}
inline void mail_item::set_sender_pic(const char* value) {
  set_has_sender_pic();
  if (sender_pic_ == &::google::protobuf::internal::kEmptyString) {
    sender_pic_ = new ::std::string;
  }
  sender_pic_->assign(value);
}
inline void mail_item::set_sender_pic(const char* value, size_t size) {
  set_has_sender_pic();
  if (sender_pic_ == &::google::protobuf::internal::kEmptyString) {
    sender_pic_ = new ::std::string;
  }
  sender_pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_item::mutable_sender_pic() {
  set_has_sender_pic();
  if (sender_pic_ == &::google::protobuf::internal::kEmptyString) {
    sender_pic_ = new ::std::string;
  }
  return sender_pic_;
}
inline ::std::string* mail_item::release_sender_pic() {
  clear_has_sender_pic();
  if (sender_pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_pic_;
    sender_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_item::set_allocated_sender_pic(::std::string* sender_pic) {
  if (sender_pic_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_pic_;
  }
  if (sender_pic) {
    set_has_sender_pic();
    sender_pic_ = sender_pic;
  } else {
    clear_has_sender_pic();
    sender_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .FNF.idip_gift idip_gift = 16;
inline int mail_item::idip_gift_size() const {
  return idip_gift_.size();
}
inline void mail_item::clear_idip_gift() {
  idip_gift_.Clear();
}
inline const ::FNF::idip_gift& mail_item::idip_gift(int index) const {
  return idip_gift_.Get(index);
}
inline ::FNF::idip_gift* mail_item::mutable_idip_gift(int index) {
  return idip_gift_.Mutable(index);
}
inline ::FNF::idip_gift* mail_item::add_idip_gift() {
  return idip_gift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::idip_gift >&
mail_item::idip_gift() const {
  return idip_gift_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::idip_gift >*
mail_item::mutable_idip_gift() {
  return &idip_gift_;
}

// -------------------------------------------------------------------

// mailbox

// repeated .FNF.mail_item user_mail = 1;
inline int mailbox::user_mail_size() const {
  return user_mail_.size();
}
inline void mailbox::clear_user_mail() {
  user_mail_.Clear();
}
inline const ::FNF::mail_item& mailbox::user_mail(int index) const {
  return user_mail_.Get(index);
}
inline ::FNF::mail_item* mailbox::mutable_user_mail(int index) {
  return user_mail_.Mutable(index);
}
inline ::FNF::mail_item* mailbox::add_user_mail() {
  return user_mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >&
mailbox::user_mail() const {
  return user_mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >*
mailbox::mutable_user_mail() {
  return &user_mail_;
}

// repeated .FNF.mail_item system_mail = 2;
inline int mailbox::system_mail_size() const {
  return system_mail_.size();
}
inline void mailbox::clear_system_mail() {
  system_mail_.Clear();
}
inline const ::FNF::mail_item& mailbox::system_mail(int index) const {
  return system_mail_.Get(index);
}
inline ::FNF::mail_item* mailbox::mutable_system_mail(int index) {
  return system_mail_.Mutable(index);
}
inline ::FNF::mail_item* mailbox::add_system_mail() {
  return system_mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >&
mailbox::system_mail() const {
  return system_mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::mail_item >*
mailbox::mutable_system_mail() {
  return &system_mail_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FNF

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMMailType>() {
  return ::FNF::EMMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMMailStatus>() {
  return ::FNF::EMMailStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMMailPlat>() {
  return ::FNF::EMMailPlat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMIdipGiftType>() {
  return ::FNF::EMIdipGiftType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fnf_5fmail_2eproto__INCLUDED
