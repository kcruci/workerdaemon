// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fnf_friends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fnf_friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FNF {

namespace {

const ::google::protobuf::Descriptor* user_friends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_friends_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* helpitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  helpitem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_FRIGIFT_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fnf_5ffriends_2eproto() {
  protobuf_AddDesc_fnf_5ffriends_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fnf_friends.proto");
  GOOGLE_CHECK(file != NULL);
  user_friends_descriptor_ = file->message_type(0);
  static const int user_friends_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, help_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, help_gift_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, help_gift_time_),
  };
  user_friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_friends_descriptor_,
      user_friends::default_instance_,
      user_friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_friends));
  friend_info_descriptor_ = file->message_type(1);
  static const int friend_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, mail_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, frigift_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, frigift_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, callhelp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, callhelp_count_),
  };
  friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_info_descriptor_,
      friend_info::default_instance_,
      friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_info));
  helpitem_descriptor_ = file->message_type(2);
  static const int helpitem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helpitem, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helpitem, help_starfruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helpitem, help_time_),
  };
  helpitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      helpitem_descriptor_,
      helpitem::default_instance_,
      helpitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helpitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helpitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(helpitem));
  EM_FRIGIFT_STATUS_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fnf_5ffriends_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_friends_descriptor_, &user_friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_info_descriptor_, &friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    helpitem_descriptor_, &helpitem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fnf_5ffriends_2eproto() {
  delete user_friends::default_instance_;
  delete user_friends_reflection_;
  delete friend_info::default_instance_;
  delete friend_info_reflection_;
  delete helpitem::default_instance_;
  delete helpitem_reflection_;
}

void protobuf_AddDesc_fnf_5ffriends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021fnf_friends.proto\022\003FNF\"\222\001\n\014user_friend"
    "s\022\013\n\003uid\030\001 \002(\003\022!\n\007friends\030\002 \003(\0132\020.FNF.fr"
    "iend_info\022!\n\nhelp_items\030\003 \003(\0132\r.FNF.help"
    "item\022\027\n\017help_gift_count\030\004 \001(\005\022\026\n\016help_gi"
    "ft_time\030\005 \001(\005\"\265\001\n\013friend_info\022\016\n\006openid\030"
    "\001 \002(\t\022\016\n\006remark\030\002 \001(\t\022\021\n\tmail_time\030\003 \001(\005"
    "\022.\n\016frigift_status\030\004 \001(\0162\026.FNF.EM_FRIGIF"
    "T_STATUS\022\024\n\014frigift_time\030\005 \001(\005\022\025\n\rcallhe"
    "lp_time\030\006 \001(\005\022\026\n\016callhelp_count\030\007 \001(\005\"C\n"
    "\010helpitem\022\014\n\004fuid\030\001 \001(\003\022\026\n\016help_starfrui"
    "t\030\002 \001(\005\022\021\n\thelp_time\030\003 \001(\005*t\n\021EM_FRIGIFT"
    "_STATUS\022\026\n\022EM_FRI_GIFT_CANGOT\020\000\022\023\n\017EM_FR"
    "I_GIFT_GOT\020\001\022\027\n\023EM_FRI_GIFT_INVITED\020\002\022\031\n"
    "\025EM_FRI_GIFT_CANINVITE\020\003", 544);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fnf_friends.proto", &protobuf_RegisterTypes);
  user_friends::default_instance_ = new user_friends();
  friend_info::default_instance_ = new friend_info();
  helpitem::default_instance_ = new helpitem();
  user_friends::default_instance_->InitAsDefaultInstance();
  friend_info::default_instance_->InitAsDefaultInstance();
  helpitem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fnf_5ffriends_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fnf_5ffriends_2eproto {
  StaticDescriptorInitializer_fnf_5ffriends_2eproto() {
    protobuf_AddDesc_fnf_5ffriends_2eproto();
  }
} static_descriptor_initializer_fnf_5ffriends_2eproto_;
const ::google::protobuf::EnumDescriptor* EM_FRIGIFT_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_FRIGIFT_STATUS_descriptor_;
}
bool EM_FRIGIFT_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int user_friends::kUidFieldNumber;
const int user_friends::kFriendsFieldNumber;
const int user_friends::kHelpItemsFieldNumber;
const int user_friends::kHelpGiftCountFieldNumber;
const int user_friends::kHelpGiftTimeFieldNumber;
#endif  // !_MSC_VER

user_friends::user_friends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_friends::InitAsDefaultInstance() {
}

user_friends::user_friends(const user_friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_friends::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  help_gift_count_ = 0;
  help_gift_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_friends::~user_friends() {
  SharedDtor();
}

void user_friends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_friends_descriptor_;
}

const user_friends& user_friends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5ffriends_2eproto();
  return *default_instance_;
}

user_friends* user_friends::default_instance_ = NULL;

user_friends* user_friends::New() const {
  return new user_friends;
}

void user_friends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    help_gift_count_ = 0;
    help_gift_time_ = 0;
  }
  friends_.Clear();
  help_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .FNF.friend_info friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectTag(26)) goto parse_help_items;
        break;
      }

      // repeated .FNF.helpitem help_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_help_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_items;
        if (input->ExpectTag(32)) goto parse_help_gift_count;
        break;
      }

      // optional int32 help_gift_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_gift_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &help_gift_count_)));
          set_has_help_gift_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_help_gift_time;
        break;
      }

      // optional int32 help_gift_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_gift_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &help_gift_time_)));
          set_has_help_gift_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // repeated .FNF.friend_info friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  // repeated .FNF.helpitem help_items = 3;
  for (int i = 0; i < this->help_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->help_items(i), output);
  }

  // optional int32 help_gift_count = 4;
  if (has_help_gift_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->help_gift_count(), output);
  }

  // optional int32 help_gift_time = 5;
  if (has_help_gift_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->help_gift_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // repeated .FNF.friend_info friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(i), target);
  }

  // repeated .FNF.helpitem help_items = 3;
  for (int i = 0; i < this->help_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->help_items(i), target);
  }

  // optional int32 help_gift_count = 4;
  if (has_help_gift_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->help_gift_count(), target);
  }

  // optional int32 help_gift_time = 5;
  if (has_help_gift_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->help_gift_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_friends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 help_gift_count = 4;
    if (has_help_gift_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->help_gift_count());
    }

    // optional int32 help_gift_time = 5;
    if (has_help_gift_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->help_gift_time());
    }

  }
  // repeated .FNF.friend_info friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated .FNF.helpitem help_items = 3;
  total_size += 1 * this->help_items_size();
  for (int i = 0; i < this->help_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->help_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_friends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_friends::MergeFrom(const user_friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  help_items_.MergeFrom(from.help_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_help_gift_count()) {
      set_help_gift_count(from.help_gift_count());
    }
    if (from.has_help_gift_time()) {
      set_help_gift_time(from.help_gift_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_friends::CopyFrom(const user_friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_friends::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void user_friends::Swap(user_friends* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    friends_.Swap(&other->friends_);
    help_items_.Swap(&other->help_items_);
    std::swap(help_gift_count_, other->help_gift_count_);
    std::swap(help_gift_time_, other->help_gift_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_friends_descriptor_;
  metadata.reflection = user_friends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_info::kOpenidFieldNumber;
const int friend_info::kRemarkFieldNumber;
const int friend_info::kMailTimeFieldNumber;
const int friend_info::kFrigiftStatusFieldNumber;
const int friend_info::kFrigiftTimeFieldNumber;
const int friend_info::kCallhelpTimeFieldNumber;
const int friend_info::kCallhelpCountFieldNumber;
#endif  // !_MSC_VER

friend_info::friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_info::InitAsDefaultInstance() {
}

friend_info::friend_info(const friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_info::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_time_ = 0;
  frigift_status_ = 0;
  frigift_time_ = 0;
  callhelp_time_ = 0;
  callhelp_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_info::~friend_info() {
  SharedDtor();
}

void friend_info::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_info_descriptor_;
}

const friend_info& friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5ffriends_2eproto();
  return *default_instance_;
}

friend_info* friend_info::default_instance_ = NULL;

friend_info* friend_info::New() const {
  return new friend_info;
}

void friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
    mail_time_ = 0;
    frigift_status_ = 0;
    frigift_time_ = 0;
    callhelp_time_ = 0;
    callhelp_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remark;
        break;
      }

      // optional string remark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_time;
        break;
      }

      // optional int32 mail_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_time_)));
          set_has_mail_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frigift_status;
        break;
      }

      // optional .FNF.EM_FRIGIFT_STATUS frigift_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frigift_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EM_FRIGIFT_STATUS_IsValid(value)) {
            set_frigift_status(static_cast< ::FNF::EM_FRIGIFT_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frigift_time;
        break;
      }

      // optional int32 frigift_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frigift_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frigift_time_)));
          set_has_frigift_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_callhelp_time;
        break;
      }

      // optional int32 callhelp_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callhelp_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callhelp_time_)));
          set_has_callhelp_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_callhelp_count;
        break;
      }

      // optional int32 callhelp_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callhelp_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callhelp_count_)));
          set_has_callhelp_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->remark(), output);
  }

  // optional int32 mail_time = 3;
  if (has_mail_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mail_time(), output);
  }

  // optional .FNF.EM_FRIGIFT_STATUS frigift_status = 4;
  if (has_frigift_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->frigift_status(), output);
  }

  // optional int32 frigift_time = 5;
  if (has_frigift_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frigift_time(), output);
  }

  // optional int32 callhelp_time = 6;
  if (has_callhelp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->callhelp_time(), output);
  }

  // optional int32 callhelp_count = 7;
  if (has_callhelp_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->callhelp_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remark(), target);
  }

  // optional int32 mail_time = 3;
  if (has_mail_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mail_time(), target);
  }

  // optional .FNF.EM_FRIGIFT_STATUS frigift_status = 4;
  if (has_frigift_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->frigift_status(), target);
  }

  // optional int32 frigift_time = 5;
  if (has_frigift_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frigift_time(), target);
  }

  // optional int32 callhelp_time = 6;
  if (has_callhelp_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->callhelp_time(), target);
  }

  // optional int32 callhelp_count = 7;
  if (has_callhelp_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->callhelp_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string remark = 2;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional int32 mail_time = 3;
    if (has_mail_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_time());
    }

    // optional .FNF.EM_FRIGIFT_STATUS frigift_status = 4;
    if (has_frigift_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frigift_status());
    }

    // optional int32 frigift_time = 5;
    if (has_frigift_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frigift_time());
    }

    // optional int32 callhelp_time = 6;
    if (has_callhelp_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callhelp_time());
    }

    // optional int32 callhelp_count = 7;
    if (has_callhelp_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callhelp_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_info::MergeFrom(const friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_mail_time()) {
      set_mail_time(from.mail_time());
    }
    if (from.has_frigift_status()) {
      set_frigift_status(from.frigift_status());
    }
    if (from.has_frigift_time()) {
      set_frigift_time(from.frigift_time());
    }
    if (from.has_callhelp_time()) {
      set_callhelp_time(from.callhelp_time());
    }
    if (from.has_callhelp_count()) {
      set_callhelp_count(from.callhelp_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_info::CopyFrom(const friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void friend_info::Swap(friend_info* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(remark_, other->remark_);
    std::swap(mail_time_, other->mail_time_);
    std::swap(frigift_status_, other->frigift_status_);
    std::swap(frigift_time_, other->frigift_time_);
    std::swap(callhelp_time_, other->callhelp_time_);
    std::swap(callhelp_count_, other->callhelp_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_info_descriptor_;
  metadata.reflection = friend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int helpitem::kFuidFieldNumber;
const int helpitem::kHelpStarfruitFieldNumber;
const int helpitem::kHelpTimeFieldNumber;
#endif  // !_MSC_VER

helpitem::helpitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void helpitem::InitAsDefaultInstance() {
}

helpitem::helpitem(const helpitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void helpitem::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_LONGLONG(0);
  help_starfruit_ = 0;
  help_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

helpitem::~helpitem() {
  SharedDtor();
}

void helpitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void helpitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* helpitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return helpitem_descriptor_;
}

const helpitem& helpitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5ffriends_2eproto();
  return *default_instance_;
}

helpitem* helpitem::default_instance_ = NULL;

helpitem* helpitem::New() const {
  return new helpitem;
}

void helpitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fuid_ = GOOGLE_LONGLONG(0);
    help_starfruit_ = 0;
    help_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool helpitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_help_starfruit;
        break;
      }

      // optional int32 help_starfruit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_starfruit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &help_starfruit_)));
          set_has_help_starfruit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_help_time;
        break;
      }

      // optional int32 help_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &help_time_)));
          set_has_help_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void helpitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fuid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fuid(), output);
  }

  // optional int32 help_starfruit = 2;
  if (has_help_starfruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->help_starfruit(), output);
  }

  // optional int32 help_time = 3;
  if (has_help_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->help_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* helpitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fuid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fuid(), target);
  }

  // optional int32 help_starfruit = 2;
  if (has_help_starfruit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->help_starfruit(), target);
  }

  // optional int32 help_time = 3;
  if (has_help_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->help_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int helpitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fuid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fuid());
    }

    // optional int32 help_starfruit = 2;
    if (has_help_starfruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->help_starfruit());
    }

    // optional int32 help_time = 3;
    if (has_help_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->help_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void helpitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const helpitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const helpitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void helpitem::MergeFrom(const helpitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_help_starfruit()) {
      set_help_starfruit(from.help_starfruit());
    }
    if (from.has_help_time()) {
      set_help_time(from.help_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void helpitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void helpitem::CopyFrom(const helpitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool helpitem::IsInitialized() const {

  return true;
}

void helpitem::Swap(helpitem* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(help_starfruit_, other->help_starfruit_);
    std::swap(help_time_, other->help_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata helpitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = helpitem_descriptor_;
  metadata.reflection = helpitem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FNF

// @@protoc_insertion_point(global_scope)
