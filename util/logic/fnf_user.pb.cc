// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fnf_user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fnf_user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FNF {

namespace {

const ::google::protobuf::Descriptor* wallet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wallet_reflection_ = NULL;
const ::google::protobuf::Descriptor* profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  profile_reflection_ = NULL;
const ::google::protobuf::Descriptor* back_pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  back_pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* grow_up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grow_up_reflection_ = NULL;
const ::google::protobuf::Descriptor* material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  material_reflection_ = NULL;
const ::google::protobuf::Descriptor* active_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  active_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_daily_limit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_daily_limit_reflection_ = NULL;
const ::google::protobuf::Descriptor* newlife_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  newlife_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* lottery_protection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_protection_reflection_ = NULL;
const ::google::protobuf::Descriptor* SafeRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafeRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SafeGain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafeGain_reflection_ = NULL;
const ::google::protobuf::Descriptor* medal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  medal_reflection_ = NULL;
const ::google::protobuf::Descriptor* device_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  device_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* oauth_auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  oauth_auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* ptnumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ptnumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* roll_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roll_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* skin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skin_reflection_ = NULL;
const ::google::protobuf::Descriptor* score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  score_reflection_ = NULL;
const ::google::protobuf::Descriptor* blade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blade_reflection_ = NULL;
const ::google::protobuf::Descriptor* ninjia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ninjia_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_reflection_ = NULL;
const ::google::protobuf::Descriptor* achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* signin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  signin_reflection_ = NULL;
const ::google::protobuf::Descriptor* numbers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  numbers_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EmRankSafe_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EmGainSafe_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_ROLL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_ROLL_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMTaskStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMActivityGiftStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fnf_5fuser_2eproto() {
  protobuf_AddDesc_fnf_5fuser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fnf_user.proto");
  GOOGLE_CHECK(file != NULL);
  wallet_descriptor_ = file->message_type(0);
  static const int wallet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wallet, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wallet, gem_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wallet, gem_del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wallet, update_time_),
  };
  wallet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wallet_descriptor_,
      wallet::default_instance_,
      wallet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wallet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wallet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wallet));
  profile_descriptor_ = file->message_type(1);
  static const int profile_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, mail_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, ios_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, and_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, last_active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, cont_active_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, cont_active_giftmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, last_play_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, oauth_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, single_play_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, medal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, curr_play_dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, friend_list_succ_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, friend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, friend_count_giftmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, send_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, today_total_starfruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, safe_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, safe_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, newlife_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, lottery_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, tips_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, challenge_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, challenge_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, vipscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, vipgift_time_),
  };
  profile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      profile_descriptor_,
      profile::default_instance_,
      profile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(profile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(profile));
  back_pack_descriptor_ = file->message_type(2);
  static const int back_pack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, blades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, ninjias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, skins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, materials_),
  };
  back_pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      back_pack_descriptor_,
      back_pack::default_instance_,
      back_pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(back_pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(back_pack));
  grow_up_descriptor_ = file->message_type(3);
  static const int grow_up_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, achievements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, daily_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, cumulative_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, current_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, cumulative_task_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, active_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, active_receive_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, active_time_),
  };
  grow_up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      grow_up_descriptor_,
      grow_up::default_instance_,
      grow_up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grow_up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(grow_up));
  material_descriptor_ = file->message_type(4);
  static const int material_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(material, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(material, count_),
  };
  material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      material_descriptor_,
      material::default_instance_,
      material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(material));
  active_item_descriptor_ = file->message_type(5);
  static const int active_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_item, count_),
  };
  active_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      active_item_descriptor_,
      active_item::default_instance_,
      active_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(active_item));
  task_daily_limit_descriptor_ = file->message_type(6);
  static const int task_daily_limit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_daily_limit, cumulative_task_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_daily_limit, cumulative_task_updatetime_),
  };
  task_daily_limit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_daily_limit_descriptor_,
      task_daily_limit::default_instance_,
      task_daily_limit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_daily_limit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_daily_limit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_daily_limit));
  newlife_count_descriptor_ = file->message_type(7);
  static const int newlife_count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newlife_count, newlife_end_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newlife_count, newlife_bomb_count_),
  };
  newlife_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      newlife_count_descriptor_,
      newlife_count::default_instance_,
      newlife_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newlife_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newlife_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(newlife_count));
  lottery_protection_descriptor_ = file->message_type(8);
  static const int lottery_protection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_protection, gem_no_rare_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_protection, starfruit_no_rare_count_),
  };
  lottery_protection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_protection_descriptor_,
      lottery_protection::default_instance_,
      lottery_protection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_protection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_protection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_protection));
  SafeRank_descriptor_ = file->message_type(9);
  static const int SafeRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeRank, rank_safe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeRank, rank_safe_end_),
  };
  SafeRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SafeRank_descriptor_,
      SafeRank::default_instance_,
      SafeRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SafeRank));
  SafeGain_descriptor_ = file->message_type(10);
  static const int SafeGain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeGain, gain_safe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeGain, gain_safe_end_),
  };
  SafeGain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SafeGain_descriptor_,
      SafeGain::default_instance_,
      SafeGain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeGain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeGain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SafeGain));
  medal_descriptor_ = file->message_type(11);
  static const int medal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(medal, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(medal, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(medal, copper_),
  };
  medal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      medal_descriptor_,
      medal::default_instance_,
      medal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(medal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(medal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(medal));
  device_info_descriptor_ = file->message_type(12);
  static const int device_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, system_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, device_name_),
  };
  device_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      device_info_descriptor_,
      device_info::default_instance_,
      device_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(device_info));
  oauth_auth_descriptor_ = file->message_type(13);
  static const int oauth_auth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oauth_auth, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oauth_auth, refresh_token_),
  };
  oauth_auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      oauth_auth_descriptor_,
      oauth_auth::default_instance_,
      oauth_auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oauth_auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oauth_auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(oauth_auth));
  ptnumber_descriptor_ = file->message_type(14);
  static const int ptnumber_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, starfruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, last_energy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, gem_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, gem_del_),
  };
  ptnumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ptnumber_descriptor_,
      ptnumber::default_instance_,
      ptnumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ptnumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ptnumber));
  prop_descriptor_ = file->message_type(15);
  static const int prop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop, use_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop, time_limit_),
  };
  prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      prop_descriptor_,
      prop::default_instance_,
      prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(prop));
  roll_info_descriptor_ = file->message_type(16);
  static const int roll_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roll_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roll_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roll_info, real_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roll_info, status_),
  };
  roll_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roll_info_descriptor_,
      roll_info::default_instance_,
      roll_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roll_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roll_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roll_info));
  skin_descriptor_ = file->message_type(17);
  static const int skin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin, got_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin, is_active_),
  };
  skin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skin_descriptor_,
      skin::default_instance_,
      skin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skin));
  score_descriptor_ = file->message_type(18);
  static const int score_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, week_top_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, week_top_score_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, history_top_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, history_top_score_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, lastweek_top_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, lastweek_top_score_time_),
  };
  score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      score_descriptor_,
      score::default_instance_,
      score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(score));
  blade_descriptor_ = file->message_type(19);
  static const int blade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blade, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blade, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blade, got_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blade, is_active_),
  };
  blade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blade_descriptor_,
      blade::default_instance_,
      blade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blade));
  ninjia_descriptor_ = file->message_type(20);
  static const int ninjia_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ninjia, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ninjia, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ninjia, got_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ninjia, is_active_),
  };
  ninjia_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ninjia_descriptor_,
      ninjia::default_instance_,
      ninjia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ninjia, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ninjia, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ninjia));
  pet_descriptor_ = file->message_type(21);
  static const int pet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, feed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, gift_got_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, is_active_),
  };
  pet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_descriptor_,
      pet::default_instance_,
      pet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet));
  achievement_descriptor_ = file->message_type(22);
  static const int achievement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievement, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievement, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievement, count_),
  };
  achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      achievement_descriptor_,
      achievement::default_instance_,
      achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(achievement));
  task_descriptor_ = file->message_type(23);
  static const int task_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, order_id_),
  };
  task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_descriptor_,
      task::default_instance_,
      task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task));
  activity_descriptor_ = file->message_type(24);
  static const int activity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, gift_status_),
  };
  activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_descriptor_,
      activity::default_instance_,
      activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity));
  signin_descriptor_ = file->message_type(25);
  static const int signin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, resign_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, update_time_),
  };
  signin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      signin_descriptor_,
      signin::default_instance_,
      signin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(signin));
  numbers_descriptor_ = file->message_type(26);
  static const int numbers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(numbers, mail_count_),
  };
  numbers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      numbers_descriptor_,
      numbers::default_instance_,
      numbers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(numbers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(numbers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(numbers));
  EmRankSafe_descriptor_ = file->enum_type(0);
  EmGainSafe_descriptor_ = file->enum_type(1);
  EM_ROLL_TYPE_descriptor_ = file->enum_type(2);
  EM_ROLL_STATUS_descriptor_ = file->enum_type(3);
  EMTaskStatus_descriptor_ = file->enum_type(4);
  EMActivityType_descriptor_ = file->enum_type(5);
  EMActivityGiftStatus_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fnf_5fuser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wallet_descriptor_, &wallet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    profile_descriptor_, &profile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    back_pack_descriptor_, &back_pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    grow_up_descriptor_, &grow_up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    material_descriptor_, &material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    active_item_descriptor_, &active_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_daily_limit_descriptor_, &task_daily_limit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    newlife_count_descriptor_, &newlife_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_protection_descriptor_, &lottery_protection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SafeRank_descriptor_, &SafeRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SafeGain_descriptor_, &SafeGain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    medal_descriptor_, &medal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    device_info_descriptor_, &device_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    oauth_auth_descriptor_, &oauth_auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ptnumber_descriptor_, &ptnumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    prop_descriptor_, &prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roll_info_descriptor_, &roll_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skin_descriptor_, &skin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    score_descriptor_, &score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blade_descriptor_, &blade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ninjia_descriptor_, &ninjia::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_descriptor_, &pet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    achievement_descriptor_, &achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_descriptor_, &task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_descriptor_, &activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    signin_descriptor_, &signin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    numbers_descriptor_, &numbers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fnf_5fuser_2eproto() {
  delete wallet::default_instance_;
  delete wallet_reflection_;
  delete profile::default_instance_;
  delete profile_reflection_;
  delete back_pack::default_instance_;
  delete back_pack_reflection_;
  delete grow_up::default_instance_;
  delete grow_up_reflection_;
  delete material::default_instance_;
  delete material_reflection_;
  delete active_item::default_instance_;
  delete active_item_reflection_;
  delete task_daily_limit::default_instance_;
  delete task_daily_limit_reflection_;
  delete newlife_count::default_instance_;
  delete newlife_count_reflection_;
  delete lottery_protection::default_instance_;
  delete lottery_protection_reflection_;
  delete SafeRank::default_instance_;
  delete SafeRank_reflection_;
  delete SafeGain::default_instance_;
  delete SafeGain_reflection_;
  delete medal::default_instance_;
  delete medal_reflection_;
  delete device_info::default_instance_;
  delete device_info_reflection_;
  delete oauth_auth::default_instance_;
  delete oauth_auth_reflection_;
  delete ptnumber::default_instance_;
  delete ptnumber_reflection_;
  delete prop::default_instance_;
  delete prop_reflection_;
  delete roll_info::default_instance_;
  delete roll_info_reflection_;
  delete skin::default_instance_;
  delete skin_reflection_;
  delete score::default_instance_;
  delete score_reflection_;
  delete blade::default_instance_;
  delete blade_reflection_;
  delete ninjia::default_instance_;
  delete ninjia_reflection_;
  delete pet::default_instance_;
  delete pet_reflection_;
  delete achievement::default_instance_;
  delete achievement_reflection_;
  delete task::default_instance_;
  delete task_reflection_;
  delete activity::default_instance_;
  delete activity_reflection_;
  delete signin::default_instance_;
  delete signin_reflection_;
  delete numbers::default_instance_;
  delete numbers_reflection_;
}

void protobuf_AddDesc_fnf_5fuser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016fnf_user.proto\022\003FNF\"L\n\006wallet\022\013\n\003gem\030\001"
    " \002(\005\022\017\n\007gem_add\030\002 \001(\005\022\017\n\007gem_del\030\003 \001(\005\022\023"
    "\n\013update_time\030\004 \001(\005\"\316\007\n\007profile\022\013\n\003uid\030\001"
    " \002(\003\022\023\n\013mail_switch\030\004 \002(\005\022\016\n\006vip_lv\030\005 \001("
    "\005\022\031\n\005score\030\006 \001(\0132\n.FNF.score\022!\n\nios_numb"
    "er\030\007 \001(\0132\r.FNF.ptnumber\022!\n\nand_number\030\010 "
    "\001(\0132\r.FNF.ptnumber\022\020\n\010reg_time\030\t \002(\005\022\030\n\020"
    "last_active_time\030\n \002(\005\022\030\n\020cont_active_da"
    "ys\030\013 \002(\005\022\034\n\024cont_active_giftmask\030\014 \001(\005\022\026"
    "\n\016last_play_time\030\r \001(\005\022\020\n\010nickname\030\016 \002(\t"
    "\022\016\n\006avatar\030\017 \002(\t\022\016\n\006gender\030\020 \001(\005\022\016\n\006open"
    "id\030\021 \002(\t\022#\n\noauth_auth\030\023 \001(\0132\017.FNF.oauth"
    "_auth\022#\n\020single_play_task\030\024 \001(\0132\t.FNF.ta"
    "sk\022\031\n\005medal\030\025 \001(\0132\n.FNF.medal\022\022\n\nmedal_t"
    "ime\030\026 \001(\005\022\030\n\020curr_play_dropid\030\027 \001(\005\022\035\n\025f"
    "riend_list_succ_time\030\030 \001(\005\022\022\n\ngame_count"
    "\030\031 \001(\005\022\024\n\014friend_count\030\032 \001(\005\022\035\n\025friend_c"
    "ount_giftmask\030\033 \001(\005\022\023\n\013send_energy\030\034 \001(\005"
    "\022\033\n\006signin\030\035 \001(\0132\013.FNF.signin\022\035\n\025today_t"
    "otal_starfruit\030\036 \001(\005\022 \n\tsafe_rank\030\037 \001(\0132"
    "\r.FNF.SafeRank\022 \n\tsafe_gain\030  \001(\0132\r.FNF."
    "SafeGain\022)\n\rnewlife_count\030! \001(\0132\022.FNF.ne"
    "wlife_count\0223\n\022lottery_protection\030\" \001(\0132"
    "\027.FNF.lottery_protection\022\020\n\010tips_bit\030# \001"
    "(\003\022\027\n\017challenge_count\030$ \001(\005\022\026\n\016challenge"
    "_time\030% \001(\005\022\027\n\017challenge_score\030& \001(\005\022\020\n\010"
    "vipscore\030\' \001(\005\022\024\n\014vipgift_time\030( \001(\005\"\321\001\n"
    "\tback_pack\022\032\n\006blades\030\001 \003(\0132\n.FNF.blade\022\034"
    "\n\007ninjias\030\002 \003(\0132\013.FNF.ninjia\022\026\n\004pets\030\003 \003"
    "(\0132\010.FNF.pet\022\030\n\005props\030\004 \003(\0132\t.FNF.prop\022\034"
    "\n\004roll\030\005 \001(\0132\016.FNF.roll_info\022\030\n\005skins\030\006 "
    "\003(\0132\t.FNF.skin\022 \n\tmaterials\030\007 \003(\0132\r.FNF."
    "material\"\257\002\n\007grow_up\022&\n\014achievements\030\001 \003"
    "(\0132\020.FNF.achievement\022\036\n\013daily_tasks\030\002 \003("
    "\0132\t.FNF.task\022#\n\020cumulative_tasks\030\003 \003(\0132\t"
    ".FNF.task\022\'\n\020current_activity\030\004 \003(\0132\r.FN"
    "F.activity\0224\n\025cumulative_task_limit\030\005 \001("
    "\0132\025.FNF.task_daily_limit\022&\n\014active_items"
    "\030\006 \003(\0132\020.FNF.active_item\022\033\n\023active_recei"
    "ve_step\030\007 \001(\005\022\023\n\013active_time\030\010 \001(\005\"%\n\010ma"
    "terial\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"(\n\013act"
    "ive_item\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"U\n\020t"
    "ask_daily_limit\022\035\n\025cumulative_task_count"
    "\030\001 \002(\005\022\"\n\032cumulative_task_updatetime\030\002 \002"
    "(\005\"F\n\rnewlife_count\022\031\n\021newlife_end_count"
    "\030\001 \002(\005\022\032\n\022newlife_bomb_count\030\002 \002(\005\"P\n\022lo"
    "ttery_protection\022\031\n\021gem_no_rare_count\030\001 "
    "\001(\005\022\037\n\027starfruit_no_rare_count\030\002 \001(\005\"E\n\010"
    "SafeRank\022\"\n\trank_safe\030\001 \002(\0162\017.FNF.EmRank"
    "Safe\022\025\n\rrank_safe_end\030\002 \002(\005\"E\n\010SafeGain\022"
    "\"\n\tgain_safe\030\001 \002(\0162\017.FNF.EmGainSafe\022\025\n\rg"
    "ain_safe_end\030\002 \002(\005\"5\n\005medal\022\014\n\004gold\030\001 \002("
    "\005\022\016\n\006silver\030\002 \002(\005\022\016\n\006copper\030\003 \002(\005\"H\n\013dev"
    "ice_info\022\021\n\tdevice_id\030\001 \001(\t\022\021\n\tsystem_os"
    "\030\002 \001(\t\022\023\n\013device_name\030\003 \001(\t\"9\n\noauth_aut"
    "h\022\024\n\014access_token\030\001 \001(\t\022\025\n\rrefresh_token"
    "\030\002 \001(\t\"v\n\010ptnumber\022\021\n\tstarfruit\030\001 \002(\005\022\013\n"
    "\003gem\030\002 \002(\005\022\016\n\006energy\030\003 \002(\005\022\030\n\020last_energ"
    "y_time\030\004 \002(\005\022\017\n\007gem_add\030\005 \001(\005\022\017\n\007gem_del"
    "\030\006 \001(\005\"H\n\004prop\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \002("
    "\005\022\021\n\tuse_limit\030\003 \001(\005\022\022\n\ntime_limit\030\004 \001(\005"
    "\"n\n\troll_info\022\n\n\002id\030\001 \002(\005\022\037\n\004type\030\002 \002(\0162"
    "\021.FNF.EM_ROLL_TYPE\022\017\n\007real_no\030\003 \002(\005\022#\n\006s"
    "tatus\030\004 \002(\0162\023.FNF.EM_ROLL_STATUS\"L\n\004skin"
    "\022\n\n\002id\030\001 \002(\005\022\020\n\010got_time\030\002 \002(\005\022\023\n\013expire"
    "_time\030\003 \002(\005\022\021\n\tis_active\030\004 \001(\005\"\264\001\n\005score"
    "\022\026\n\016week_top_score\030\001 \002(\005\022\033\n\023week_top_sco"
    "re_time\030\002 \002(\005\022\031\n\021history_top_score\030\003 \002(\005"
    "\022\036\n\026history_top_score_time\030\004 \002(\005\022\032\n\022last"
    "week_top_score\030\005 \001(\005\022\037\n\027lastweek_top_sco"
    "re_time\030\006 \001(\005\"D\n\005blade\022\n\n\002id\030\001 \002(\005\022\n\n\002lv"
    "\030\002 \002(\005\022\020\n\010got_time\030\003 \002(\005\022\021\n\tis_active\030\004 "
    "\001(\005\"E\n\006ninjia\022\n\n\002id\030\001 \002(\005\022\n\n\002lv\030\002 \002(\005\022\020\n"
    "\010got_time\030\003 \002(\005\022\021\n\tis_active\030\004 \001(\005\"v\n\003pe"
    "t\022\n\n\002id\030\001 \002(\005\022\013\n\003exp\030\002 \002(\005\022\n\n\002lv\030\003 \002(\005\022\r"
    "\n\005count\030\004 \002(\005\022\021\n\tfeed_time\030\005 \001(\005\022\025\n\rgift"
    "_got_time\030\006 \001(\005\022\021\n\tis_active\030\007 \001(\005\"B\n\013ac"
    "hievement\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\n\n\002l"
    "v\030\003 \002(\005\022\r\n\005count\030\004 \002(\005\"\204\001\n\004task\022\n\n\002id\030\001 "
    "\002(\005\022\014\n\004type\030\002 \002(\005\022\n\n\002lv\030\003 \002(\005\022!\n\006status\030"
    "\004 \002(\0162\021.FNF.EMTaskStatus\022\r\n\005count\030\005 \002(\005\022"
    "\022\n\nstart_time\030\006 \002(\005\022\020\n\010order_id\030\007 \002(\005\"\221\001"
    "\n\010activity\022\n\n\002id\030\001 \002(\005\022!\n\004type\030\002 \002(\0162\023.F"
    "NF.EMActivityType\022\021\n\tcondition\030\003 \001(\005\022\023\n\013"
    "update_time\030\004 \001(\005\022.\n\013gift_status\030\005 \001(\0162\031"
    ".FNF.EMActivityGiftStatus\"N\n\006signin\022\n\n\002i"
    "d\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\022\024\n\014resign_count\030\003"
    " \002(\005\022\023\n\013update_time\030\004 \002(\005\"\035\n\007numbers\022\022\n\n"
    "mail_count\030\001 \002(\005*2\n\nEmRankSafe\022\022\n\016EM_RAN"
    "K_NORMAL\020\000\022\020\n\014EM_RANK_HIDE\020\001*2\n\nEmGainSa"
    "fe\022\022\n\016EM_GAIN_NORMAL\020\000\022\020\n\014EM_GAIN_ZERO\020\001"
    "*`\n\014EM_ROLL_TYPE\022\022\n\016ROLL_TYPE_PROP\020\001\022\022\n\016"
    "ROLL_TYPE_TIME\020\002\022\023\n\017RELL_TYPE_SCORE\020\003\022\023\n"
    "\017RELL_TYPE_FRUIT\020\004*;\n\016EM_ROLL_STATUS\022\023\n\017"
    "ROLL_STATUS_NEW\020\000\022\024\n\020ROLL_STATUS_USED\020\001*"
    "E\n\014EMTaskStatus\022\016\n\nTASK_DOING\020\000\022\021\n\rTASK_"
    "FINISHED\020\001\022\022\n\016TASK_HASGIFTED\020\002*\355\001\n\016EMAct"
    "ivityType\022\033\n\027EM_ACTIVITY_ALWAYS_SHOW\020\000\022\026"
    "\n\022EM_ACTIVITY_ENERGY\020\001\022\033\n\027EM_ACTIVITY_AC"
    "HIEVEMENT\020\002\022\023\n\017EM_ACTIVITY_QIE\020\003\022\026\n\022EM_A"
    "CTIVITY_NINJIA\020\004\022\023\n\017EM_ACTIVITY_PET\020\005\022\025\n"
    "\021EM_ACTIVITY_BLADE\020\006\022\026\n\022EM_ACTIVITY_DOUB"
    "LE\020\007\022\030\n\024EM_ACTIVITY_GAMEDROP\020\010*G\n\024EMActi"
    "vityGiftStatus\022\026\n\022EM_ACTIVITY_NORMAL\020\000\022\027"
    "\n\023EM_ACTIVITY_GIFTGOT\020\001", 4183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fnf_user.proto", &protobuf_RegisterTypes);
  wallet::default_instance_ = new wallet();
  profile::default_instance_ = new profile();
  back_pack::default_instance_ = new back_pack();
  grow_up::default_instance_ = new grow_up();
  material::default_instance_ = new material();
  active_item::default_instance_ = new active_item();
  task_daily_limit::default_instance_ = new task_daily_limit();
  newlife_count::default_instance_ = new newlife_count();
  lottery_protection::default_instance_ = new lottery_protection();
  SafeRank::default_instance_ = new SafeRank();
  SafeGain::default_instance_ = new SafeGain();
  medal::default_instance_ = new medal();
  device_info::default_instance_ = new device_info();
  oauth_auth::default_instance_ = new oauth_auth();
  ptnumber::default_instance_ = new ptnumber();
  prop::default_instance_ = new prop();
  roll_info::default_instance_ = new roll_info();
  skin::default_instance_ = new skin();
  score::default_instance_ = new score();
  blade::default_instance_ = new blade();
  ninjia::default_instance_ = new ninjia();
  pet::default_instance_ = new pet();
  achievement::default_instance_ = new achievement();
  task::default_instance_ = new task();
  activity::default_instance_ = new activity();
  signin::default_instance_ = new signin();
  numbers::default_instance_ = new numbers();
  wallet::default_instance_->InitAsDefaultInstance();
  profile::default_instance_->InitAsDefaultInstance();
  back_pack::default_instance_->InitAsDefaultInstance();
  grow_up::default_instance_->InitAsDefaultInstance();
  material::default_instance_->InitAsDefaultInstance();
  active_item::default_instance_->InitAsDefaultInstance();
  task_daily_limit::default_instance_->InitAsDefaultInstance();
  newlife_count::default_instance_->InitAsDefaultInstance();
  lottery_protection::default_instance_->InitAsDefaultInstance();
  SafeRank::default_instance_->InitAsDefaultInstance();
  SafeGain::default_instance_->InitAsDefaultInstance();
  medal::default_instance_->InitAsDefaultInstance();
  device_info::default_instance_->InitAsDefaultInstance();
  oauth_auth::default_instance_->InitAsDefaultInstance();
  ptnumber::default_instance_->InitAsDefaultInstance();
  prop::default_instance_->InitAsDefaultInstance();
  roll_info::default_instance_->InitAsDefaultInstance();
  skin::default_instance_->InitAsDefaultInstance();
  score::default_instance_->InitAsDefaultInstance();
  blade::default_instance_->InitAsDefaultInstance();
  ninjia::default_instance_->InitAsDefaultInstance();
  pet::default_instance_->InitAsDefaultInstance();
  achievement::default_instance_->InitAsDefaultInstance();
  task::default_instance_->InitAsDefaultInstance();
  activity::default_instance_->InitAsDefaultInstance();
  signin::default_instance_->InitAsDefaultInstance();
  numbers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fnf_5fuser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fnf_5fuser_2eproto {
  StaticDescriptorInitializer_fnf_5fuser_2eproto() {
    protobuf_AddDesc_fnf_5fuser_2eproto();
  }
} static_descriptor_initializer_fnf_5fuser_2eproto_;
const ::google::protobuf::EnumDescriptor* EmRankSafe_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmRankSafe_descriptor_;
}
bool EmRankSafe_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EmGainSafe_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmGainSafe_descriptor_;
}
bool EmGainSafe_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_ROLL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_ROLL_TYPE_descriptor_;
}
bool EM_ROLL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_ROLL_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_ROLL_STATUS_descriptor_;
}
bool EM_ROLL_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMTaskStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMTaskStatus_descriptor_;
}
bool EMTaskStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMActivityType_descriptor_;
}
bool EMActivityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMActivityGiftStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMActivityGiftStatus_descriptor_;
}
bool EMActivityGiftStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int wallet::kGemFieldNumber;
const int wallet::kGemAddFieldNumber;
const int wallet::kGemDelFieldNumber;
const int wallet::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

wallet::wallet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wallet::InitAsDefaultInstance() {
}

wallet::wallet(const wallet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wallet::SharedCtor() {
  _cached_size_ = 0;
  gem_ = 0;
  gem_add_ = 0;
  gem_del_ = 0;
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wallet::~wallet() {
  SharedDtor();
}

void wallet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wallet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wallet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wallet_descriptor_;
}

const wallet& wallet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

wallet* wallet::default_instance_ = NULL;

wallet* wallet::New() const {
  return new wallet;
}

void wallet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_ = 0;
    gem_add_ = 0;
    gem_del_ = 0;
    update_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wallet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_add;
        break;
      }

      // optional int32 gem_add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_add_)));
          set_has_gem_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gem_del;
        break;
      }

      // optional int32 gem_del = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_del_)));
          set_has_gem_del();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wallet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gem = 1;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gem(), output);
  }

  // optional int32 gem_add = 2;
  if (has_gem_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem_add(), output);
  }

  // optional int32 gem_del = 3;
  if (has_gem_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gem_del(), output);
  }

  // optional int32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wallet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gem = 1;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gem(), target);
  }

  // optional int32 gem_add = 2;
  if (has_gem_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem_add(), target);
  }

  // optional int32 gem_del = 3;
  if (has_gem_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gem_del(), target);
  }

  // optional int32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wallet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gem = 1;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }

    // optional int32 gem_add = 2;
    if (has_gem_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_add());
    }

    // optional int32 gem_del = 3;
    if (has_gem_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_del());
    }

    // optional int32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wallet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wallet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wallet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wallet::MergeFrom(const wallet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_gem_add()) {
      set_gem_add(from.gem_add());
    }
    if (from.has_gem_del()) {
      set_gem_del(from.gem_del());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wallet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wallet::CopyFrom(const wallet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wallet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void wallet::Swap(wallet* other) {
  if (other != this) {
    std::swap(gem_, other->gem_);
    std::swap(gem_add_, other->gem_add_);
    std::swap(gem_del_, other->gem_del_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wallet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wallet_descriptor_;
  metadata.reflection = wallet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int profile::kUidFieldNumber;
const int profile::kMailSwitchFieldNumber;
const int profile::kVipLvFieldNumber;
const int profile::kScoreFieldNumber;
const int profile::kIosNumberFieldNumber;
const int profile::kAndNumberFieldNumber;
const int profile::kRegTimeFieldNumber;
const int profile::kLastActiveTimeFieldNumber;
const int profile::kContActiveDaysFieldNumber;
const int profile::kContActiveGiftmaskFieldNumber;
const int profile::kLastPlayTimeFieldNumber;
const int profile::kNicknameFieldNumber;
const int profile::kAvatarFieldNumber;
const int profile::kGenderFieldNumber;
const int profile::kOpenidFieldNumber;
const int profile::kOauthAuthFieldNumber;
const int profile::kSinglePlayTaskFieldNumber;
const int profile::kMedalFieldNumber;
const int profile::kMedalTimeFieldNumber;
const int profile::kCurrPlayDropidFieldNumber;
const int profile::kFriendListSuccTimeFieldNumber;
const int profile::kGameCountFieldNumber;
const int profile::kFriendCountFieldNumber;
const int profile::kFriendCountGiftmaskFieldNumber;
const int profile::kSendEnergyFieldNumber;
const int profile::kSigninFieldNumber;
const int profile::kTodayTotalStarfruitFieldNumber;
const int profile::kSafeRankFieldNumber;
const int profile::kSafeGainFieldNumber;
const int profile::kNewlifeCountFieldNumber;
const int profile::kLotteryProtectionFieldNumber;
const int profile::kTipsBitFieldNumber;
const int profile::kChallengeCountFieldNumber;
const int profile::kChallengeTimeFieldNumber;
const int profile::kChallengeScoreFieldNumber;
const int profile::kVipscoreFieldNumber;
const int profile::kVipgiftTimeFieldNumber;
#endif  // !_MSC_VER

profile::profile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void profile::InitAsDefaultInstance() {
  score_ = const_cast< ::FNF::score*>(&::FNF::score::default_instance());
  ios_number_ = const_cast< ::FNF::ptnumber*>(&::FNF::ptnumber::default_instance());
  and_number_ = const_cast< ::FNF::ptnumber*>(&::FNF::ptnumber::default_instance());
  oauth_auth_ = const_cast< ::FNF::oauth_auth*>(&::FNF::oauth_auth::default_instance());
  single_play_task_ = const_cast< ::FNF::task*>(&::FNF::task::default_instance());
  medal_ = const_cast< ::FNF::medal*>(&::FNF::medal::default_instance());
  signin_ = const_cast< ::FNF::signin*>(&::FNF::signin::default_instance());
  safe_rank_ = const_cast< ::FNF::SafeRank*>(&::FNF::SafeRank::default_instance());
  safe_gain_ = const_cast< ::FNF::SafeGain*>(&::FNF::SafeGain::default_instance());
  newlife_count_ = const_cast< ::FNF::newlife_count*>(&::FNF::newlife_count::default_instance());
  lottery_protection_ = const_cast< ::FNF::lottery_protection*>(&::FNF::lottery_protection::default_instance());
}

profile::profile(const profile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void profile::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  mail_switch_ = 0;
  vip_lv_ = 0;
  score_ = NULL;
  ios_number_ = NULL;
  and_number_ = NULL;
  reg_time_ = 0;
  last_active_time_ = 0;
  cont_active_days_ = 0;
  cont_active_giftmask_ = 0;
  last_play_time_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oauth_auth_ = NULL;
  single_play_task_ = NULL;
  medal_ = NULL;
  medal_time_ = 0;
  curr_play_dropid_ = 0;
  friend_list_succ_time_ = 0;
  game_count_ = 0;
  friend_count_ = 0;
  friend_count_giftmask_ = 0;
  send_energy_ = 0;
  signin_ = NULL;
  today_total_starfruit_ = 0;
  safe_rank_ = NULL;
  safe_gain_ = NULL;
  newlife_count_ = NULL;
  lottery_protection_ = NULL;
  tips_bit_ = GOOGLE_LONGLONG(0);
  challenge_count_ = 0;
  challenge_time_ = 0;
  challenge_score_ = 0;
  vipscore_ = 0;
  vipgift_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

profile::~profile() {
  SharedDtor();
}

void profile::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
    delete score_;
    delete ios_number_;
    delete and_number_;
    delete oauth_auth_;
    delete single_play_task_;
    delete medal_;
    delete signin_;
    delete safe_rank_;
    delete safe_gain_;
    delete newlife_count_;
    delete lottery_protection_;
  }
}

void profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return profile_descriptor_;
}

const profile& profile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

profile* profile::default_instance_ = NULL;

profile* profile::New() const {
  return new profile;
}

void profile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    mail_switch_ = 0;
    vip_lv_ = 0;
    if (has_score()) {
      if (score_ != NULL) score_->::FNF::score::Clear();
    }
    if (has_ios_number()) {
      if (ios_number_ != NULL) ios_number_->::FNF::ptnumber::Clear();
    }
    if (has_and_number()) {
      if (and_number_ != NULL) and_number_->::FNF::ptnumber::Clear();
    }
    reg_time_ = 0;
    last_active_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cont_active_days_ = 0;
    cont_active_giftmask_ = 0;
    last_play_time_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    gender_ = 0;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_oauth_auth()) {
      if (oauth_auth_ != NULL) oauth_auth_->::FNF::oauth_auth::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_single_play_task()) {
      if (single_play_task_ != NULL) single_play_task_->::FNF::task::Clear();
    }
    if (has_medal()) {
      if (medal_ != NULL) medal_->::FNF::medal::Clear();
    }
    medal_time_ = 0;
    curr_play_dropid_ = 0;
    friend_list_succ_time_ = 0;
    game_count_ = 0;
    friend_count_ = 0;
    friend_count_giftmask_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    send_energy_ = 0;
    if (has_signin()) {
      if (signin_ != NULL) signin_->::FNF::signin::Clear();
    }
    today_total_starfruit_ = 0;
    if (has_safe_rank()) {
      if (safe_rank_ != NULL) safe_rank_->::FNF::SafeRank::Clear();
    }
    if (has_safe_gain()) {
      if (safe_gain_ != NULL) safe_gain_->::FNF::SafeGain::Clear();
    }
    if (has_newlife_count()) {
      if (newlife_count_ != NULL) newlife_count_->::FNF::newlife_count::Clear();
    }
    if (has_lottery_protection()) {
      if (lottery_protection_ != NULL) lottery_protection_->::FNF::lottery_protection::Clear();
    }
    tips_bit_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    challenge_count_ = 0;
    challenge_time_ = 0;
    challenge_score_ = 0;
    vipscore_ = 0;
    vipgift_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_switch;
        break;
      }

      // required int32 mail_switch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_switch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_switch_)));
          set_has_mail_switch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_lv;
        break;
      }

      // optional int32 vip_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_score;
        break;
      }

      // optional .FNF.score score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ios_number;
        break;
      }

      // optional .FNF.ptnumber ios_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ios_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ios_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_and_number;
        break;
      }

      // optional .FNF.ptnumber and_number = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_and_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_and_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reg_time;
        break;
      }

      // required int32 reg_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_active_time;
        break;
      }

      // required int32 last_active_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_active_time_)));
          set_has_last_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cont_active_days;
        break;
      }

      // required int32 cont_active_days = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_active_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_active_days_)));
          set_has_cont_active_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cont_active_giftmask;
        break;
      }

      // optional int32 cont_active_giftmask = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_active_giftmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_active_giftmask_)));
          set_has_cont_active_giftmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_last_play_time;
        break;
      }

      // optional int32 last_play_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_play_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_play_time_)));
          set_has_last_play_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_nickname;
        break;
      }

      // required string nickname = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_avatar;
        break;
      }

      // required string avatar = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gender;
        break;
      }

      // optional int32 gender = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_openid;
        break;
      }

      // required string openid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_oauth_auth;
        break;
      }

      // optional .FNF.oauth_auth oauth_auth = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oauth_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oauth_auth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_single_play_task;
        break;
      }

      // optional .FNF.task single_play_task = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_play_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_play_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_medal;
        break;
      }

      // optional .FNF.medal medal = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_medal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_medal_time;
        break;
      }

      // optional int32 medal_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medal_time_)));
          set_has_medal_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_curr_play_dropid;
        break;
      }

      // optional int32 curr_play_dropid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_play_dropid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_play_dropid_)));
          set_has_curr_play_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_friend_list_succ_time;
        break;
      }

      // optional int32 friend_list_succ_time = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_list_succ_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_list_succ_time_)));
          set_has_friend_list_succ_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_game_count;
        break;
      }

      // optional int32 game_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_friend_count;
        break;
      }

      // optional int32 friend_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_count_)));
          set_has_friend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_friend_count_giftmask;
        break;
      }

      // optional int32 friend_count_giftmask = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_count_giftmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_count_giftmask_)));
          set_has_friend_count_giftmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_send_energy;
        break;
      }

      // optional int32 send_energy = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_energy_)));
          set_has_send_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_signin;
        break;
      }

      // optional .FNF.signin signin = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_today_total_starfruit;
        break;
      }

      // optional int32 today_total_starfruit = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_total_starfruit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_total_starfruit_)));
          set_has_today_total_starfruit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_safe_rank;
        break;
      }

      // optional .FNF.SafeRank safe_rank = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safe_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safe_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_safe_gain;
        break;
      }

      // optional .FNF.SafeGain safe_gain = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safe_gain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safe_gain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_newlife_count;
        break;
      }

      // optional .FNF.newlife_count newlife_count = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newlife_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newlife_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_lottery_protection;
        break;
      }

      // optional .FNF.lottery_protection lottery_protection = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lottery_protection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lottery_protection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_tips_bit;
        break;
      }

      // optional int64 tips_bit = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tips_bit_)));
          set_has_tips_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_challenge_count;
        break;
      }

      // optional int32 challenge_count = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_count_)));
          set_has_challenge_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_challenge_time;
        break;
      }

      // optional int32 challenge_time = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_time_)));
          set_has_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_challenge_score;
        break;
      }

      // optional int32 challenge_score = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_score_)));
          set_has_challenge_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_vipscore;
        break;
      }

      // optional int32 vipscore = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipscore_)));
          set_has_vipscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_vipgift_time;
        break;
      }

      // optional int32 vipgift_time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipgift_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipgift_time_)));
          set_has_vipgift_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 mail_switch = 4;
  if (has_mail_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mail_switch(), output);
  }

  // optional int32 vip_lv = 5;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_lv(), output);
  }

  // optional .FNF.score score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->score(), output);
  }

  // optional .FNF.ptnumber ios_number = 7;
  if (has_ios_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ios_number(), output);
  }

  // optional .FNF.ptnumber and_number = 8;
  if (has_and_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->and_number(), output);
  }

  // required int32 reg_time = 9;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reg_time(), output);
  }

  // required int32 last_active_time = 10;
  if (has_last_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->last_active_time(), output);
  }

  // required int32 cont_active_days = 11;
  if (has_cont_active_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cont_active_days(), output);
  }

  // optional int32 cont_active_giftmask = 12;
  if (has_cont_active_giftmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cont_active_giftmask(), output);
  }

  // optional int32 last_play_time = 13;
  if (has_last_play_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->last_play_time(), output);
  }

  // required string nickname = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->nickname(), output);
  }

  // required string avatar = 15;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->avatar(), output);
  }

  // optional int32 gender = 16;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gender(), output);
  }

  // required string openid = 17;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->openid(), output);
  }

  // optional .FNF.oauth_auth oauth_auth = 19;
  if (has_oauth_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->oauth_auth(), output);
  }

  // optional .FNF.task single_play_task = 20;
  if (has_single_play_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->single_play_task(), output);
  }

  // optional .FNF.medal medal = 21;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->medal(), output);
  }

  // optional int32 medal_time = 22;
  if (has_medal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->medal_time(), output);
  }

  // optional int32 curr_play_dropid = 23;
  if (has_curr_play_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->curr_play_dropid(), output);
  }

  // optional int32 friend_list_succ_time = 24;
  if (has_friend_list_succ_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->friend_list_succ_time(), output);
  }

  // optional int32 game_count = 25;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->game_count(), output);
  }

  // optional int32 friend_count = 26;
  if (has_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->friend_count(), output);
  }

  // optional int32 friend_count_giftmask = 27;
  if (has_friend_count_giftmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->friend_count_giftmask(), output);
  }

  // optional int32 send_energy = 28;
  if (has_send_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->send_energy(), output);
  }

  // optional .FNF.signin signin = 29;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->signin(), output);
  }

  // optional int32 today_total_starfruit = 30;
  if (has_today_total_starfruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->today_total_starfruit(), output);
  }

  // optional .FNF.SafeRank safe_rank = 31;
  if (has_safe_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->safe_rank(), output);
  }

  // optional .FNF.SafeGain safe_gain = 32;
  if (has_safe_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->safe_gain(), output);
  }

  // optional .FNF.newlife_count newlife_count = 33;
  if (has_newlife_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->newlife_count(), output);
  }

  // optional .FNF.lottery_protection lottery_protection = 34;
  if (has_lottery_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->lottery_protection(), output);
  }

  // optional int64 tips_bit = 35;
  if (has_tips_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->tips_bit(), output);
  }

  // optional int32 challenge_count = 36;
  if (has_challenge_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->challenge_count(), output);
  }

  // optional int32 challenge_time = 37;
  if (has_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->challenge_time(), output);
  }

  // optional int32 challenge_score = 38;
  if (has_challenge_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->challenge_score(), output);
  }

  // optional int32 vipscore = 39;
  if (has_vipscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->vipscore(), output);
  }

  // optional int32 vipgift_time = 40;
  if (has_vipgift_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->vipgift_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* profile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 mail_switch = 4;
  if (has_mail_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mail_switch(), target);
  }

  // optional int32 vip_lv = 5;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_lv(), target);
  }

  // optional .FNF.score score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->score(), target);
  }

  // optional .FNF.ptnumber ios_number = 7;
  if (has_ios_number()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ios_number(), target);
  }

  // optional .FNF.ptnumber and_number = 8;
  if (has_and_number()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->and_number(), target);
  }

  // required int32 reg_time = 9;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reg_time(), target);
  }

  // required int32 last_active_time = 10;
  if (has_last_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->last_active_time(), target);
  }

  // required int32 cont_active_days = 11;
  if (has_cont_active_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cont_active_days(), target);
  }

  // optional int32 cont_active_giftmask = 12;
  if (has_cont_active_giftmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cont_active_giftmask(), target);
  }

  // optional int32 last_play_time = 13;
  if (has_last_play_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->last_play_time(), target);
  }

  // required string nickname = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->nickname(), target);
  }

  // required string avatar = 15;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->avatar(), target);
  }

  // optional int32 gender = 16;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gender(), target);
  }

  // required string openid = 17;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->openid(), target);
  }

  // optional .FNF.oauth_auth oauth_auth = 19;
  if (has_oauth_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->oauth_auth(), target);
  }

  // optional .FNF.task single_play_task = 20;
  if (has_single_play_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->single_play_task(), target);
  }

  // optional .FNF.medal medal = 21;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->medal(), target);
  }

  // optional int32 medal_time = 22;
  if (has_medal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->medal_time(), target);
  }

  // optional int32 curr_play_dropid = 23;
  if (has_curr_play_dropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->curr_play_dropid(), target);
  }

  // optional int32 friend_list_succ_time = 24;
  if (has_friend_list_succ_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->friend_list_succ_time(), target);
  }

  // optional int32 game_count = 25;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->game_count(), target);
  }

  // optional int32 friend_count = 26;
  if (has_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->friend_count(), target);
  }

  // optional int32 friend_count_giftmask = 27;
  if (has_friend_count_giftmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->friend_count_giftmask(), target);
  }

  // optional int32 send_energy = 28;
  if (has_send_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->send_energy(), target);
  }

  // optional .FNF.signin signin = 29;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->signin(), target);
  }

  // optional int32 today_total_starfruit = 30;
  if (has_today_total_starfruit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->today_total_starfruit(), target);
  }

  // optional .FNF.SafeRank safe_rank = 31;
  if (has_safe_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->safe_rank(), target);
  }

  // optional .FNF.SafeGain safe_gain = 32;
  if (has_safe_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->safe_gain(), target);
  }

  // optional .FNF.newlife_count newlife_count = 33;
  if (has_newlife_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->newlife_count(), target);
  }

  // optional .FNF.lottery_protection lottery_protection = 34;
  if (has_lottery_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->lottery_protection(), target);
  }

  // optional int64 tips_bit = 35;
  if (has_tips_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->tips_bit(), target);
  }

  // optional int32 challenge_count = 36;
  if (has_challenge_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->challenge_count(), target);
  }

  // optional int32 challenge_time = 37;
  if (has_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->challenge_time(), target);
  }

  // optional int32 challenge_score = 38;
  if (has_challenge_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->challenge_score(), target);
  }

  // optional int32 vipscore = 39;
  if (has_vipscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->vipscore(), target);
  }

  // optional int32 vipgift_time = 40;
  if (has_vipgift_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->vipgift_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int profile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required int32 mail_switch = 4;
    if (has_mail_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_switch());
    }

    // optional int32 vip_lv = 5;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_lv());
    }

    // optional .FNF.score score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score());
    }

    // optional .FNF.ptnumber ios_number = 7;
    if (has_ios_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ios_number());
    }

    // optional .FNF.ptnumber and_number = 8;
    if (has_and_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->and_number());
    }

    // required int32 reg_time = 9;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reg_time());
    }

    // required int32 last_active_time = 10;
    if (has_last_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_active_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 cont_active_days = 11;
    if (has_cont_active_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_active_days());
    }

    // optional int32 cont_active_giftmask = 12;
    if (has_cont_active_giftmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_active_giftmask());
    }

    // optional int32 last_play_time = 13;
    if (has_last_play_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_play_time());
    }

    // required string nickname = 14;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string avatar = 15;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional int32 gender = 16;
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // required string openid = 17;
    if (has_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional .FNF.oauth_auth oauth_auth = 19;
    if (has_oauth_auth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oauth_auth());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .FNF.task single_play_task = 20;
    if (has_single_play_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_play_task());
    }

    // optional .FNF.medal medal = 21;
    if (has_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medal());
    }

    // optional int32 medal_time = 22;
    if (has_medal_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medal_time());
    }

    // optional int32 curr_play_dropid = 23;
    if (has_curr_play_dropid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_play_dropid());
    }

    // optional int32 friend_list_succ_time = 24;
    if (has_friend_list_succ_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_list_succ_time());
    }

    // optional int32 game_count = 25;
    if (has_game_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_count());
    }

    // optional int32 friend_count = 26;
    if (has_friend_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_count());
    }

    // optional int32 friend_count_giftmask = 27;
    if (has_friend_count_giftmask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_count_giftmask());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 send_energy = 28;
    if (has_send_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_energy());
    }

    // optional .FNF.signin signin = 29;
    if (has_signin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signin());
    }

    // optional int32 today_total_starfruit = 30;
    if (has_today_total_starfruit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_total_starfruit());
    }

    // optional .FNF.SafeRank safe_rank = 31;
    if (has_safe_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->safe_rank());
    }

    // optional .FNF.SafeGain safe_gain = 32;
    if (has_safe_gain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->safe_gain());
    }

    // optional .FNF.newlife_count newlife_count = 33;
    if (has_newlife_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newlife_count());
    }

    // optional .FNF.lottery_protection lottery_protection = 34;
    if (has_lottery_protection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lottery_protection());
    }

    // optional int64 tips_bit = 35;
    if (has_tips_bit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tips_bit());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 challenge_count = 36;
    if (has_challenge_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_count());
    }

    // optional int32 challenge_time = 37;
    if (has_challenge_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_time());
    }

    // optional int32 challenge_score = 38;
    if (has_challenge_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_score());
    }

    // optional int32 vipscore = 39;
    if (has_vipscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipscore());
    }

    // optional int32 vipgift_time = 40;
    if (has_vipgift_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipgift_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void profile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const profile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const profile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void profile::MergeFrom(const profile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_mail_switch()) {
      set_mail_switch(from.mail_switch());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_score()) {
      mutable_score()->::FNF::score::MergeFrom(from.score());
    }
    if (from.has_ios_number()) {
      mutable_ios_number()->::FNF::ptnumber::MergeFrom(from.ios_number());
    }
    if (from.has_and_number()) {
      mutable_and_number()->::FNF::ptnumber::MergeFrom(from.and_number());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_last_active_time()) {
      set_last_active_time(from.last_active_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cont_active_days()) {
      set_cont_active_days(from.cont_active_days());
    }
    if (from.has_cont_active_giftmask()) {
      set_cont_active_giftmask(from.cont_active_giftmask());
    }
    if (from.has_last_play_time()) {
      set_last_play_time(from.last_play_time());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_oauth_auth()) {
      mutable_oauth_auth()->::FNF::oauth_auth::MergeFrom(from.oauth_auth());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_single_play_task()) {
      mutable_single_play_task()->::FNF::task::MergeFrom(from.single_play_task());
    }
    if (from.has_medal()) {
      mutable_medal()->::FNF::medal::MergeFrom(from.medal());
    }
    if (from.has_medal_time()) {
      set_medal_time(from.medal_time());
    }
    if (from.has_curr_play_dropid()) {
      set_curr_play_dropid(from.curr_play_dropid());
    }
    if (from.has_friend_list_succ_time()) {
      set_friend_list_succ_time(from.friend_list_succ_time());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_friend_count()) {
      set_friend_count(from.friend_count());
    }
    if (from.has_friend_count_giftmask()) {
      set_friend_count_giftmask(from.friend_count_giftmask());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_send_energy()) {
      set_send_energy(from.send_energy());
    }
    if (from.has_signin()) {
      mutable_signin()->::FNF::signin::MergeFrom(from.signin());
    }
    if (from.has_today_total_starfruit()) {
      set_today_total_starfruit(from.today_total_starfruit());
    }
    if (from.has_safe_rank()) {
      mutable_safe_rank()->::FNF::SafeRank::MergeFrom(from.safe_rank());
    }
    if (from.has_safe_gain()) {
      mutable_safe_gain()->::FNF::SafeGain::MergeFrom(from.safe_gain());
    }
    if (from.has_newlife_count()) {
      mutable_newlife_count()->::FNF::newlife_count::MergeFrom(from.newlife_count());
    }
    if (from.has_lottery_protection()) {
      mutable_lottery_protection()->::FNF::lottery_protection::MergeFrom(from.lottery_protection());
    }
    if (from.has_tips_bit()) {
      set_tips_bit(from.tips_bit());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_challenge_count()) {
      set_challenge_count(from.challenge_count());
    }
    if (from.has_challenge_time()) {
      set_challenge_time(from.challenge_time());
    }
    if (from.has_challenge_score()) {
      set_challenge_score(from.challenge_score());
    }
    if (from.has_vipscore()) {
      set_vipscore(from.vipscore());
    }
    if (from.has_vipgift_time()) {
      set_vipgift_time(from.vipgift_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void profile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void profile::CopyFrom(const profile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool profile::IsInitialized() const {
  if ((_has_bits_[0] & 0x000059c3) != 0x000059c3) return false;

  if (has_score()) {
    if (!this->score().IsInitialized()) return false;
  }
  if (has_ios_number()) {
    if (!this->ios_number().IsInitialized()) return false;
  }
  if (has_and_number()) {
    if (!this->and_number().IsInitialized()) return false;
  }
  if (has_single_play_task()) {
    if (!this->single_play_task().IsInitialized()) return false;
  }
  if (has_medal()) {
    if (!this->medal().IsInitialized()) return false;
  }
  if (has_signin()) {
    if (!this->signin().IsInitialized()) return false;
  }
  if (has_safe_rank()) {
    if (!this->safe_rank().IsInitialized()) return false;
  }
  if (has_safe_gain()) {
    if (!this->safe_gain().IsInitialized()) return false;
  }
  if (has_newlife_count()) {
    if (!this->newlife_count().IsInitialized()) return false;
  }
  return true;
}

void profile::Swap(profile* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(mail_switch_, other->mail_switch_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(score_, other->score_);
    std::swap(ios_number_, other->ios_number_);
    std::swap(and_number_, other->and_number_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(last_active_time_, other->last_active_time_);
    std::swap(cont_active_days_, other->cont_active_days_);
    std::swap(cont_active_giftmask_, other->cont_active_giftmask_);
    std::swap(last_play_time_, other->last_play_time_);
    std::swap(nickname_, other->nickname_);
    std::swap(avatar_, other->avatar_);
    std::swap(gender_, other->gender_);
    std::swap(openid_, other->openid_);
    std::swap(oauth_auth_, other->oauth_auth_);
    std::swap(single_play_task_, other->single_play_task_);
    std::swap(medal_, other->medal_);
    std::swap(medal_time_, other->medal_time_);
    std::swap(curr_play_dropid_, other->curr_play_dropid_);
    std::swap(friend_list_succ_time_, other->friend_list_succ_time_);
    std::swap(game_count_, other->game_count_);
    std::swap(friend_count_, other->friend_count_);
    std::swap(friend_count_giftmask_, other->friend_count_giftmask_);
    std::swap(send_energy_, other->send_energy_);
    std::swap(signin_, other->signin_);
    std::swap(today_total_starfruit_, other->today_total_starfruit_);
    std::swap(safe_rank_, other->safe_rank_);
    std::swap(safe_gain_, other->safe_gain_);
    std::swap(newlife_count_, other->newlife_count_);
    std::swap(lottery_protection_, other->lottery_protection_);
    std::swap(tips_bit_, other->tips_bit_);
    std::swap(challenge_count_, other->challenge_count_);
    std::swap(challenge_time_, other->challenge_time_);
    std::swap(challenge_score_, other->challenge_score_);
    std::swap(vipscore_, other->vipscore_);
    std::swap(vipgift_time_, other->vipgift_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata profile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = profile_descriptor_;
  metadata.reflection = profile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int back_pack::kBladesFieldNumber;
const int back_pack::kNinjiasFieldNumber;
const int back_pack::kPetsFieldNumber;
const int back_pack::kPropsFieldNumber;
const int back_pack::kRollFieldNumber;
const int back_pack::kSkinsFieldNumber;
const int back_pack::kMaterialsFieldNumber;
#endif  // !_MSC_VER

back_pack::back_pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void back_pack::InitAsDefaultInstance() {
  roll_ = const_cast< ::FNF::roll_info*>(&::FNF::roll_info::default_instance());
}

back_pack::back_pack(const back_pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void back_pack::SharedCtor() {
  _cached_size_ = 0;
  roll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

back_pack::~back_pack() {
  SharedDtor();
}

void back_pack::SharedDtor() {
  if (this != default_instance_) {
    delete roll_;
  }
}

void back_pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* back_pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return back_pack_descriptor_;
}

const back_pack& back_pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

back_pack* back_pack::default_instance_ = NULL;

back_pack* back_pack::New() const {
  return new back_pack;
}

void back_pack::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_roll()) {
      if (roll_ != NULL) roll_->::FNF::roll_info::Clear();
    }
  }
  blades_.Clear();
  ninjias_.Clear();
  pets_.Clear();
  props_.Clear();
  skins_.Clear();
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool back_pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FNF.blade blades = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blades()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blades;
        if (input->ExpectTag(18)) goto parse_ninjias;
        break;
      }

      // repeated .FNF.ninjia ninjias = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ninjias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ninjias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ninjias;
        if (input->ExpectTag(26)) goto parse_pets;
        break;
      }

      // repeated .FNF.pet pets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pets;
        if (input->ExpectTag(34)) goto parse_props;
        break;
      }

      // repeated .FNF.prop props = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_props;
        if (input->ExpectTag(42)) goto parse_roll;
        break;
      }

      // optional .FNF.roll_info roll = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skins;
        break;
      }

      // repeated .FNF.skin skins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skins()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skins;
        if (input->ExpectTag(58)) goto parse_materials;
        break;
      }

      // repeated .FNF.material materials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void back_pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FNF.blade blades = 1;
  for (int i = 0; i < this->blades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blades(i), output);
  }

  // repeated .FNF.ninjia ninjias = 2;
  for (int i = 0; i < this->ninjias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ninjias(i), output);
  }

  // repeated .FNF.pet pets = 3;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pets(i), output);
  }

  // repeated .FNF.prop props = 4;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->props(i), output);
  }

  // optional .FNF.roll_info roll = 5;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roll(), output);
  }

  // repeated .FNF.skin skins = 6;
  for (int i = 0; i < this->skins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skins(i), output);
  }

  // repeated .FNF.material materials = 7;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* back_pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FNF.blade blades = 1;
  for (int i = 0; i < this->blades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blades(i), target);
  }

  // repeated .FNF.ninjia ninjias = 2;
  for (int i = 0; i < this->ninjias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ninjias(i), target);
  }

  // repeated .FNF.pet pets = 3;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pets(i), target);
  }

  // repeated .FNF.prop props = 4;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->props(i), target);
  }

  // optional .FNF.roll_info roll = 5;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roll(), target);
  }

  // repeated .FNF.skin skins = 6;
  for (int i = 0; i < this->skins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skins(i), target);
  }

  // repeated .FNF.material materials = 7;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int back_pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .FNF.roll_info roll = 5;
    if (has_roll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roll());
    }

  }
  // repeated .FNF.blade blades = 1;
  total_size += 1 * this->blades_size();
  for (int i = 0; i < this->blades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blades(i));
  }

  // repeated .FNF.ninjia ninjias = 2;
  total_size += 1 * this->ninjias_size();
  for (int i = 0; i < this->ninjias_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ninjias(i));
  }

  // repeated .FNF.pet pets = 3;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  // repeated .FNF.prop props = 4;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  // repeated .FNF.skin skins = 6;
  total_size += 1 * this->skins_size();
  for (int i = 0; i < this->skins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skins(i));
  }

  // repeated .FNF.material materials = 7;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void back_pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const back_pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const back_pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void back_pack::MergeFrom(const back_pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  blades_.MergeFrom(from.blades_);
  ninjias_.MergeFrom(from.ninjias_);
  pets_.MergeFrom(from.pets_);
  props_.MergeFrom(from.props_);
  skins_.MergeFrom(from.skins_);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_roll()) {
      mutable_roll()->::FNF::roll_info::MergeFrom(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void back_pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void back_pack::CopyFrom(const back_pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool back_pack::IsInitialized() const {

  for (int i = 0; i < blades_size(); i++) {
    if (!this->blades(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ninjias_size(); i++) {
    if (!this->ninjias(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pets_size(); i++) {
    if (!this->pets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  if (has_roll()) {
    if (!this->roll().IsInitialized()) return false;
  }
  for (int i = 0; i < skins_size(); i++) {
    if (!this->skins(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materials_size(); i++) {
    if (!this->materials(i).IsInitialized()) return false;
  }
  return true;
}

void back_pack::Swap(back_pack* other) {
  if (other != this) {
    blades_.Swap(&other->blades_);
    ninjias_.Swap(&other->ninjias_);
    pets_.Swap(&other->pets_);
    props_.Swap(&other->props_);
    std::swap(roll_, other->roll_);
    skins_.Swap(&other->skins_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata back_pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = back_pack_descriptor_;
  metadata.reflection = back_pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int grow_up::kAchievementsFieldNumber;
const int grow_up::kDailyTasksFieldNumber;
const int grow_up::kCumulativeTasksFieldNumber;
const int grow_up::kCurrentActivityFieldNumber;
const int grow_up::kCumulativeTaskLimitFieldNumber;
const int grow_up::kActiveItemsFieldNumber;
const int grow_up::kActiveReceiveStepFieldNumber;
const int grow_up::kActiveTimeFieldNumber;
#endif  // !_MSC_VER

grow_up::grow_up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void grow_up::InitAsDefaultInstance() {
  cumulative_task_limit_ = const_cast< ::FNF::task_daily_limit*>(&::FNF::task_daily_limit::default_instance());
}

grow_up::grow_up(const grow_up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void grow_up::SharedCtor() {
  _cached_size_ = 0;
  cumulative_task_limit_ = NULL;
  active_receive_step_ = 0;
  active_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grow_up::~grow_up() {
  SharedDtor();
}

void grow_up::SharedDtor() {
  if (this != default_instance_) {
    delete cumulative_task_limit_;
  }
}

void grow_up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grow_up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grow_up_descriptor_;
}

const grow_up& grow_up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

grow_up* grow_up::default_instance_ = NULL;

grow_up* grow_up::New() const {
  return new grow_up;
}

void grow_up::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_cumulative_task_limit()) {
      if (cumulative_task_limit_ != NULL) cumulative_task_limit_->::FNF::task_daily_limit::Clear();
    }
    active_receive_step_ = 0;
    active_time_ = 0;
  }
  achievements_.Clear();
  daily_tasks_.Clear();
  cumulative_tasks_.Clear();
  current_activity_.Clear();
  active_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool grow_up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FNF.achievement achievements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievements;
        if (input->ExpectTag(18)) goto parse_daily_tasks;
        break;
      }

      // repeated .FNF.task daily_tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_tasks;
        if (input->ExpectTag(26)) goto parse_cumulative_tasks;
        break;
      }

      // repeated .FNF.task cumulative_tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cumulative_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cumulative_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cumulative_tasks;
        if (input->ExpectTag(34)) goto parse_current_activity;
        break;
      }

      // repeated .FNF.activity current_activity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_current_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_current_activity;
        if (input->ExpectTag(42)) goto parse_cumulative_task_limit;
        break;
      }

      // optional .FNF.task_daily_limit cumulative_task_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cumulative_task_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cumulative_task_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_active_items;
        break;
      }

      // repeated .FNF.active_item active_items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_active_items;
        if (input->ExpectTag(56)) goto parse_active_receive_step;
        break;
      }

      // optional int32 active_receive_step = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_receive_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_receive_step_)));
          set_has_active_receive_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_active_time;
        break;
      }

      // optional int32 active_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void grow_up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FNF.achievement achievements = 1;
  for (int i = 0; i < this->achievements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievements(i), output);
  }

  // repeated .FNF.task daily_tasks = 2;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_tasks(i), output);
  }

  // repeated .FNF.task cumulative_tasks = 3;
  for (int i = 0; i < this->cumulative_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cumulative_tasks(i), output);
  }

  // repeated .FNF.activity current_activity = 4;
  for (int i = 0; i < this->current_activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->current_activity(i), output);
  }

  // optional .FNF.task_daily_limit cumulative_task_limit = 5;
  if (has_cumulative_task_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cumulative_task_limit(), output);
  }

  // repeated .FNF.active_item active_items = 6;
  for (int i = 0; i < this->active_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->active_items(i), output);
  }

  // optional int32 active_receive_step = 7;
  if (has_active_receive_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->active_receive_step(), output);
  }

  // optional int32 active_time = 8;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->active_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* grow_up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FNF.achievement achievements = 1;
  for (int i = 0; i < this->achievements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievements(i), target);
  }

  // repeated .FNF.task daily_tasks = 2;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily_tasks(i), target);
  }

  // repeated .FNF.task cumulative_tasks = 3;
  for (int i = 0; i < this->cumulative_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cumulative_tasks(i), target);
  }

  // repeated .FNF.activity current_activity = 4;
  for (int i = 0; i < this->current_activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->current_activity(i), target);
  }

  // optional .FNF.task_daily_limit cumulative_task_limit = 5;
  if (has_cumulative_task_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cumulative_task_limit(), target);
  }

  // repeated .FNF.active_item active_items = 6;
  for (int i = 0; i < this->active_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->active_items(i), target);
  }

  // optional int32 active_receive_step = 7;
  if (has_active_receive_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->active_receive_step(), target);
  }

  // optional int32 active_time = 8;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->active_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int grow_up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .FNF.task_daily_limit cumulative_task_limit = 5;
    if (has_cumulative_task_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cumulative_task_limit());
    }

    // optional int32 active_receive_step = 7;
    if (has_active_receive_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_receive_step());
    }

    // optional int32 active_time = 8;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_time());
    }

  }
  // repeated .FNF.achievement achievements = 1;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  // repeated .FNF.task daily_tasks = 2;
  total_size += 1 * this->daily_tasks_size();
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_tasks(i));
  }

  // repeated .FNF.task cumulative_tasks = 3;
  total_size += 1 * this->cumulative_tasks_size();
  for (int i = 0; i < this->cumulative_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cumulative_tasks(i));
  }

  // repeated .FNF.activity current_activity = 4;
  total_size += 1 * this->current_activity_size();
  for (int i = 0; i < this->current_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->current_activity(i));
  }

  // repeated .FNF.active_item active_items = 6;
  total_size += 1 * this->active_items_size();
  for (int i = 0; i < this->active_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grow_up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const grow_up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const grow_up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void grow_up::MergeFrom(const grow_up& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievements_.MergeFrom(from.achievements_);
  daily_tasks_.MergeFrom(from.daily_tasks_);
  cumulative_tasks_.MergeFrom(from.cumulative_tasks_);
  current_activity_.MergeFrom(from.current_activity_);
  active_items_.MergeFrom(from.active_items_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_cumulative_task_limit()) {
      mutable_cumulative_task_limit()->::FNF::task_daily_limit::MergeFrom(from.cumulative_task_limit());
    }
    if (from.has_active_receive_step()) {
      set_active_receive_step(from.active_receive_step());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void grow_up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grow_up::CopyFrom(const grow_up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grow_up::IsInitialized() const {

  for (int i = 0; i < achievements_size(); i++) {
    if (!this->achievements(i).IsInitialized()) return false;
  }
  for (int i = 0; i < daily_tasks_size(); i++) {
    if (!this->daily_tasks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cumulative_tasks_size(); i++) {
    if (!this->cumulative_tasks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < current_activity_size(); i++) {
    if (!this->current_activity(i).IsInitialized()) return false;
  }
  if (has_cumulative_task_limit()) {
    if (!this->cumulative_task_limit().IsInitialized()) return false;
  }
  for (int i = 0; i < active_items_size(); i++) {
    if (!this->active_items(i).IsInitialized()) return false;
  }
  return true;
}

void grow_up::Swap(grow_up* other) {
  if (other != this) {
    achievements_.Swap(&other->achievements_);
    daily_tasks_.Swap(&other->daily_tasks_);
    cumulative_tasks_.Swap(&other->cumulative_tasks_);
    current_activity_.Swap(&other->current_activity_);
    std::swap(cumulative_task_limit_, other->cumulative_task_limit_);
    active_items_.Swap(&other->active_items_);
    std::swap(active_receive_step_, other->active_receive_step_);
    std::swap(active_time_, other->active_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata grow_up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grow_up_descriptor_;
  metadata.reflection = grow_up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int material::kIdFieldNumber;
const int material::kCountFieldNumber;
#endif  // !_MSC_VER

material::material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void material::InitAsDefaultInstance() {
}

material::material(const material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void material::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

material::~material() {
  SharedDtor();
}

void material::SharedDtor() {
  if (this != default_instance_) {
  }
}

void material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return material_descriptor_;
}

const material& material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

material* material::default_instance_ = NULL;

material* material::New() const {
  return new material;
}

void material::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void material::MergeFrom(const material& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void material::CopyFrom(const material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool material::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void material::Swap(material* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = material_descriptor_;
  metadata.reflection = material_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int active_item::kIdFieldNumber;
const int active_item::kCountFieldNumber;
#endif  // !_MSC_VER

active_item::active_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void active_item::InitAsDefaultInstance() {
}

active_item::active_item(const active_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void active_item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

active_item::~active_item() {
  SharedDtor();
}

void active_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void active_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* active_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return active_item_descriptor_;
}

const active_item& active_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

active_item* active_item::default_instance_ = NULL;

active_item* active_item::New() const {
  return new active_item;
}

void active_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool active_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void active_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* active_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int active_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void active_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const active_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const active_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void active_item::MergeFrom(const active_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void active_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_item::CopyFrom(const active_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void active_item::Swap(active_item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata active_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = active_item_descriptor_;
  metadata.reflection = active_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_daily_limit::kCumulativeTaskCountFieldNumber;
const int task_daily_limit::kCumulativeTaskUpdatetimeFieldNumber;
#endif  // !_MSC_VER

task_daily_limit::task_daily_limit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_daily_limit::InitAsDefaultInstance() {
}

task_daily_limit::task_daily_limit(const task_daily_limit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_daily_limit::SharedCtor() {
  _cached_size_ = 0;
  cumulative_task_count_ = 0;
  cumulative_task_updatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_daily_limit::~task_daily_limit() {
  SharedDtor();
}

void task_daily_limit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_daily_limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_daily_limit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_daily_limit_descriptor_;
}

const task_daily_limit& task_daily_limit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

task_daily_limit* task_daily_limit::default_instance_ = NULL;

task_daily_limit* task_daily_limit::New() const {
  return new task_daily_limit;
}

void task_daily_limit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cumulative_task_count_ = 0;
    cumulative_task_updatetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_daily_limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cumulative_task_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_task_count_)));
          set_has_cumulative_task_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cumulative_task_updatetime;
        break;
      }

      // required int32 cumulative_task_updatetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cumulative_task_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_task_updatetime_)));
          set_has_cumulative_task_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_daily_limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cumulative_task_count = 1;
  if (has_cumulative_task_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cumulative_task_count(), output);
  }

  // required int32 cumulative_task_updatetime = 2;
  if (has_cumulative_task_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cumulative_task_updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_daily_limit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cumulative_task_count = 1;
  if (has_cumulative_task_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cumulative_task_count(), target);
  }

  // required int32 cumulative_task_updatetime = 2;
  if (has_cumulative_task_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cumulative_task_updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_daily_limit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cumulative_task_count = 1;
    if (has_cumulative_task_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_task_count());
    }

    // required int32 cumulative_task_updatetime = 2;
    if (has_cumulative_task_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_task_updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_daily_limit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_daily_limit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_daily_limit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_daily_limit::MergeFrom(const task_daily_limit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cumulative_task_count()) {
      set_cumulative_task_count(from.cumulative_task_count());
    }
    if (from.has_cumulative_task_updatetime()) {
      set_cumulative_task_updatetime(from.cumulative_task_updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_daily_limit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_daily_limit::CopyFrom(const task_daily_limit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_daily_limit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void task_daily_limit::Swap(task_daily_limit* other) {
  if (other != this) {
    std::swap(cumulative_task_count_, other->cumulative_task_count_);
    std::swap(cumulative_task_updatetime_, other->cumulative_task_updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_daily_limit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_daily_limit_descriptor_;
  metadata.reflection = task_daily_limit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int newlife_count::kNewlifeEndCountFieldNumber;
const int newlife_count::kNewlifeBombCountFieldNumber;
#endif  // !_MSC_VER

newlife_count::newlife_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void newlife_count::InitAsDefaultInstance() {
}

newlife_count::newlife_count(const newlife_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void newlife_count::SharedCtor() {
  _cached_size_ = 0;
  newlife_end_count_ = 0;
  newlife_bomb_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

newlife_count::~newlife_count() {
  SharedDtor();
}

void newlife_count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void newlife_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* newlife_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return newlife_count_descriptor_;
}

const newlife_count& newlife_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

newlife_count* newlife_count::default_instance_ = NULL;

newlife_count* newlife_count::New() const {
  return new newlife_count;
}

void newlife_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newlife_end_count_ = 0;
    newlife_bomb_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool newlife_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 newlife_end_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newlife_end_count_)));
          set_has_newlife_end_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newlife_bomb_count;
        break;
      }

      // required int32 newlife_bomb_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newlife_bomb_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newlife_bomb_count_)));
          set_has_newlife_bomb_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void newlife_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 newlife_end_count = 1;
  if (has_newlife_end_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newlife_end_count(), output);
  }

  // required int32 newlife_bomb_count = 2;
  if (has_newlife_bomb_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newlife_bomb_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* newlife_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 newlife_end_count = 1;
  if (has_newlife_end_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newlife_end_count(), target);
  }

  // required int32 newlife_bomb_count = 2;
  if (has_newlife_bomb_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newlife_bomb_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int newlife_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 newlife_end_count = 1;
    if (has_newlife_end_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newlife_end_count());
    }

    // required int32 newlife_bomb_count = 2;
    if (has_newlife_bomb_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newlife_bomb_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void newlife_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const newlife_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const newlife_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void newlife_count::MergeFrom(const newlife_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newlife_end_count()) {
      set_newlife_end_count(from.newlife_end_count());
    }
    if (from.has_newlife_bomb_count()) {
      set_newlife_bomb_count(from.newlife_bomb_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void newlife_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void newlife_count::CopyFrom(const newlife_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool newlife_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void newlife_count::Swap(newlife_count* other) {
  if (other != this) {
    std::swap(newlife_end_count_, other->newlife_end_count_);
    std::swap(newlife_bomb_count_, other->newlife_bomb_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata newlife_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = newlife_count_descriptor_;
  metadata.reflection = newlife_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lottery_protection::kGemNoRareCountFieldNumber;
const int lottery_protection::kStarfruitNoRareCountFieldNumber;
#endif  // !_MSC_VER

lottery_protection::lottery_protection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_protection::InitAsDefaultInstance() {
}

lottery_protection::lottery_protection(const lottery_protection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_protection::SharedCtor() {
  _cached_size_ = 0;
  gem_no_rare_count_ = 0;
  starfruit_no_rare_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_protection::~lottery_protection() {
  SharedDtor();
}

void lottery_protection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lottery_protection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_protection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_protection_descriptor_;
}

const lottery_protection& lottery_protection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

lottery_protection* lottery_protection::default_instance_ = NULL;

lottery_protection* lottery_protection::New() const {
  return new lottery_protection;
}

void lottery_protection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_no_rare_count_ = 0;
    starfruit_no_rare_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_protection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gem_no_rare_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_no_rare_count_)));
          set_has_gem_no_rare_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starfruit_no_rare_count;
        break;
      }

      // optional int32 starfruit_no_rare_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starfruit_no_rare_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starfruit_no_rare_count_)));
          set_has_starfruit_no_rare_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_protection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gem_no_rare_count = 1;
  if (has_gem_no_rare_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gem_no_rare_count(), output);
  }

  // optional int32 starfruit_no_rare_count = 2;
  if (has_starfruit_no_rare_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starfruit_no_rare_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_protection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gem_no_rare_count = 1;
  if (has_gem_no_rare_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gem_no_rare_count(), target);
  }

  // optional int32 starfruit_no_rare_count = 2;
  if (has_starfruit_no_rare_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starfruit_no_rare_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_protection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gem_no_rare_count = 1;
    if (has_gem_no_rare_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_no_rare_count());
    }

    // optional int32 starfruit_no_rare_count = 2;
    if (has_starfruit_no_rare_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starfruit_no_rare_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_protection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_protection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_protection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_protection::MergeFrom(const lottery_protection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem_no_rare_count()) {
      set_gem_no_rare_count(from.gem_no_rare_count());
    }
    if (from.has_starfruit_no_rare_count()) {
      set_starfruit_no_rare_count(from.starfruit_no_rare_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_protection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_protection::CopyFrom(const lottery_protection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_protection::IsInitialized() const {

  return true;
}

void lottery_protection::Swap(lottery_protection* other) {
  if (other != this) {
    std::swap(gem_no_rare_count_, other->gem_no_rare_count_);
    std::swap(starfruit_no_rare_count_, other->starfruit_no_rare_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_protection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_protection_descriptor_;
  metadata.reflection = lottery_protection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SafeRank::kRankSafeFieldNumber;
const int SafeRank::kRankSafeEndFieldNumber;
#endif  // !_MSC_VER

SafeRank::SafeRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SafeRank::InitAsDefaultInstance() {
}

SafeRank::SafeRank(const SafeRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SafeRank::SharedCtor() {
  _cached_size_ = 0;
  rank_safe_ = 0;
  rank_safe_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeRank::~SafeRank() {
  SharedDtor();
}

void SafeRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafeRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeRank_descriptor_;
}

const SafeRank& SafeRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

SafeRank* SafeRank::default_instance_ = NULL;

SafeRank* SafeRank::New() const {
  return new SafeRank;
}

void SafeRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_safe_ = 0;
    rank_safe_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SafeRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FNF.EmRankSafe rank_safe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EmRankSafe_IsValid(value)) {
            set_rank_safe(static_cast< ::FNF::EmRankSafe >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_safe_end;
        break;
      }

      // required int32 rank_safe_end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_safe_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_safe_end_)));
          set_has_rank_safe_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SafeRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FNF.EmRankSafe rank_safe = 1;
  if (has_rank_safe()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_safe(), output);
  }

  // required int32 rank_safe_end = 2;
  if (has_rank_safe_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_safe_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SafeRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FNF.EmRankSafe rank_safe = 1;
  if (has_rank_safe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_safe(), target);
  }

  // required int32 rank_safe_end = 2;
  if (has_rank_safe_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_safe_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SafeRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FNF.EmRankSafe rank_safe = 1;
    if (has_rank_safe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_safe());
    }

    // required int32 rank_safe_end = 2;
    if (has_rank_safe_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_safe_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SafeRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SafeRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SafeRank::MergeFrom(const SafeRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_safe()) {
      set_rank_safe(from.rank_safe());
    }
    if (from.has_rank_safe_end()) {
      set_rank_safe_end(from.rank_safe_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SafeRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeRank::CopyFrom(const SafeRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SafeRank::Swap(SafeRank* other) {
  if (other != this) {
    std::swap(rank_safe_, other->rank_safe_);
    std::swap(rank_safe_end_, other->rank_safe_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SafeRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafeRank_descriptor_;
  metadata.reflection = SafeRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SafeGain::kGainSafeFieldNumber;
const int SafeGain::kGainSafeEndFieldNumber;
#endif  // !_MSC_VER

SafeGain::SafeGain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SafeGain::InitAsDefaultInstance() {
}

SafeGain::SafeGain(const SafeGain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SafeGain::SharedCtor() {
  _cached_size_ = 0;
  gain_safe_ = 0;
  gain_safe_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeGain::~SafeGain() {
  SharedDtor();
}

void SafeGain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafeGain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeGain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeGain_descriptor_;
}

const SafeGain& SafeGain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

SafeGain* SafeGain::default_instance_ = NULL;

SafeGain* SafeGain::New() const {
  return new SafeGain;
}

void SafeGain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gain_safe_ = 0;
    gain_safe_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SafeGain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FNF.EmGainSafe gain_safe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EmGainSafe_IsValid(value)) {
            set_gain_safe(static_cast< ::FNF::EmGainSafe >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gain_safe_end;
        break;
      }

      // required int32 gain_safe_end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_safe_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_safe_end_)));
          set_has_gain_safe_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SafeGain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FNF.EmGainSafe gain_safe = 1;
  if (has_gain_safe()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gain_safe(), output);
  }

  // required int32 gain_safe_end = 2;
  if (has_gain_safe_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gain_safe_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SafeGain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FNF.EmGainSafe gain_safe = 1;
  if (has_gain_safe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gain_safe(), target);
  }

  // required int32 gain_safe_end = 2;
  if (has_gain_safe_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gain_safe_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SafeGain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FNF.EmGainSafe gain_safe = 1;
    if (has_gain_safe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gain_safe());
    }

    // required int32 gain_safe_end = 2;
    if (has_gain_safe_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain_safe_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeGain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SafeGain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SafeGain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SafeGain::MergeFrom(const SafeGain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gain_safe()) {
      set_gain_safe(from.gain_safe());
    }
    if (from.has_gain_safe_end()) {
      set_gain_safe_end(from.gain_safe_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SafeGain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeGain::CopyFrom(const SafeGain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeGain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SafeGain::Swap(SafeGain* other) {
  if (other != this) {
    std::swap(gain_safe_, other->gain_safe_);
    std::swap(gain_safe_end_, other->gain_safe_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SafeGain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafeGain_descriptor_;
  metadata.reflection = SafeGain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int medal::kGoldFieldNumber;
const int medal::kSilverFieldNumber;
const int medal::kCopperFieldNumber;
#endif  // !_MSC_VER

medal::medal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void medal::InitAsDefaultInstance() {
}

medal::medal(const medal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void medal::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  silver_ = 0;
  copper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

medal::~medal() {
  SharedDtor();
}

void medal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void medal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* medal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return medal_descriptor_;
}

const medal& medal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

medal* medal::default_instance_ = NULL;

medal* medal::New() const {
  return new medal;
}

void medal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    silver_ = 0;
    copper_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool medal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver;
        break;
      }

      // required int32 silver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copper;
        break;
      }

      // required int32 copper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void medal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // required int32 silver = 2;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->silver(), output);
  }

  // required int32 copper = 3;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->copper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* medal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // required int32 silver = 2;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->silver(), target);
  }

  // required int32 copper = 3;
  if (has_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->copper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int medal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 silver = 2;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }

    // required int32 copper = 3;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void medal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const medal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const medal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void medal::MergeFrom(const medal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void medal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void medal::CopyFrom(const medal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool medal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void medal::Swap(medal* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(silver_, other->silver_);
    std::swap(copper_, other->copper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata medal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = medal_descriptor_;
  metadata.reflection = medal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int device_info::kDeviceIdFieldNumber;
const int device_info::kSystemOsFieldNumber;
const int device_info::kDeviceNameFieldNumber;
#endif  // !_MSC_VER

device_info::device_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void device_info::InitAsDefaultInstance() {
}

device_info::device_info(const device_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void device_info::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  system_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

device_info::~device_info() {
  SharedDtor();
}

void device_info::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (system_os_ != &::google::protobuf::internal::kEmptyString) {
    delete system_os_;
  }
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (this != default_instance_) {
  }
}

void device_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return device_info_descriptor_;
}

const device_info& device_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

device_info* device_info::default_instance_ = NULL;

device_info* device_info::New() const {
  return new device_info;
}

void device_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_system_os()) {
      if (system_os_ != &::google::protobuf::internal::kEmptyString) {
        system_os_->clear();
      }
    }
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool device_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_system_os;
        break;
      }

      // optional string system_os = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->system_os().data(), this->system_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_name;
        break;
      }

      // optional string device_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void device_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional string system_os = 2;
  if (has_system_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->system_os().data(), this->system_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->system_os(), output);
  }

  // optional string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* device_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string system_os = 2;
  if (has_system_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->system_os().data(), this->system_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->system_os(), target);
  }

  // optional string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int device_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string system_os = 2;
    if (has_system_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_os());
    }

    // optional string device_name = 3;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const device_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const device_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void device_info::MergeFrom(const device_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_system_os()) {
      set_system_os(from.system_os());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void device_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_info::CopyFrom(const device_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_info::IsInitialized() const {

  return true;
}

void device_info::Swap(device_info* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(system_os_, other->system_os_);
    std::swap(device_name_, other->device_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata device_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = device_info_descriptor_;
  metadata.reflection = device_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int oauth_auth::kAccessTokenFieldNumber;
const int oauth_auth::kRefreshTokenFieldNumber;
#endif  // !_MSC_VER

oauth_auth::oauth_auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void oauth_auth::InitAsDefaultInstance() {
}

oauth_auth::oauth_auth(const oauth_auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void oauth_auth::SharedCtor() {
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refresh_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

oauth_auth::~oauth_auth() {
  SharedDtor();
}

void oauth_auth::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (refresh_token_ != &::google::protobuf::internal::kEmptyString) {
    delete refresh_token_;
  }
  if (this != default_instance_) {
  }
}

void oauth_auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oauth_auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return oauth_auth_descriptor_;
}

const oauth_auth& oauth_auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

oauth_auth* oauth_auth::default_instance_ = NULL;

oauth_auth* oauth_auth::New() const {
  return new oauth_auth;
}

void oauth_auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_refresh_token()) {
      if (refresh_token_ != &::google::protobuf::internal::kEmptyString) {
        refresh_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool oauth_auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_refresh_token;
        break;
      }

      // optional string refresh_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refresh_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refresh_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refresh_token().data(), this->refresh_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void oauth_auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->access_token(), output);
  }

  // optional string refresh_token = 2;
  if (has_refresh_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refresh_token().data(), this->refresh_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->refresh_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* oauth_auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string refresh_token = 2;
  if (has_refresh_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refresh_token().data(), this->refresh_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->refresh_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int oauth_auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string refresh_token = 2;
    if (has_refresh_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refresh_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oauth_auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const oauth_auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const oauth_auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void oauth_auth::MergeFrom(const oauth_auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_refresh_token()) {
      set_refresh_token(from.refresh_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void oauth_auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oauth_auth::CopyFrom(const oauth_auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oauth_auth::IsInitialized() const {

  return true;
}

void oauth_auth::Swap(oauth_auth* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(refresh_token_, other->refresh_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata oauth_auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = oauth_auth_descriptor_;
  metadata.reflection = oauth_auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ptnumber::kStarfruitFieldNumber;
const int ptnumber::kGemFieldNumber;
const int ptnumber::kEnergyFieldNumber;
const int ptnumber::kLastEnergyTimeFieldNumber;
const int ptnumber::kGemAddFieldNumber;
const int ptnumber::kGemDelFieldNumber;
#endif  // !_MSC_VER

ptnumber::ptnumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ptnumber::InitAsDefaultInstance() {
}

ptnumber::ptnumber(const ptnumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ptnumber::SharedCtor() {
  _cached_size_ = 0;
  starfruit_ = 0;
  gem_ = 0;
  energy_ = 0;
  last_energy_time_ = 0;
  gem_add_ = 0;
  gem_del_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ptnumber::~ptnumber() {
  SharedDtor();
}

void ptnumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ptnumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ptnumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ptnumber_descriptor_;
}

const ptnumber& ptnumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

ptnumber* ptnumber::default_instance_ = NULL;

ptnumber* ptnumber::New() const {
  return new ptnumber;
}

void ptnumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starfruit_ = 0;
    gem_ = 0;
    energy_ = 0;
    last_energy_time_ = 0;
    gem_add_ = 0;
    gem_del_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ptnumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 starfruit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starfruit_)));
          set_has_starfruit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem;
        break;
      }

      // required int32 gem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_energy;
        break;
      }

      // required int32 energy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_energy_time;
        break;
      }

      // required int32 last_energy_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_energy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_energy_time_)));
          set_has_last_energy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gem_add;
        break;
      }

      // optional int32 gem_add = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_add_)));
          set_has_gem_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gem_del;
        break;
      }

      // optional int32 gem_del = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_del_)));
          set_has_gem_del();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ptnumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 starfruit = 1;
  if (has_starfruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starfruit(), output);
  }

  // required int32 gem = 2;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem(), output);
  }

  // required int32 energy = 3;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->energy(), output);
  }

  // required int32 last_energy_time = 4;
  if (has_last_energy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_energy_time(), output);
  }

  // optional int32 gem_add = 5;
  if (has_gem_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gem_add(), output);
  }

  // optional int32 gem_del = 6;
  if (has_gem_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gem_del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ptnumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 starfruit = 1;
  if (has_starfruit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starfruit(), target);
  }

  // required int32 gem = 2;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem(), target);
  }

  // required int32 energy = 3;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->energy(), target);
  }

  // required int32 last_energy_time = 4;
  if (has_last_energy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_energy_time(), target);
  }

  // optional int32 gem_add = 5;
  if (has_gem_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gem_add(), target);
  }

  // optional int32 gem_del = 6;
  if (has_gem_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gem_del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ptnumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 starfruit = 1;
    if (has_starfruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starfruit());
    }

    // required int32 gem = 2;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }

    // required int32 energy = 3;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

    // required int32 last_energy_time = 4;
    if (has_last_energy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_energy_time());
    }

    // optional int32 gem_add = 5;
    if (has_gem_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_add());
    }

    // optional int32 gem_del = 6;
    if (has_gem_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ptnumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ptnumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ptnumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ptnumber::MergeFrom(const ptnumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starfruit()) {
      set_starfruit(from.starfruit());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_last_energy_time()) {
      set_last_energy_time(from.last_energy_time());
    }
    if (from.has_gem_add()) {
      set_gem_add(from.gem_add());
    }
    if (from.has_gem_del()) {
      set_gem_del(from.gem_del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ptnumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ptnumber::CopyFrom(const ptnumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ptnumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ptnumber::Swap(ptnumber* other) {
  if (other != this) {
    std::swap(starfruit_, other->starfruit_);
    std::swap(gem_, other->gem_);
    std::swap(energy_, other->energy_);
    std::swap(last_energy_time_, other->last_energy_time_);
    std::swap(gem_add_, other->gem_add_);
    std::swap(gem_del_, other->gem_del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ptnumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ptnumber_descriptor_;
  metadata.reflection = ptnumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int prop::kIdFieldNumber;
const int prop::kCountFieldNumber;
const int prop::kUseLimitFieldNumber;
const int prop::kTimeLimitFieldNumber;
#endif  // !_MSC_VER

prop::prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void prop::InitAsDefaultInstance() {
}

prop::prop(const prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void prop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  use_limit_ = 0;
  time_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

prop::~prop() {
  SharedDtor();
}

void prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return prop_descriptor_;
}

const prop& prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

prop* prop::default_instance_ = NULL;

prop* prop::New() const {
  return new prop;
}

void prop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
    use_limit_ = 0;
    time_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_limit;
        break;
      }

      // optional int32 use_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_limit_)));
          set_has_use_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_limit;
        break;
      }

      // optional int32 time_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_limit_)));
          set_has_time_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 use_limit = 3;
  if (has_use_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use_limit(), output);
  }

  // optional int32 time_limit = 4;
  if (has_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 use_limit = 3;
  if (has_use_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use_limit(), target);
  }

  // optional int32 time_limit = 4;
  if (has_time_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 use_limit = 3;
    if (has_use_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_limit());
    }

    // optional int32 time_limit = 4;
    if (has_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void prop::MergeFrom(const prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_use_limit()) {
      set_use_limit(from.use_limit());
    }
    if (from.has_time_limit()) {
      set_time_limit(from.time_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void prop::CopyFrom(const prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void prop::Swap(prop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(use_limit_, other->use_limit_);
    std::swap(time_limit_, other->time_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = prop_descriptor_;
  metadata.reflection = prop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roll_info::kIdFieldNumber;
const int roll_info::kTypeFieldNumber;
const int roll_info::kRealNoFieldNumber;
const int roll_info::kStatusFieldNumber;
#endif  // !_MSC_VER

roll_info::roll_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roll_info::InitAsDefaultInstance() {
}

roll_info::roll_info(const roll_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roll_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  real_no_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roll_info::~roll_info() {
  SharedDtor();
}

void roll_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roll_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roll_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roll_info_descriptor_;
}

const roll_info& roll_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

roll_info* roll_info::default_instance_ = NULL;

roll_info* roll_info::New() const {
  return new roll_info;
}

void roll_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 1;
    real_no_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roll_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .FNF.EM_ROLL_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EM_ROLL_TYPE_IsValid(value)) {
            set_type(static_cast< ::FNF::EM_ROLL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_real_no;
        break;
      }

      // required int32 real_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_no_)));
          set_has_real_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .FNF.EM_ROLL_STATUS status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EM_ROLL_STATUS_IsValid(value)) {
            set_status(static_cast< ::FNF::EM_ROLL_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roll_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .FNF.EM_ROLL_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 real_no = 3;
  if (has_real_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->real_no(), output);
  }

  // required .FNF.EM_ROLL_STATUS status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roll_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .FNF.EM_ROLL_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 real_no = 3;
  if (has_real_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->real_no(), target);
  }

  // required .FNF.EM_ROLL_STATUS status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roll_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .FNF.EM_ROLL_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 real_no = 3;
    if (has_real_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_no());
    }

    // required .FNF.EM_ROLL_STATUS status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roll_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roll_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roll_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roll_info::MergeFrom(const roll_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_real_no()) {
      set_real_no(from.real_no());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roll_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roll_info::CopyFrom(const roll_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roll_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void roll_info::Swap(roll_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(real_no_, other->real_no_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roll_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roll_info_descriptor_;
  metadata.reflection = roll_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skin::kIdFieldNumber;
const int skin::kGotTimeFieldNumber;
const int skin::kExpireTimeFieldNumber;
const int skin::kIsActiveFieldNumber;
#endif  // !_MSC_VER

skin::skin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skin::InitAsDefaultInstance() {
}

skin::skin(const skin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skin::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  got_time_ = 0;
  expire_time_ = 0;
  is_active_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skin::~skin() {
  SharedDtor();
}

void skin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skin_descriptor_;
}

const skin& skin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

skin* skin::default_instance_ = NULL;

skin* skin::New() const {
  return new skin;
}

void skin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    got_time_ = 0;
    expire_time_ = 0;
    is_active_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_got_time;
        break;
      }

      // required int32 got_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &got_time_)));
          set_has_got_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // required int32 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }

      // optional int32 is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 got_time = 2;
  if (has_got_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->got_time(), output);
  }

  // required int32 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expire_time(), output);
  }

  // optional int32 is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 got_time = 2;
  if (has_got_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->got_time(), target);
  }

  // required int32 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expire_time(), target);
  }

  // optional int32 is_active = 4;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 got_time = 2;
    if (has_got_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->got_time());
    }

    // required int32 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

    // optional int32 is_active = 4;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skin::MergeFrom(const skin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_got_time()) {
      set_got_time(from.got_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skin::CopyFrom(const skin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void skin::Swap(skin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(got_time_, other->got_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skin_descriptor_;
  metadata.reflection = skin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int score::kWeekTopScoreFieldNumber;
const int score::kWeekTopScoreTimeFieldNumber;
const int score::kHistoryTopScoreFieldNumber;
const int score::kHistoryTopScoreTimeFieldNumber;
const int score::kLastweekTopScoreFieldNumber;
const int score::kLastweekTopScoreTimeFieldNumber;
#endif  // !_MSC_VER

score::score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void score::InitAsDefaultInstance() {
}

score::score(const score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void score::SharedCtor() {
  _cached_size_ = 0;
  week_top_score_ = 0;
  week_top_score_time_ = 0;
  history_top_score_ = 0;
  history_top_score_time_ = 0;
  lastweek_top_score_ = 0;
  lastweek_top_score_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

score::~score() {
  SharedDtor();
}

void score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return score_descriptor_;
}

const score& score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

score* score::default_instance_ = NULL;

score* score::New() const {
  return new score;
}

void score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_top_score_ = 0;
    week_top_score_time_ = 0;
    history_top_score_ = 0;
    history_top_score_time_ = 0;
    lastweek_top_score_ = 0;
    lastweek_top_score_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 week_top_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_top_score_)));
          set_has_week_top_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week_top_score_time;
        break;
      }

      // required int32 week_top_score_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_top_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_top_score_time_)));
          set_has_week_top_score_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_history_top_score;
        break;
      }

      // required int32 history_top_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_top_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_top_score_)));
          set_has_history_top_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_history_top_score_time;
        break;
      }

      // required int32 history_top_score_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_top_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_top_score_time_)));
          set_has_history_top_score_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastweek_top_score;
        break;
      }

      // optional int32 lastweek_top_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastweek_top_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastweek_top_score_)));
          set_has_lastweek_top_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastweek_top_score_time;
        break;
      }

      // optional int32 lastweek_top_score_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastweek_top_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastweek_top_score_time_)));
          set_has_lastweek_top_score_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 week_top_score = 1;
  if (has_week_top_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week_top_score(), output);
  }

  // required int32 week_top_score_time = 2;
  if (has_week_top_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->week_top_score_time(), output);
  }

  // required int32 history_top_score = 3;
  if (has_history_top_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->history_top_score(), output);
  }

  // required int32 history_top_score_time = 4;
  if (has_history_top_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->history_top_score_time(), output);
  }

  // optional int32 lastweek_top_score = 5;
  if (has_lastweek_top_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastweek_top_score(), output);
  }

  // optional int32 lastweek_top_score_time = 6;
  if (has_lastweek_top_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastweek_top_score_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 week_top_score = 1;
  if (has_week_top_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week_top_score(), target);
  }

  // required int32 week_top_score_time = 2;
  if (has_week_top_score_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->week_top_score_time(), target);
  }

  // required int32 history_top_score = 3;
  if (has_history_top_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->history_top_score(), target);
  }

  // required int32 history_top_score_time = 4;
  if (has_history_top_score_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->history_top_score_time(), target);
  }

  // optional int32 lastweek_top_score = 5;
  if (has_lastweek_top_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastweek_top_score(), target);
  }

  // optional int32 lastweek_top_score_time = 6;
  if (has_lastweek_top_score_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastweek_top_score_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 week_top_score = 1;
    if (has_week_top_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_top_score());
    }

    // required int32 week_top_score_time = 2;
    if (has_week_top_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_top_score_time());
    }

    // required int32 history_top_score = 3;
    if (has_history_top_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_top_score());
    }

    // required int32 history_top_score_time = 4;
    if (has_history_top_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_top_score_time());
    }

    // optional int32 lastweek_top_score = 5;
    if (has_lastweek_top_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastweek_top_score());
    }

    // optional int32 lastweek_top_score_time = 6;
    if (has_lastweek_top_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastweek_top_score_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void score::MergeFrom(const score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week_top_score()) {
      set_week_top_score(from.week_top_score());
    }
    if (from.has_week_top_score_time()) {
      set_week_top_score_time(from.week_top_score_time());
    }
    if (from.has_history_top_score()) {
      set_history_top_score(from.history_top_score());
    }
    if (from.has_history_top_score_time()) {
      set_history_top_score_time(from.history_top_score_time());
    }
    if (from.has_lastweek_top_score()) {
      set_lastweek_top_score(from.lastweek_top_score());
    }
    if (from.has_lastweek_top_score_time()) {
      set_lastweek_top_score_time(from.lastweek_top_score_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void score::CopyFrom(const score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool score::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void score::Swap(score* other) {
  if (other != this) {
    std::swap(week_top_score_, other->week_top_score_);
    std::swap(week_top_score_time_, other->week_top_score_time_);
    std::swap(history_top_score_, other->history_top_score_);
    std::swap(history_top_score_time_, other->history_top_score_time_);
    std::swap(lastweek_top_score_, other->lastweek_top_score_);
    std::swap(lastweek_top_score_time_, other->lastweek_top_score_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = score_descriptor_;
  metadata.reflection = score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blade::kIdFieldNumber;
const int blade::kLvFieldNumber;
const int blade::kGotTimeFieldNumber;
const int blade::kIsActiveFieldNumber;
#endif  // !_MSC_VER

blade::blade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void blade::InitAsDefaultInstance() {
}

blade::blade(const blade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void blade::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  got_time_ = 0;
  is_active_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blade::~blade() {
  SharedDtor();
}

void blade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void blade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blade_descriptor_;
}

const blade& blade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

blade* blade::default_instance_ = NULL;

blade* blade::New() const {
  return new blade;
}

void blade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    got_time_ = 0;
    is_active_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // required int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_got_time;
        break;
      }

      // required int32 got_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &got_time_)));
          set_has_got_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }

      // optional int32 is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void blade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // required int32 got_time = 3;
  if (has_got_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->got_time(), output);
  }

  // optional int32 is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* blade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // required int32 got_time = 3;
  if (has_got_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->got_time(), target);
  }

  // optional int32 is_active = 4;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int blade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 got_time = 3;
    if (has_got_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->got_time());
    }

    // optional int32 is_active = 4;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blade::MergeFrom(const blade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_got_time()) {
      set_got_time(from.got_time());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blade::CopyFrom(const blade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void blade::Swap(blade* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(got_time_, other->got_time_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blade_descriptor_;
  metadata.reflection = blade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ninjia::kIdFieldNumber;
const int ninjia::kLvFieldNumber;
const int ninjia::kGotTimeFieldNumber;
const int ninjia::kIsActiveFieldNumber;
#endif  // !_MSC_VER

ninjia::ninjia()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ninjia::InitAsDefaultInstance() {
}

ninjia::ninjia(const ninjia& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ninjia::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  got_time_ = 0;
  is_active_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ninjia::~ninjia() {
  SharedDtor();
}

void ninjia::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ninjia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ninjia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ninjia_descriptor_;
}

const ninjia& ninjia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

ninjia* ninjia::default_instance_ = NULL;

ninjia* ninjia::New() const {
  return new ninjia;
}

void ninjia::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    got_time_ = 0;
    is_active_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ninjia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // required int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_got_time;
        break;
      }

      // required int32 got_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &got_time_)));
          set_has_got_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }

      // optional int32 is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ninjia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // required int32 got_time = 3;
  if (has_got_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->got_time(), output);
  }

  // optional int32 is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ninjia::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // required int32 got_time = 3;
  if (has_got_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->got_time(), target);
  }

  // optional int32 is_active = 4;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ninjia::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 got_time = 3;
    if (has_got_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->got_time());
    }

    // optional int32 is_active = 4;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ninjia::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ninjia* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ninjia*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ninjia::MergeFrom(const ninjia& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_got_time()) {
      set_got_time(from.got_time());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ninjia::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ninjia::CopyFrom(const ninjia& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ninjia::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ninjia::Swap(ninjia* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(got_time_, other->got_time_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ninjia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ninjia_descriptor_;
  metadata.reflection = ninjia_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet::kIdFieldNumber;
const int pet::kExpFieldNumber;
const int pet::kLvFieldNumber;
const int pet::kCountFieldNumber;
const int pet::kFeedTimeFieldNumber;
const int pet::kGiftGotTimeFieldNumber;
const int pet::kIsActiveFieldNumber;
#endif  // !_MSC_VER

pet::pet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet::InitAsDefaultInstance() {
}

pet::pet(const pet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  lv_ = 0;
  count_ = 0;
  feed_time_ = 0;
  gift_got_time_ = 0;
  is_active_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet::~pet() {
  SharedDtor();
}

void pet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_descriptor_;
}

const pet& pet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

pet* pet::default_instance_ = NULL;

pet* pet::New() const {
  return new pet;
}

void pet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
    lv_ = 0;
    count_ = 0;
    feed_time_ = 0;
    gift_got_time_ = 0;
    is_active_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_feed_time;
        break;
      }

      // optional int32 feed_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_time_)));
          set_has_feed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gift_got_time;
        break;
      }

      // optional int32 gift_got_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_got_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_got_time_)));
          set_has_gift_got_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_active;
        break;
      }

      // optional int32 is_active = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 feed_time = 5;
  if (has_feed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->feed_time(), output);
  }

  // optional int32 gift_got_time = 6;
  if (has_gift_got_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gift_got_time(), output);
  }

  // optional int32 is_active = 7;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 feed_time = 5;
  if (has_feed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->feed_time(), target);
  }

  // optional int32 gift_got_time = 6;
  if (has_gift_got_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gift_got_time(), target);
  }

  // optional int32 is_active = 7;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 feed_time = 5;
    if (has_feed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed_time());
    }

    // optional int32 gift_got_time = 6;
    if (has_gift_got_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_got_time());
    }

    // optional int32 is_active = 7;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet::MergeFrom(const pet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_feed_time()) {
      set_feed_time(from.feed_time());
    }
    if (from.has_gift_got_time()) {
      set_gift_got_time(from.gift_got_time());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet::CopyFrom(const pet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pet::Swap(pet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(lv_, other->lv_);
    std::swap(count_, other->count_);
    std::swap(feed_time_, other->feed_time_);
    std::swap(gift_got_time_, other->gift_got_time_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_descriptor_;
  metadata.reflection = pet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int achievement::kIdFieldNumber;
const int achievement::kTypeFieldNumber;
const int achievement::kLvFieldNumber;
const int achievement::kCountFieldNumber;
#endif  // !_MSC_VER

achievement::achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void achievement::InitAsDefaultInstance() {
}

achievement::achievement(const achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void achievement::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  lv_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

achievement::~achievement() {
  SharedDtor();
}

void achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return achievement_descriptor_;
}

const achievement& achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

achievement* achievement::default_instance_ = NULL;

achievement* achievement::New() const {
  return new achievement;
}

void achievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    lv_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int achievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void achievement::MergeFrom(const achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void achievement::CopyFrom(const achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool achievement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void achievement::Swap(achievement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(lv_, other->lv_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = achievement_descriptor_;
  metadata.reflection = achievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task::kIdFieldNumber;
const int task::kTypeFieldNumber;
const int task::kLvFieldNumber;
const int task::kStatusFieldNumber;
const int task::kCountFieldNumber;
const int task::kStartTimeFieldNumber;
const int task::kOrderIdFieldNumber;
#endif  // !_MSC_VER

task::task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task::InitAsDefaultInstance() {
}

task::task(const task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  lv_ = 0;
  status_ = 0;
  count_ = 0;
  start_time_ = 0;
  order_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task::~task() {
  SharedDtor();
}

void task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_descriptor_;
}

const task& task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

task* task::default_instance_ = NULL;

task* task::New() const {
  return new task;
}

void task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    lv_ = 0;
    status_ = 0;
    count_ = 0;
    start_time_ = 0;
    order_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .FNF.EMTaskStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMTaskStatus_IsValid(value)) {
            set_status(static_cast< ::FNF::EMTaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // required int32 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_order_id;
        break;
      }

      // required int32 order_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // required .FNF.EMTaskStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // required int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // required int32 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start_time(), output);
  }

  // required int32 order_id = 7;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // required .FNF.EMTaskStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // required int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // required int32 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start_time(), target);
  }

  // required int32 order_id = 7;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required .FNF.EMTaskStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // required int32 order_id = 7;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task::MergeFrom(const task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task::CopyFrom(const task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void task::Swap(task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(lv_, other->lv_);
    std::swap(status_, other->status_);
    std::swap(count_, other->count_);
    std::swap(start_time_, other->start_time_);
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_descriptor_;
  metadata.reflection = task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity::kIdFieldNumber;
const int activity::kTypeFieldNumber;
const int activity::kConditionFieldNumber;
const int activity::kUpdateTimeFieldNumber;
const int activity::kGiftStatusFieldNumber;
#endif  // !_MSC_VER

activity::activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity::InitAsDefaultInstance() {
}

activity::activity(const activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  condition_ = 0;
  update_time_ = 0;
  gift_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity::~activity() {
  SharedDtor();
}

void activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_descriptor_;
}

const activity& activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

activity* activity::default_instance_ = NULL;

activity* activity::New() const {
  return new activity;
}

void activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    condition_ = 0;
    update_time_ = 0;
    gift_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .FNF.EMActivityType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMActivityType_IsValid(value)) {
            set_type(static_cast< ::FNF::EMActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // optional int32 condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gift_status;
        break;
      }

      // optional .FNF.EMActivityGiftStatus gift_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMActivityGiftStatus_IsValid(value)) {
            set_gift_status(static_cast< ::FNF::EMActivityGiftStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .FNF.EMActivityType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition(), output);
  }

  // optional int32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->update_time(), output);
  }

  // optional .FNF.EMActivityGiftStatus gift_status = 5;
  if (has_gift_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gift_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .FNF.EMActivityType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition(), target);
  }

  // optional int32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->update_time(), target);
  }

  // optional .FNF.EMActivityGiftStatus gift_status = 5;
  if (has_gift_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gift_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .FNF.EMActivityType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional int32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

    // optional .FNF.EMActivityGiftStatus gift_status = 5;
    if (has_gift_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gift_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity::MergeFrom(const activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_gift_status()) {
      set_gift_status(from.gift_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity::CopyFrom(const activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity::Swap(activity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(condition_, other->condition_);
    std::swap(update_time_, other->update_time_);
    std::swap(gift_status_, other->gift_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_descriptor_;
  metadata.reflection = activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int signin::kIdFieldNumber;
const int signin::kCountFieldNumber;
const int signin::kResignCountFieldNumber;
const int signin::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

signin::signin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void signin::InitAsDefaultInstance() {
}

signin::signin(const signin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void signin::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  resign_count_ = 0;
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

signin::~signin() {
  SharedDtor();
}

void signin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void signin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signin_descriptor_;
}

const signin& signin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

signin* signin::default_instance_ = NULL;

signin* signin::New() const {
  return new signin;
}

void signin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
    resign_count_ = 0;
    update_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool signin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resign_count;
        break;
      }

      // required int32 resign_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resign_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resign_count_)));
          set_has_resign_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required int32 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void signin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 resign_count = 3;
  if (has_resign_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resign_count(), output);
  }

  // required int32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* signin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 resign_count = 3;
  if (has_resign_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resign_count(), target);
  }

  // required int32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int signin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 resign_count = 3;
    if (has_resign_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resign_count());
    }

    // required int32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const signin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const signin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void signin::MergeFrom(const signin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_resign_count()) {
      set_resign_count(from.resign_count());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void signin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signin::CopyFrom(const signin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void signin::Swap(signin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(resign_count_, other->resign_count_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata signin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = signin_descriptor_;
  metadata.reflection = signin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int numbers::kMailCountFieldNumber;
#endif  // !_MSC_VER

numbers::numbers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void numbers::InitAsDefaultInstance() {
}

numbers::numbers(const numbers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void numbers::SharedCtor() {
  _cached_size_ = 0;
  mail_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

numbers::~numbers() {
  SharedDtor();
}

void numbers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void numbers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* numbers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return numbers_descriptor_;
}

const numbers& numbers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fuser_2eproto();
  return *default_instance_;
}

numbers* numbers::default_instance_ = NULL;

numbers* numbers::New() const {
  return new numbers;
}

void numbers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool numbers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mail_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_count_)));
          set_has_mail_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void numbers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mail_count = 1;
  if (has_mail_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mail_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* numbers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mail_count = 1;
  if (has_mail_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mail_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int numbers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mail_count = 1;
    if (has_mail_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void numbers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const numbers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const numbers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void numbers::MergeFrom(const numbers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_count()) {
      set_mail_count(from.mail_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void numbers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void numbers::CopyFrom(const numbers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool numbers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void numbers::Swap(numbers* other) {
  if (other != this) {
    std::swap(mail_count_, other->mail_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata numbers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = numbers_descriptor_;
  metadata.reflection = numbers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FNF

// @@protoc_insertion_point(global_scope)
