// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fnf_mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fnf_mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FNF {

namespace {

const ::google::protobuf::Descriptor* idip_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  idip_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* mailbox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mailbox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMMailStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMMailPlat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMIdipGiftType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fnf_5fmail_2eproto() {
  protobuf_AddDesc_fnf_5fmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fnf_mail.proto");
  GOOGLE_CHECK(file != NULL);
  idip_gift_descriptor_ = file->message_type(0);
  static const int idip_gift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_gift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_gift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_gift, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_gift, level_),
  };
  idip_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      idip_gift_descriptor_,
      idip_gift::default_instance_,
      idip_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(idip_gift));
  mail_item_descriptor_ = file->message_type(1);
  static const int mail_item_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, sender_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, sender_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, pic_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, web_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, prize_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, prize_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, pop_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, plat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, sender_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, idip_gift_),
  };
  mail_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_item_descriptor_,
      mail_item::default_instance_,
      mail_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_item));
  mailbox_descriptor_ = file->message_type(2);
  static const int mailbox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailbox, user_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailbox, system_mail_),
  };
  mailbox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mailbox_descriptor_,
      mailbox::default_instance_,
      mailbox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailbox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailbox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mailbox));
  EMMailType_descriptor_ = file->enum_type(0);
  EMMailStatus_descriptor_ = file->enum_type(1);
  EMMailPlat_descriptor_ = file->enum_type(2);
  EMIdipGiftType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fnf_5fmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    idip_gift_descriptor_, &idip_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_item_descriptor_, &mail_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mailbox_descriptor_, &mailbox::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fnf_5fmail_2eproto() {
  delete idip_gift::default_instance_;
  delete idip_gift_reflection_;
  delete mail_item::default_instance_;
  delete mail_item_reflection_;
  delete mailbox::default_instance_;
  delete mailbox_reflection_;
}

void protobuf_AddDesc_fnf_5fmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016fnf_mail.proto\022\003FNF\"X\n\tidip_gift\022\n\n\002id"
    "\030\001 \002(\005\022!\n\004type\030\002 \002(\0162\023.FNF.EMIdipGiftTyp"
    "e\022\r\n\005count\030\003 \002(\005\022\r\n\005level\030\004 \001(\005\"\362\002\n\tmail"
    "_item\022\n\n\002id\030\001 \002(\005\022\035\n\004type\030\002 \002(\0162\017.FNF.EM"
    "MailType\022\r\n\005title\030\003 \002(\t\022\017\n\007content\030\004 \001(\t"
    "\022\023\n\013expire_time\030\005 \002(\005\022\021\n\tsend_time\030\006 \002(\005"
    "\022\022\n\nsender_uid\030\007 \002(\003\022\027\n\017sender_nickname\030"
    "\010 \001(\t\022\017\n\007pic_url\030\t \001(\t\022\017\n\007web_url\030\n \001(\t\022"
    "\020\n\010prize_id\030\013 \001(\005\022\'\n\014prize_status\030\014 \001(\0162"
    "\021.FNF.EMMailStatus\022\017\n\007pop_out\030\r \001(\005\022 \n\007p"
    "lat_id\030\016 \001(\0162\017.FNF.EMMailPlat\022\022\n\nsender_"
    "pic\030\017 \001(\t\022!\n\tidip_gift\030\020 \003(\0132\016.FNF.idip_"
    "gift\"Q\n\007mailbox\022!\n\tuser_mail\030\001 \003(\0132\016.FNF"
    ".mail_item\022#\n\013system_mail\030\002 \003(\0132\016.FNF.ma"
    "il_item*\224\001\n\nEMMailType\022\016\n\nMAIL_HEART\020\001\022\024"
    "\n\020MAIL_SYSTEM_TEXT\020\002\022\023\n\017MAIL_SYSTEM_PIC\020"
    "\003\022\030\n\024MAIL_SYSTEM_URL_TEXT\020\004\022\027\n\023MAIL_SYST"
    "EM_URL_PIC\020\005\022\030\n\024MAIL_SELF_DEFINATION\020\006*-"
    "\n\014EMMailStatus\022\016\n\nPRIZE_NONE\020\000\022\r\n\tPRIZE_"
    "GOT\020\001*F\n\nEMMailPlat\022\021\n\rMAIL_IOS_Plat\020\001\022\021"
    "\n\rMAIL_AND_Plat\020\002\022\022\n\016MAIL_BOTH_Plat\020\003*\340\001"
    "\n\016EMIdipGiftType\022\027\n\023IDIP_GIFT_TYPE_BASE\020"
    "\000\022\034\n\030IDIP_GIFT_TYPE_STARFRUIT\020\001\022\026\n\022IDIP_"
    "GIFT_TYPE_GEM\020\002\022\031\n\025IDIP_GIFT_TYPE_ENERGY"
    "\020\003\022\027\n\023IDIP_GIFT_TYPE_PROP\020\004\022\026\n\022IDIP_GIFT"
    "_TYPE_PET\020\005\022\031\n\025IDIP_GIFT_TYPE_NINJIA\020\006\022\030"
    "\n\024IDIP_GIFT_TYPE_BLADE\020\007", 1064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fnf_mail.proto", &protobuf_RegisterTypes);
  idip_gift::default_instance_ = new idip_gift();
  mail_item::default_instance_ = new mail_item();
  mailbox::default_instance_ = new mailbox();
  idip_gift::default_instance_->InitAsDefaultInstance();
  mail_item::default_instance_->InitAsDefaultInstance();
  mailbox::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fnf_5fmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fnf_5fmail_2eproto {
  StaticDescriptorInitializer_fnf_5fmail_2eproto() {
    protobuf_AddDesc_fnf_5fmail_2eproto();
  }
} static_descriptor_initializer_fnf_5fmail_2eproto_;
const ::google::protobuf::EnumDescriptor* EMMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMMailType_descriptor_;
}
bool EMMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMMailStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMMailStatus_descriptor_;
}
bool EMMailStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMMailPlat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMMailPlat_descriptor_;
}
bool EMMailPlat_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMIdipGiftType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMIdipGiftType_descriptor_;
}
bool EMIdipGiftType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int idip_gift::kIdFieldNumber;
const int idip_gift::kTypeFieldNumber;
const int idip_gift::kCountFieldNumber;
const int idip_gift::kLevelFieldNumber;
#endif  // !_MSC_VER

idip_gift::idip_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void idip_gift::InitAsDefaultInstance() {
}

idip_gift::idip_gift(const idip_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void idip_gift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  count_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

idip_gift::~idip_gift() {
  SharedDtor();
}

void idip_gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void idip_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* idip_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return idip_gift_descriptor_;
}

const idip_gift& idip_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fmail_2eproto();
  return *default_instance_;
}

idip_gift* idip_gift::default_instance_ = NULL;

idip_gift* idip_gift::New() const {
  return new idip_gift;
}

void idip_gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    count_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool idip_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .FNF.EMIdipGiftType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMIdipGiftType_IsValid(value)) {
            set_type(static_cast< ::FNF::EMIdipGiftType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void idip_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .FNF.EMIdipGiftType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* idip_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .FNF.EMIdipGiftType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int idip_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .FNF.EMIdipGiftType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void idip_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const idip_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const idip_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void idip_gift::MergeFrom(const idip_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void idip_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void idip_gift::CopyFrom(const idip_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool idip_gift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void idip_gift::Swap(idip_gift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata idip_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = idip_gift_descriptor_;
  metadata.reflection = idip_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_item::kIdFieldNumber;
const int mail_item::kTypeFieldNumber;
const int mail_item::kTitleFieldNumber;
const int mail_item::kContentFieldNumber;
const int mail_item::kExpireTimeFieldNumber;
const int mail_item::kSendTimeFieldNumber;
const int mail_item::kSenderUidFieldNumber;
const int mail_item::kSenderNicknameFieldNumber;
const int mail_item::kPicUrlFieldNumber;
const int mail_item::kWebUrlFieldNumber;
const int mail_item::kPrizeIdFieldNumber;
const int mail_item::kPrizeStatusFieldNumber;
const int mail_item::kPopOutFieldNumber;
const int mail_item::kPlatIdFieldNumber;
const int mail_item::kSenderPicFieldNumber;
const int mail_item::kIdipGiftFieldNumber;
#endif  // !_MSC_VER

mail_item::mail_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_item::InitAsDefaultInstance() {
}

mail_item::mail_item(const mail_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expire_time_ = 0;
  send_time_ = 0;
  sender_uid_ = GOOGLE_LONGLONG(0);
  sender_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prize_id_ = 0;
  prize_status_ = 0;
  pop_out_ = 0;
  plat_id_ = 1;
  sender_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_item::~mail_item() {
  SharedDtor();
}

void mail_item::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (sender_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_nickname_;
  }
  if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_url_;
  }
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_url_;
  }
  if (sender_pic_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_pic_;
  }
  if (this != default_instance_) {
  }
}

void mail_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_item_descriptor_;
}

const mail_item& mail_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fmail_2eproto();
  return *default_instance_;
}

mail_item* mail_item::default_instance_ = NULL;

mail_item* mail_item::New() const {
  return new mail_item;
}

void mail_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 1;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    expire_time_ = 0;
    send_time_ = 0;
    sender_uid_ = GOOGLE_LONGLONG(0);
    if (has_sender_nickname()) {
      if (sender_nickname_ != &::google::protobuf::internal::kEmptyString) {
        sender_nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pic_url()) {
      if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
        pic_url_->clear();
      }
    }
    if (has_web_url()) {
      if (web_url_ != &::google::protobuf::internal::kEmptyString) {
        web_url_->clear();
      }
    }
    prize_id_ = 0;
    prize_status_ = 0;
    pop_out_ = 0;
    plat_id_ = 1;
    if (has_sender_pic()) {
      if (sender_pic_ != &::google::protobuf::internal::kEmptyString) {
        sender_pic_->clear();
      }
    }
  }
  idip_gift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .FNF.EMMailType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMMailType_IsValid(value)) {
            set_type(static_cast< ::FNF::EMMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expire_time;
        break;
      }

      // required int32 expire_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_send_time;
        break;
      }

      // required int32 send_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sender_uid;
        break;
      }

      // required int64 sender_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sender_uid_)));
          set_has_sender_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sender_nickname;
        break;
      }

      // optional string sender_nickname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_nickname().data(), this->sender_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pic_url;
        break;
      }

      // optional string pic_url = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic_url().data(), this->pic_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_web_url;
        break;
      }

      // optional string web_url = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->web_url().data(), this->web_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_prize_id;
        break;
      }

      // optional int32 prize_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prize_id_)));
          set_has_prize_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prize_status;
        break;
      }

      // optional .FNF.EMMailStatus prize_status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMMailStatus_IsValid(value)) {
            set_prize_status(static_cast< ::FNF::EMMailStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pop_out;
        break;
      }

      // optional int32 pop_out = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pop_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pop_out_)));
          set_has_pop_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_plat_id;
        break;
      }

      // optional .FNF.EMMailPlat plat_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plat_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FNF::EMMailPlat_IsValid(value)) {
            set_plat_id(static_cast< ::FNF::EMMailPlat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sender_pic;
        break;
      }

      // optional string sender_pic = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_pic().data(), this->sender_pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_idip_gift;
        break;
      }

      // repeated .FNF.idip_gift idip_gift = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idip_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_idip_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_idip_gift;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .FNF.EMMailType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // required int32 expire_time = 5;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expire_time(), output);
  }

  // required int32 send_time = 6;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->send_time(), output);
  }

  // required int64 sender_uid = 7;
  if (has_sender_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sender_uid(), output);
  }

  // optional string sender_nickname = 8;
  if (has_sender_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_nickname().data(), this->sender_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sender_nickname(), output);
  }

  // optional string pic_url = 9;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->pic_url(), output);
  }

  // optional string web_url = 10;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->web_url(), output);
  }

  // optional int32 prize_id = 11;
  if (has_prize_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->prize_id(), output);
  }

  // optional .FNF.EMMailStatus prize_status = 12;
  if (has_prize_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->prize_status(), output);
  }

  // optional int32 pop_out = 13;
  if (has_pop_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pop_out(), output);
  }

  // optional .FNF.EMMailPlat plat_id = 14;
  if (has_plat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->plat_id(), output);
  }

  // optional string sender_pic = 15;
  if (has_sender_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_pic().data(), this->sender_pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->sender_pic(), output);
  }

  // repeated .FNF.idip_gift idip_gift = 16;
  for (int i = 0; i < this->idip_gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->idip_gift(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .FNF.EMMailType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // required int32 expire_time = 5;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expire_time(), target);
  }

  // required int32 send_time = 6;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->send_time(), target);
  }

  // required int64 sender_uid = 7;
  if (has_sender_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sender_uid(), target);
  }

  // optional string sender_nickname = 8;
  if (has_sender_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_nickname().data(), this->sender_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sender_nickname(), target);
  }

  // optional string pic_url = 9;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pic_url(), target);
  }

  // optional string web_url = 10;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->web_url(), target);
  }

  // optional int32 prize_id = 11;
  if (has_prize_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->prize_id(), target);
  }

  // optional .FNF.EMMailStatus prize_status = 12;
  if (has_prize_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->prize_status(), target);
  }

  // optional int32 pop_out = 13;
  if (has_pop_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pop_out(), target);
  }

  // optional .FNF.EMMailPlat plat_id = 14;
  if (has_plat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->plat_id(), target);
  }

  // optional string sender_pic = 15;
  if (has_sender_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_pic().data(), this->sender_pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sender_pic(), target);
  }

  // repeated .FNF.idip_gift idip_gift = 16;
  for (int i = 0; i < this->idip_gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->idip_gift(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .FNF.EMMailType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required int32 expire_time = 5;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

    // required int32 send_time = 6;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_time());
    }

    // required int64 sender_uid = 7;
    if (has_sender_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sender_uid());
    }

    // optional string sender_nickname = 8;
    if (has_sender_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_nickname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pic_url = 9;
    if (has_pic_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_url());
    }

    // optional string web_url = 10;
    if (has_web_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_url());
    }

    // optional int32 prize_id = 11;
    if (has_prize_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prize_id());
    }

    // optional .FNF.EMMailStatus prize_status = 12;
    if (has_prize_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prize_status());
    }

    // optional int32 pop_out = 13;
    if (has_pop_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pop_out());
    }

    // optional .FNF.EMMailPlat plat_id = 14;
    if (has_plat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->plat_id());
    }

    // optional string sender_pic = 15;
    if (has_sender_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_pic());
    }

  }
  // repeated .FNF.idip_gift idip_gift = 16;
  total_size += 2 * this->idip_gift_size();
  for (int i = 0; i < this->idip_gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->idip_gift(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_item::MergeFrom(const mail_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  idip_gift_.MergeFrom(from.idip_gift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_sender_uid()) {
      set_sender_uid(from.sender_uid());
    }
    if (from.has_sender_nickname()) {
      set_sender_nickname(from.sender_nickname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pic_url()) {
      set_pic_url(from.pic_url());
    }
    if (from.has_web_url()) {
      set_web_url(from.web_url());
    }
    if (from.has_prize_id()) {
      set_prize_id(from.prize_id());
    }
    if (from.has_prize_status()) {
      set_prize_status(from.prize_status());
    }
    if (from.has_pop_out()) {
      set_pop_out(from.pop_out());
    }
    if (from.has_plat_id()) {
      set_plat_id(from.plat_id());
    }
    if (from.has_sender_pic()) {
      set_sender_pic(from.sender_pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_item::CopyFrom(const mail_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000077) != 0x00000077) return false;

  for (int i = 0; i < idip_gift_size(); i++) {
    if (!this->idip_gift(i).IsInitialized()) return false;
  }
  return true;
}

void mail_item::Swap(mail_item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(send_time_, other->send_time_);
    std::swap(sender_uid_, other->sender_uid_);
    std::swap(sender_nickname_, other->sender_nickname_);
    std::swap(pic_url_, other->pic_url_);
    std::swap(web_url_, other->web_url_);
    std::swap(prize_id_, other->prize_id_);
    std::swap(prize_status_, other->prize_status_);
    std::swap(pop_out_, other->pop_out_);
    std::swap(plat_id_, other->plat_id_);
    std::swap(sender_pic_, other->sender_pic_);
    idip_gift_.Swap(&other->idip_gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_item_descriptor_;
  metadata.reflection = mail_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mailbox::kUserMailFieldNumber;
const int mailbox::kSystemMailFieldNumber;
#endif  // !_MSC_VER

mailbox::mailbox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mailbox::InitAsDefaultInstance() {
}

mailbox::mailbox(const mailbox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mailbox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mailbox::~mailbox() {
  SharedDtor();
}

void mailbox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mailbox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mailbox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mailbox_descriptor_;
}

const mailbox& mailbox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fnf_5fmail_2eproto();
  return *default_instance_;
}

mailbox* mailbox::default_instance_ = NULL;

mailbox* mailbox::New() const {
  return new mailbox;
}

void mailbox::Clear() {
  user_mail_.Clear();
  system_mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mailbox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FNF.mail_item user_mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_mail;
        if (input->ExpectTag(18)) goto parse_system_mail;
        break;
      }

      // repeated .FNF.mail_item system_mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_system_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_system_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mailbox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FNF.mail_item user_mail = 1;
  for (int i = 0; i < this->user_mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_mail(i), output);
  }

  // repeated .FNF.mail_item system_mail = 2;
  for (int i = 0; i < this->system_mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->system_mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mailbox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FNF.mail_item user_mail = 1;
  for (int i = 0; i < this->user_mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_mail(i), target);
  }

  // repeated .FNF.mail_item system_mail = 2;
  for (int i = 0; i < this->system_mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->system_mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mailbox::ByteSize() const {
  int total_size = 0;

  // repeated .FNF.mail_item user_mail = 1;
  total_size += 1 * this->user_mail_size();
  for (int i = 0; i < this->user_mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_mail(i));
  }

  // repeated .FNF.mail_item system_mail = 2;
  total_size += 1 * this->system_mail_size();
  for (int i = 0; i < this->system_mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->system_mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mailbox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mailbox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mailbox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mailbox::MergeFrom(const mailbox& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_mail_.MergeFrom(from.user_mail_);
  system_mail_.MergeFrom(from.system_mail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mailbox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mailbox::CopyFrom(const mailbox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mailbox::IsInitialized() const {

  for (int i = 0; i < user_mail_size(); i++) {
    if (!this->user_mail(i).IsInitialized()) return false;
  }
  for (int i = 0; i < system_mail_size(); i++) {
    if (!this->system_mail(i).IsInitialized()) return false;
  }
  return true;
}

void mailbox::Swap(mailbox* other) {
  if (other != this) {
    user_mail_.Swap(&other->user_mail_);
    system_mail_.Swap(&other->system_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mailbox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mailbox_descriptor_;
  metadata.reflection = mailbox_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FNF

// @@protoc_insertion_point(global_scope)
