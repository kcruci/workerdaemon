// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fnf_user.proto

#ifndef PROTOBUF_fnf_5fuser_2eproto__INCLUDED
#define PROTOBUF_fnf_5fuser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace FNF {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fnf_5fuser_2eproto();
void protobuf_AssignDesc_fnf_5fuser_2eproto();
void protobuf_ShutdownFile_fnf_5fuser_2eproto();

class wallet;
class profile;
class back_pack;
class grow_up;
class material;
class active_item;
class task_daily_limit;
class newlife_count;
class lottery_protection;
class SafeRank;
class SafeGain;
class medal;
class device_info;
class oauth_auth;
class ptnumber;
class prop;
class roll_info;
class skin;
class score;
class blade;
class ninjia;
class pet;
class achievement;
class task;
class activity;
class signin;
class numbers;

enum EmRankSafe {
  EM_RANK_NORMAL = 0,
  EM_RANK_HIDE = 1
};
bool EmRankSafe_IsValid(int value);
const EmRankSafe EmRankSafe_MIN = EM_RANK_NORMAL;
const EmRankSafe EmRankSafe_MAX = EM_RANK_HIDE;
const int EmRankSafe_ARRAYSIZE = EmRankSafe_MAX + 1;

const ::google::protobuf::EnumDescriptor* EmRankSafe_descriptor();
inline const ::std::string& EmRankSafe_Name(EmRankSafe value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRankSafe_descriptor(), value);
}
inline bool EmRankSafe_Parse(
    const ::std::string& name, EmRankSafe* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRankSafe>(
    EmRankSafe_descriptor(), name, value);
}
enum EmGainSafe {
  EM_GAIN_NORMAL = 0,
  EM_GAIN_ZERO = 1
};
bool EmGainSafe_IsValid(int value);
const EmGainSafe EmGainSafe_MIN = EM_GAIN_NORMAL;
const EmGainSafe EmGainSafe_MAX = EM_GAIN_ZERO;
const int EmGainSafe_ARRAYSIZE = EmGainSafe_MAX + 1;

const ::google::protobuf::EnumDescriptor* EmGainSafe_descriptor();
inline const ::std::string& EmGainSafe_Name(EmGainSafe value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmGainSafe_descriptor(), value);
}
inline bool EmGainSafe_Parse(
    const ::std::string& name, EmGainSafe* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmGainSafe>(
    EmGainSafe_descriptor(), name, value);
}
enum EM_ROLL_TYPE {
  ROLL_TYPE_PROP = 1,
  ROLL_TYPE_TIME = 2,
  RELL_TYPE_SCORE = 3,
  RELL_TYPE_FRUIT = 4
};
bool EM_ROLL_TYPE_IsValid(int value);
const EM_ROLL_TYPE EM_ROLL_TYPE_MIN = ROLL_TYPE_PROP;
const EM_ROLL_TYPE EM_ROLL_TYPE_MAX = RELL_TYPE_FRUIT;
const int EM_ROLL_TYPE_ARRAYSIZE = EM_ROLL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EM_ROLL_TYPE_descriptor();
inline const ::std::string& EM_ROLL_TYPE_Name(EM_ROLL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EM_ROLL_TYPE_descriptor(), value);
}
inline bool EM_ROLL_TYPE_Parse(
    const ::std::string& name, EM_ROLL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EM_ROLL_TYPE>(
    EM_ROLL_TYPE_descriptor(), name, value);
}
enum EM_ROLL_STATUS {
  ROLL_STATUS_NEW = 0,
  ROLL_STATUS_USED = 1
};
bool EM_ROLL_STATUS_IsValid(int value);
const EM_ROLL_STATUS EM_ROLL_STATUS_MIN = ROLL_STATUS_NEW;
const EM_ROLL_STATUS EM_ROLL_STATUS_MAX = ROLL_STATUS_USED;
const int EM_ROLL_STATUS_ARRAYSIZE = EM_ROLL_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* EM_ROLL_STATUS_descriptor();
inline const ::std::string& EM_ROLL_STATUS_Name(EM_ROLL_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    EM_ROLL_STATUS_descriptor(), value);
}
inline bool EM_ROLL_STATUS_Parse(
    const ::std::string& name, EM_ROLL_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EM_ROLL_STATUS>(
    EM_ROLL_STATUS_descriptor(), name, value);
}
enum EMTaskStatus {
  TASK_DOING = 0,
  TASK_FINISHED = 1,
  TASK_HASGIFTED = 2
};
bool EMTaskStatus_IsValid(int value);
const EMTaskStatus EMTaskStatus_MIN = TASK_DOING;
const EMTaskStatus EMTaskStatus_MAX = TASK_HASGIFTED;
const int EMTaskStatus_ARRAYSIZE = EMTaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMTaskStatus_descriptor();
inline const ::std::string& EMTaskStatus_Name(EMTaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMTaskStatus_descriptor(), value);
}
inline bool EMTaskStatus_Parse(
    const ::std::string& name, EMTaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMTaskStatus>(
    EMTaskStatus_descriptor(), name, value);
}
enum EMActivityType {
  EM_ACTIVITY_ALWAYS_SHOW = 0,
  EM_ACTIVITY_ENERGY = 1,
  EM_ACTIVITY_ACHIEVEMENT = 2,
  EM_ACTIVITY_QIE = 3,
  EM_ACTIVITY_NINJIA = 4,
  EM_ACTIVITY_PET = 5,
  EM_ACTIVITY_BLADE = 6,
  EM_ACTIVITY_DOUBLE = 7,
  EM_ACTIVITY_GAMEDROP = 8
};
bool EMActivityType_IsValid(int value);
const EMActivityType EMActivityType_MIN = EM_ACTIVITY_ALWAYS_SHOW;
const EMActivityType EMActivityType_MAX = EM_ACTIVITY_GAMEDROP;
const int EMActivityType_ARRAYSIZE = EMActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMActivityType_descriptor();
inline const ::std::string& EMActivityType_Name(EMActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMActivityType_descriptor(), value);
}
inline bool EMActivityType_Parse(
    const ::std::string& name, EMActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMActivityType>(
    EMActivityType_descriptor(), name, value);
}
enum EMActivityGiftStatus {
  EM_ACTIVITY_NORMAL = 0,
  EM_ACTIVITY_GIFTGOT = 1
};
bool EMActivityGiftStatus_IsValid(int value);
const EMActivityGiftStatus EMActivityGiftStatus_MIN = EM_ACTIVITY_NORMAL;
const EMActivityGiftStatus EMActivityGiftStatus_MAX = EM_ACTIVITY_GIFTGOT;
const int EMActivityGiftStatus_ARRAYSIZE = EMActivityGiftStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMActivityGiftStatus_descriptor();
inline const ::std::string& EMActivityGiftStatus_Name(EMActivityGiftStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMActivityGiftStatus_descriptor(), value);
}
inline bool EMActivityGiftStatus_Parse(
    const ::std::string& name, EMActivityGiftStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMActivityGiftStatus>(
    EMActivityGiftStatus_descriptor(), name, value);
}
// ===================================================================

class wallet : public ::google::protobuf::Message {
 public:
  wallet();
  virtual ~wallet();

  wallet(const wallet& from);

  inline wallet& operator=(const wallet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wallet& default_instance();

  void Swap(wallet* other);

  // implements Message ----------------------------------------------

  wallet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wallet& from);
  void MergeFrom(const wallet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gem = 1;
  inline bool has_gem() const;
  inline void clear_gem();
  static const int kGemFieldNumber = 1;
  inline ::google::protobuf::int32 gem() const;
  inline void set_gem(::google::protobuf::int32 value);

  // optional int32 gem_add = 2;
  inline bool has_gem_add() const;
  inline void clear_gem_add();
  static const int kGemAddFieldNumber = 2;
  inline ::google::protobuf::int32 gem_add() const;
  inline void set_gem_add(::google::protobuf::int32 value);

  // optional int32 gem_del = 3;
  inline bool has_gem_del() const;
  inline void clear_gem_del();
  static const int kGemDelFieldNumber = 3;
  inline ::google::protobuf::int32 gem_del() const;
  inline void set_gem_del(::google::protobuf::int32 value);

  // optional int32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::int32 update_time() const;
  inline void set_update_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.wallet)
 private:
  inline void set_has_gem();
  inline void clear_has_gem();
  inline void set_has_gem_add();
  inline void clear_has_gem_add();
  inline void set_has_gem_del();
  inline void clear_has_gem_del();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gem_;
  ::google::protobuf::int32 gem_add_;
  ::google::protobuf::int32 gem_del_;
  ::google::protobuf::int32 update_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static wallet* default_instance_;
};
// -------------------------------------------------------------------

class profile : public ::google::protobuf::Message {
 public:
  profile();
  virtual ~profile();

  profile(const profile& from);

  inline profile& operator=(const profile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const profile& default_instance();

  void Swap(profile* other);

  // implements Message ----------------------------------------------

  profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const profile& from);
  void MergeFrom(const profile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // required int32 mail_switch = 4;
  inline bool has_mail_switch() const;
  inline void clear_mail_switch();
  static const int kMailSwitchFieldNumber = 4;
  inline ::google::protobuf::int32 mail_switch() const;
  inline void set_mail_switch(::google::protobuf::int32 value);

  // optional int32 vip_lv = 5;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::int32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::int32 value);

  // optional .FNF.score score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline const ::FNF::score& score() const;
  inline ::FNF::score* mutable_score();
  inline ::FNF::score* release_score();
  inline void set_allocated_score(::FNF::score* score);

  // optional .FNF.ptnumber ios_number = 7;
  inline bool has_ios_number() const;
  inline void clear_ios_number();
  static const int kIosNumberFieldNumber = 7;
  inline const ::FNF::ptnumber& ios_number() const;
  inline ::FNF::ptnumber* mutable_ios_number();
  inline ::FNF::ptnumber* release_ios_number();
  inline void set_allocated_ios_number(::FNF::ptnumber* ios_number);

  // optional .FNF.ptnumber and_number = 8;
  inline bool has_and_number() const;
  inline void clear_and_number();
  static const int kAndNumberFieldNumber = 8;
  inline const ::FNF::ptnumber& and_number() const;
  inline ::FNF::ptnumber* mutable_and_number();
  inline ::FNF::ptnumber* release_and_number();
  inline void set_allocated_and_number(::FNF::ptnumber* and_number);

  // required int32 reg_time = 9;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 9;
  inline ::google::protobuf::int32 reg_time() const;
  inline void set_reg_time(::google::protobuf::int32 value);

  // required int32 last_active_time = 10;
  inline bool has_last_active_time() const;
  inline void clear_last_active_time();
  static const int kLastActiveTimeFieldNumber = 10;
  inline ::google::protobuf::int32 last_active_time() const;
  inline void set_last_active_time(::google::protobuf::int32 value);

  // required int32 cont_active_days = 11;
  inline bool has_cont_active_days() const;
  inline void clear_cont_active_days();
  static const int kContActiveDaysFieldNumber = 11;
  inline ::google::protobuf::int32 cont_active_days() const;
  inline void set_cont_active_days(::google::protobuf::int32 value);

  // optional int32 cont_active_giftmask = 12;
  inline bool has_cont_active_giftmask() const;
  inline void clear_cont_active_giftmask();
  static const int kContActiveGiftmaskFieldNumber = 12;
  inline ::google::protobuf::int32 cont_active_giftmask() const;
  inline void set_cont_active_giftmask(::google::protobuf::int32 value);

  // optional int32 last_play_time = 13;
  inline bool has_last_play_time() const;
  inline void clear_last_play_time();
  static const int kLastPlayTimeFieldNumber = 13;
  inline ::google::protobuf::int32 last_play_time() const;
  inline void set_last_play_time(::google::protobuf::int32 value);

  // required string nickname = 14;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 14;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string avatar = 15;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 15;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional int32 gender = 16;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 16;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // required string openid = 17;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 17;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional .FNF.oauth_auth oauth_auth = 19;
  inline bool has_oauth_auth() const;
  inline void clear_oauth_auth();
  static const int kOauthAuthFieldNumber = 19;
  inline const ::FNF::oauth_auth& oauth_auth() const;
  inline ::FNF::oauth_auth* mutable_oauth_auth();
  inline ::FNF::oauth_auth* release_oauth_auth();
  inline void set_allocated_oauth_auth(::FNF::oauth_auth* oauth_auth);

  // optional .FNF.task single_play_task = 20;
  inline bool has_single_play_task() const;
  inline void clear_single_play_task();
  static const int kSinglePlayTaskFieldNumber = 20;
  inline const ::FNF::task& single_play_task() const;
  inline ::FNF::task* mutable_single_play_task();
  inline ::FNF::task* release_single_play_task();
  inline void set_allocated_single_play_task(::FNF::task* single_play_task);

  // optional .FNF.medal medal = 21;
  inline bool has_medal() const;
  inline void clear_medal();
  static const int kMedalFieldNumber = 21;
  inline const ::FNF::medal& medal() const;
  inline ::FNF::medal* mutable_medal();
  inline ::FNF::medal* release_medal();
  inline void set_allocated_medal(::FNF::medal* medal);

  // optional int32 medal_time = 22;
  inline bool has_medal_time() const;
  inline void clear_medal_time();
  static const int kMedalTimeFieldNumber = 22;
  inline ::google::protobuf::int32 medal_time() const;
  inline void set_medal_time(::google::protobuf::int32 value);

  // optional int32 curr_play_dropid = 23;
  inline bool has_curr_play_dropid() const;
  inline void clear_curr_play_dropid();
  static const int kCurrPlayDropidFieldNumber = 23;
  inline ::google::protobuf::int32 curr_play_dropid() const;
  inline void set_curr_play_dropid(::google::protobuf::int32 value);

  // optional int32 friend_list_succ_time = 24;
  inline bool has_friend_list_succ_time() const;
  inline void clear_friend_list_succ_time();
  static const int kFriendListSuccTimeFieldNumber = 24;
  inline ::google::protobuf::int32 friend_list_succ_time() const;
  inline void set_friend_list_succ_time(::google::protobuf::int32 value);

  // optional int32 game_count = 25;
  inline bool has_game_count() const;
  inline void clear_game_count();
  static const int kGameCountFieldNumber = 25;
  inline ::google::protobuf::int32 game_count() const;
  inline void set_game_count(::google::protobuf::int32 value);

  // optional int32 friend_count = 26;
  inline bool has_friend_count() const;
  inline void clear_friend_count();
  static const int kFriendCountFieldNumber = 26;
  inline ::google::protobuf::int32 friend_count() const;
  inline void set_friend_count(::google::protobuf::int32 value);

  // optional int32 friend_count_giftmask = 27;
  inline bool has_friend_count_giftmask() const;
  inline void clear_friend_count_giftmask();
  static const int kFriendCountGiftmaskFieldNumber = 27;
  inline ::google::protobuf::int32 friend_count_giftmask() const;
  inline void set_friend_count_giftmask(::google::protobuf::int32 value);

  // optional int32 send_energy = 28;
  inline bool has_send_energy() const;
  inline void clear_send_energy();
  static const int kSendEnergyFieldNumber = 28;
  inline ::google::protobuf::int32 send_energy() const;
  inline void set_send_energy(::google::protobuf::int32 value);

  // optional .FNF.signin signin = 29;
  inline bool has_signin() const;
  inline void clear_signin();
  static const int kSigninFieldNumber = 29;
  inline const ::FNF::signin& signin() const;
  inline ::FNF::signin* mutable_signin();
  inline ::FNF::signin* release_signin();
  inline void set_allocated_signin(::FNF::signin* signin);

  // optional int32 today_total_starfruit = 30;
  inline bool has_today_total_starfruit() const;
  inline void clear_today_total_starfruit();
  static const int kTodayTotalStarfruitFieldNumber = 30;
  inline ::google::protobuf::int32 today_total_starfruit() const;
  inline void set_today_total_starfruit(::google::protobuf::int32 value);

  // optional .FNF.SafeRank safe_rank = 31;
  inline bool has_safe_rank() const;
  inline void clear_safe_rank();
  static const int kSafeRankFieldNumber = 31;
  inline const ::FNF::SafeRank& safe_rank() const;
  inline ::FNF::SafeRank* mutable_safe_rank();
  inline ::FNF::SafeRank* release_safe_rank();
  inline void set_allocated_safe_rank(::FNF::SafeRank* safe_rank);

  // optional .FNF.SafeGain safe_gain = 32;
  inline bool has_safe_gain() const;
  inline void clear_safe_gain();
  static const int kSafeGainFieldNumber = 32;
  inline const ::FNF::SafeGain& safe_gain() const;
  inline ::FNF::SafeGain* mutable_safe_gain();
  inline ::FNF::SafeGain* release_safe_gain();
  inline void set_allocated_safe_gain(::FNF::SafeGain* safe_gain);

  // optional .FNF.newlife_count newlife_count = 33;
  inline bool has_newlife_count() const;
  inline void clear_newlife_count();
  static const int kNewlifeCountFieldNumber = 33;
  inline const ::FNF::newlife_count& newlife_count() const;
  inline ::FNF::newlife_count* mutable_newlife_count();
  inline ::FNF::newlife_count* release_newlife_count();
  inline void set_allocated_newlife_count(::FNF::newlife_count* newlife_count);

  // optional .FNF.lottery_protection lottery_protection = 34;
  inline bool has_lottery_protection() const;
  inline void clear_lottery_protection();
  static const int kLotteryProtectionFieldNumber = 34;
  inline const ::FNF::lottery_protection& lottery_protection() const;
  inline ::FNF::lottery_protection* mutable_lottery_protection();
  inline ::FNF::lottery_protection* release_lottery_protection();
  inline void set_allocated_lottery_protection(::FNF::lottery_protection* lottery_protection);

  // optional int64 tips_bit = 35;
  inline bool has_tips_bit() const;
  inline void clear_tips_bit();
  static const int kTipsBitFieldNumber = 35;
  inline ::google::protobuf::int64 tips_bit() const;
  inline void set_tips_bit(::google::protobuf::int64 value);

  // optional int32 challenge_count = 36;
  inline bool has_challenge_count() const;
  inline void clear_challenge_count();
  static const int kChallengeCountFieldNumber = 36;
  inline ::google::protobuf::int32 challenge_count() const;
  inline void set_challenge_count(::google::protobuf::int32 value);

  // optional int32 challenge_time = 37;
  inline bool has_challenge_time() const;
  inline void clear_challenge_time();
  static const int kChallengeTimeFieldNumber = 37;
  inline ::google::protobuf::int32 challenge_time() const;
  inline void set_challenge_time(::google::protobuf::int32 value);

  // optional int32 challenge_score = 38;
  inline bool has_challenge_score() const;
  inline void clear_challenge_score();
  static const int kChallengeScoreFieldNumber = 38;
  inline ::google::protobuf::int32 challenge_score() const;
  inline void set_challenge_score(::google::protobuf::int32 value);

  // optional int32 vipscore = 39;
  inline bool has_vipscore() const;
  inline void clear_vipscore();
  static const int kVipscoreFieldNumber = 39;
  inline ::google::protobuf::int32 vipscore() const;
  inline void set_vipscore(::google::protobuf::int32 value);

  // optional int32 vipgift_time = 40;
  inline bool has_vipgift_time() const;
  inline void clear_vipgift_time();
  static const int kVipgiftTimeFieldNumber = 40;
  inline ::google::protobuf::int32 vipgift_time() const;
  inline void set_vipgift_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.profile)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_mail_switch();
  inline void clear_has_mail_switch();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_ios_number();
  inline void clear_has_ios_number();
  inline void set_has_and_number();
  inline void clear_has_and_number();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_last_active_time();
  inline void clear_has_last_active_time();
  inline void set_has_cont_active_days();
  inline void clear_has_cont_active_days();
  inline void set_has_cont_active_giftmask();
  inline void clear_has_cont_active_giftmask();
  inline void set_has_last_play_time();
  inline void clear_has_last_play_time();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_oauth_auth();
  inline void clear_has_oauth_auth();
  inline void set_has_single_play_task();
  inline void clear_has_single_play_task();
  inline void set_has_medal();
  inline void clear_has_medal();
  inline void set_has_medal_time();
  inline void clear_has_medal_time();
  inline void set_has_curr_play_dropid();
  inline void clear_has_curr_play_dropid();
  inline void set_has_friend_list_succ_time();
  inline void clear_has_friend_list_succ_time();
  inline void set_has_game_count();
  inline void clear_has_game_count();
  inline void set_has_friend_count();
  inline void clear_has_friend_count();
  inline void set_has_friend_count_giftmask();
  inline void clear_has_friend_count_giftmask();
  inline void set_has_send_energy();
  inline void clear_has_send_energy();
  inline void set_has_signin();
  inline void clear_has_signin();
  inline void set_has_today_total_starfruit();
  inline void clear_has_today_total_starfruit();
  inline void set_has_safe_rank();
  inline void clear_has_safe_rank();
  inline void set_has_safe_gain();
  inline void clear_has_safe_gain();
  inline void set_has_newlife_count();
  inline void clear_has_newlife_count();
  inline void set_has_lottery_protection();
  inline void clear_has_lottery_protection();
  inline void set_has_tips_bit();
  inline void clear_has_tips_bit();
  inline void set_has_challenge_count();
  inline void clear_has_challenge_count();
  inline void set_has_challenge_time();
  inline void clear_has_challenge_time();
  inline void set_has_challenge_score();
  inline void clear_has_challenge_score();
  inline void set_has_vipscore();
  inline void clear_has_vipscore();
  inline void set_has_vipgift_time();
  inline void clear_has_vipgift_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 mail_switch_;
  ::google::protobuf::int32 vip_lv_;
  ::FNF::score* score_;
  ::FNF::ptnumber* ios_number_;
  ::FNF::ptnumber* and_number_;
  ::google::protobuf::int32 reg_time_;
  ::google::protobuf::int32 last_active_time_;
  ::google::protobuf::int32 cont_active_days_;
  ::google::protobuf::int32 cont_active_giftmask_;
  ::std::string* nickname_;
  ::google::protobuf::int32 last_play_time_;
  ::google::protobuf::int32 gender_;
  ::std::string* avatar_;
  ::std::string* openid_;
  ::FNF::oauth_auth* oauth_auth_;
  ::FNF::task* single_play_task_;
  ::FNF::medal* medal_;
  ::google::protobuf::int32 medal_time_;
  ::google::protobuf::int32 curr_play_dropid_;
  ::google::protobuf::int32 friend_list_succ_time_;
  ::google::protobuf::int32 game_count_;
  ::google::protobuf::int32 friend_count_;
  ::google::protobuf::int32 friend_count_giftmask_;
  ::FNF::signin* signin_;
  ::google::protobuf::int32 send_energy_;
  ::google::protobuf::int32 today_total_starfruit_;
  ::FNF::SafeRank* safe_rank_;
  ::FNF::SafeGain* safe_gain_;
  ::FNF::newlife_count* newlife_count_;
  ::FNF::lottery_protection* lottery_protection_;
  ::google::protobuf::int64 tips_bit_;
  ::google::protobuf::int32 challenge_count_;
  ::google::protobuf::int32 challenge_time_;
  ::google::protobuf::int32 challenge_score_;
  ::google::protobuf::int32 vipscore_;
  ::google::protobuf::int32 vipgift_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static profile* default_instance_;
};
// -------------------------------------------------------------------

class back_pack : public ::google::protobuf::Message {
 public:
  back_pack();
  virtual ~back_pack();

  back_pack(const back_pack& from);

  inline back_pack& operator=(const back_pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const back_pack& default_instance();

  void Swap(back_pack* other);

  // implements Message ----------------------------------------------

  back_pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const back_pack& from);
  void MergeFrom(const back_pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FNF.blade blades = 1;
  inline int blades_size() const;
  inline void clear_blades();
  static const int kBladesFieldNumber = 1;
  inline const ::FNF::blade& blades(int index) const;
  inline ::FNF::blade* mutable_blades(int index);
  inline ::FNF::blade* add_blades();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::blade >&
      blades() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::blade >*
      mutable_blades();

  // repeated .FNF.ninjia ninjias = 2;
  inline int ninjias_size() const;
  inline void clear_ninjias();
  static const int kNinjiasFieldNumber = 2;
  inline const ::FNF::ninjia& ninjias(int index) const;
  inline ::FNF::ninjia* mutable_ninjias(int index);
  inline ::FNF::ninjia* add_ninjias();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::ninjia >&
      ninjias() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::ninjia >*
      mutable_ninjias();

  // repeated .FNF.pet pets = 3;
  inline int pets_size() const;
  inline void clear_pets();
  static const int kPetsFieldNumber = 3;
  inline const ::FNF::pet& pets(int index) const;
  inline ::FNF::pet* mutable_pets(int index);
  inline ::FNF::pet* add_pets();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::pet >&
      pets() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::pet >*
      mutable_pets();

  // repeated .FNF.prop props = 4;
  inline int props_size() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 4;
  inline const ::FNF::prop& props(int index) const;
  inline ::FNF::prop* mutable_props(int index);
  inline ::FNF::prop* add_props();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::prop >&
      props() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::prop >*
      mutable_props();

  // optional .FNF.roll_info roll = 5;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 5;
  inline const ::FNF::roll_info& roll() const;
  inline ::FNF::roll_info* mutable_roll();
  inline ::FNF::roll_info* release_roll();
  inline void set_allocated_roll(::FNF::roll_info* roll);

  // repeated .FNF.skin skins = 6;
  inline int skins_size() const;
  inline void clear_skins();
  static const int kSkinsFieldNumber = 6;
  inline const ::FNF::skin& skins(int index) const;
  inline ::FNF::skin* mutable_skins(int index);
  inline ::FNF::skin* add_skins();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::skin >&
      skins() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::skin >*
      mutable_skins();

  // repeated .FNF.material materials = 7;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 7;
  inline const ::FNF::material& materials(int index) const;
  inline ::FNF::material* mutable_materials(int index);
  inline ::FNF::material* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::material >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::material >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:FNF.back_pack)
 private:
  inline void set_has_roll();
  inline void clear_has_roll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FNF::blade > blades_;
  ::google::protobuf::RepeatedPtrField< ::FNF::ninjia > ninjias_;
  ::google::protobuf::RepeatedPtrField< ::FNF::pet > pets_;
  ::google::protobuf::RepeatedPtrField< ::FNF::prop > props_;
  ::FNF::roll_info* roll_;
  ::google::protobuf::RepeatedPtrField< ::FNF::skin > skins_;
  ::google::protobuf::RepeatedPtrField< ::FNF::material > materials_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static back_pack* default_instance_;
};
// -------------------------------------------------------------------

class grow_up : public ::google::protobuf::Message {
 public:
  grow_up();
  virtual ~grow_up();

  grow_up(const grow_up& from);

  inline grow_up& operator=(const grow_up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grow_up& default_instance();

  void Swap(grow_up* other);

  // implements Message ----------------------------------------------

  grow_up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grow_up& from);
  void MergeFrom(const grow_up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FNF.achievement achievements = 1;
  inline int achievements_size() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 1;
  inline const ::FNF::achievement& achievements(int index) const;
  inline ::FNF::achievement* mutable_achievements(int index);
  inline ::FNF::achievement* add_achievements();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::achievement >&
      achievements() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::achievement >*
      mutable_achievements();

  // repeated .FNF.task daily_tasks = 2;
  inline int daily_tasks_size() const;
  inline void clear_daily_tasks();
  static const int kDailyTasksFieldNumber = 2;
  inline const ::FNF::task& daily_tasks(int index) const;
  inline ::FNF::task* mutable_daily_tasks(int index);
  inline ::FNF::task* add_daily_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::task >&
      daily_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::task >*
      mutable_daily_tasks();

  // repeated .FNF.task cumulative_tasks = 3;
  inline int cumulative_tasks_size() const;
  inline void clear_cumulative_tasks();
  static const int kCumulativeTasksFieldNumber = 3;
  inline const ::FNF::task& cumulative_tasks(int index) const;
  inline ::FNF::task* mutable_cumulative_tasks(int index);
  inline ::FNF::task* add_cumulative_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::task >&
      cumulative_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::task >*
      mutable_cumulative_tasks();

  // repeated .FNF.activity current_activity = 4;
  inline int current_activity_size() const;
  inline void clear_current_activity();
  static const int kCurrentActivityFieldNumber = 4;
  inline const ::FNF::activity& current_activity(int index) const;
  inline ::FNF::activity* mutable_current_activity(int index);
  inline ::FNF::activity* add_current_activity();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::activity >&
      current_activity() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::activity >*
      mutable_current_activity();

  // optional .FNF.task_daily_limit cumulative_task_limit = 5;
  inline bool has_cumulative_task_limit() const;
  inline void clear_cumulative_task_limit();
  static const int kCumulativeTaskLimitFieldNumber = 5;
  inline const ::FNF::task_daily_limit& cumulative_task_limit() const;
  inline ::FNF::task_daily_limit* mutable_cumulative_task_limit();
  inline ::FNF::task_daily_limit* release_cumulative_task_limit();
  inline void set_allocated_cumulative_task_limit(::FNF::task_daily_limit* cumulative_task_limit);

  // repeated .FNF.active_item active_items = 6;
  inline int active_items_size() const;
  inline void clear_active_items();
  static const int kActiveItemsFieldNumber = 6;
  inline const ::FNF::active_item& active_items(int index) const;
  inline ::FNF::active_item* mutable_active_items(int index);
  inline ::FNF::active_item* add_active_items();
  inline const ::google::protobuf::RepeatedPtrField< ::FNF::active_item >&
      active_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::FNF::active_item >*
      mutable_active_items();

  // optional int32 active_receive_step = 7;
  inline bool has_active_receive_step() const;
  inline void clear_active_receive_step();
  static const int kActiveReceiveStepFieldNumber = 7;
  inline ::google::protobuf::int32 active_receive_step() const;
  inline void set_active_receive_step(::google::protobuf::int32 value);

  // optional int32 active_time = 8;
  inline bool has_active_time() const;
  inline void clear_active_time();
  static const int kActiveTimeFieldNumber = 8;
  inline ::google::protobuf::int32 active_time() const;
  inline void set_active_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.grow_up)
 private:
  inline void set_has_cumulative_task_limit();
  inline void clear_has_cumulative_task_limit();
  inline void set_has_active_receive_step();
  inline void clear_has_active_receive_step();
  inline void set_has_active_time();
  inline void clear_has_active_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FNF::achievement > achievements_;
  ::google::protobuf::RepeatedPtrField< ::FNF::task > daily_tasks_;
  ::google::protobuf::RepeatedPtrField< ::FNF::task > cumulative_tasks_;
  ::google::protobuf::RepeatedPtrField< ::FNF::activity > current_activity_;
  ::FNF::task_daily_limit* cumulative_task_limit_;
  ::google::protobuf::RepeatedPtrField< ::FNF::active_item > active_items_;
  ::google::protobuf::int32 active_receive_step_;
  ::google::protobuf::int32 active_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static grow_up* default_instance_;
};
// -------------------------------------------------------------------

class material : public ::google::protobuf::Message {
 public:
  material();
  virtual ~material();

  material(const material& from);

  inline material& operator=(const material& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const material& default_instance();

  void Swap(material* other);

  // implements Message ----------------------------------------------

  material* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const material& from);
  void MergeFrom(const material& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.material)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static material* default_instance_;
};
// -------------------------------------------------------------------

class active_item : public ::google::protobuf::Message {
 public:
  active_item();
  virtual ~active_item();

  active_item(const active_item& from);

  inline active_item& operator=(const active_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const active_item& default_instance();

  void Swap(active_item* other);

  // implements Message ----------------------------------------------

  active_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const active_item& from);
  void MergeFrom(const active_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.active_item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static active_item* default_instance_;
};
// -------------------------------------------------------------------

class task_daily_limit : public ::google::protobuf::Message {
 public:
  task_daily_limit();
  virtual ~task_daily_limit();

  task_daily_limit(const task_daily_limit& from);

  inline task_daily_limit& operator=(const task_daily_limit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const task_daily_limit& default_instance();

  void Swap(task_daily_limit* other);

  // implements Message ----------------------------------------------

  task_daily_limit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const task_daily_limit& from);
  void MergeFrom(const task_daily_limit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cumulative_task_count = 1;
  inline bool has_cumulative_task_count() const;
  inline void clear_cumulative_task_count();
  static const int kCumulativeTaskCountFieldNumber = 1;
  inline ::google::protobuf::int32 cumulative_task_count() const;
  inline void set_cumulative_task_count(::google::protobuf::int32 value);

  // required int32 cumulative_task_updatetime = 2;
  inline bool has_cumulative_task_updatetime() const;
  inline void clear_cumulative_task_updatetime();
  static const int kCumulativeTaskUpdatetimeFieldNumber = 2;
  inline ::google::protobuf::int32 cumulative_task_updatetime() const;
  inline void set_cumulative_task_updatetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.task_daily_limit)
 private:
  inline void set_has_cumulative_task_count();
  inline void clear_has_cumulative_task_count();
  inline void set_has_cumulative_task_updatetime();
  inline void clear_has_cumulative_task_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cumulative_task_count_;
  ::google::protobuf::int32 cumulative_task_updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static task_daily_limit* default_instance_;
};
// -------------------------------------------------------------------

class newlife_count : public ::google::protobuf::Message {
 public:
  newlife_count();
  virtual ~newlife_count();

  newlife_count(const newlife_count& from);

  inline newlife_count& operator=(const newlife_count& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const newlife_count& default_instance();

  void Swap(newlife_count* other);

  // implements Message ----------------------------------------------

  newlife_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const newlife_count& from);
  void MergeFrom(const newlife_count& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 newlife_end_count = 1;
  inline bool has_newlife_end_count() const;
  inline void clear_newlife_end_count();
  static const int kNewlifeEndCountFieldNumber = 1;
  inline ::google::protobuf::int32 newlife_end_count() const;
  inline void set_newlife_end_count(::google::protobuf::int32 value);

  // required int32 newlife_bomb_count = 2;
  inline bool has_newlife_bomb_count() const;
  inline void clear_newlife_bomb_count();
  static const int kNewlifeBombCountFieldNumber = 2;
  inline ::google::protobuf::int32 newlife_bomb_count() const;
  inline void set_newlife_bomb_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.newlife_count)
 private:
  inline void set_has_newlife_end_count();
  inline void clear_has_newlife_end_count();
  inline void set_has_newlife_bomb_count();
  inline void clear_has_newlife_bomb_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 newlife_end_count_;
  ::google::protobuf::int32 newlife_bomb_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static newlife_count* default_instance_;
};
// -------------------------------------------------------------------

class lottery_protection : public ::google::protobuf::Message {
 public:
  lottery_protection();
  virtual ~lottery_protection();

  lottery_protection(const lottery_protection& from);

  inline lottery_protection& operator=(const lottery_protection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lottery_protection& default_instance();

  void Swap(lottery_protection* other);

  // implements Message ----------------------------------------------

  lottery_protection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lottery_protection& from);
  void MergeFrom(const lottery_protection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gem_no_rare_count = 1;
  inline bool has_gem_no_rare_count() const;
  inline void clear_gem_no_rare_count();
  static const int kGemNoRareCountFieldNumber = 1;
  inline ::google::protobuf::int32 gem_no_rare_count() const;
  inline void set_gem_no_rare_count(::google::protobuf::int32 value);

  // optional int32 starfruit_no_rare_count = 2;
  inline bool has_starfruit_no_rare_count() const;
  inline void clear_starfruit_no_rare_count();
  static const int kStarfruitNoRareCountFieldNumber = 2;
  inline ::google::protobuf::int32 starfruit_no_rare_count() const;
  inline void set_starfruit_no_rare_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.lottery_protection)
 private:
  inline void set_has_gem_no_rare_count();
  inline void clear_has_gem_no_rare_count();
  inline void set_has_starfruit_no_rare_count();
  inline void clear_has_starfruit_no_rare_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gem_no_rare_count_;
  ::google::protobuf::int32 starfruit_no_rare_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static lottery_protection* default_instance_;
};
// -------------------------------------------------------------------

class SafeRank : public ::google::protobuf::Message {
 public:
  SafeRank();
  virtual ~SafeRank();

  SafeRank(const SafeRank& from);

  inline SafeRank& operator=(const SafeRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeRank& default_instance();

  void Swap(SafeRank* other);

  // implements Message ----------------------------------------------

  SafeRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafeRank& from);
  void MergeFrom(const SafeRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FNF.EmRankSafe rank_safe = 1;
  inline bool has_rank_safe() const;
  inline void clear_rank_safe();
  static const int kRankSafeFieldNumber = 1;
  inline ::FNF::EmRankSafe rank_safe() const;
  inline void set_rank_safe(::FNF::EmRankSafe value);

  // required int32 rank_safe_end = 2;
  inline bool has_rank_safe_end() const;
  inline void clear_rank_safe_end();
  static const int kRankSafeEndFieldNumber = 2;
  inline ::google::protobuf::int32 rank_safe_end() const;
  inline void set_rank_safe_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.SafeRank)
 private:
  inline void set_has_rank_safe();
  inline void clear_has_rank_safe();
  inline void set_has_rank_safe_end();
  inline void clear_has_rank_safe_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rank_safe_;
  ::google::protobuf::int32 rank_safe_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static SafeRank* default_instance_;
};
// -------------------------------------------------------------------

class SafeGain : public ::google::protobuf::Message {
 public:
  SafeGain();
  virtual ~SafeGain();

  SafeGain(const SafeGain& from);

  inline SafeGain& operator=(const SafeGain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeGain& default_instance();

  void Swap(SafeGain* other);

  // implements Message ----------------------------------------------

  SafeGain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafeGain& from);
  void MergeFrom(const SafeGain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FNF.EmGainSafe gain_safe = 1;
  inline bool has_gain_safe() const;
  inline void clear_gain_safe();
  static const int kGainSafeFieldNumber = 1;
  inline ::FNF::EmGainSafe gain_safe() const;
  inline void set_gain_safe(::FNF::EmGainSafe value);

  // required int32 gain_safe_end = 2;
  inline bool has_gain_safe_end() const;
  inline void clear_gain_safe_end();
  static const int kGainSafeEndFieldNumber = 2;
  inline ::google::protobuf::int32 gain_safe_end() const;
  inline void set_gain_safe_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.SafeGain)
 private:
  inline void set_has_gain_safe();
  inline void clear_has_gain_safe();
  inline void set_has_gain_safe_end();
  inline void clear_has_gain_safe_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int gain_safe_;
  ::google::protobuf::int32 gain_safe_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static SafeGain* default_instance_;
};
// -------------------------------------------------------------------

class medal : public ::google::protobuf::Message {
 public:
  medal();
  virtual ~medal();

  medal(const medal& from);

  inline medal& operator=(const medal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const medal& default_instance();

  void Swap(medal* other);

  // implements Message ----------------------------------------------

  medal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const medal& from);
  void MergeFrom(const medal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int32 silver = 2;
  inline bool has_silver() const;
  inline void clear_silver();
  static const int kSilverFieldNumber = 2;
  inline ::google::protobuf::int32 silver() const;
  inline void set_silver(::google::protobuf::int32 value);

  // required int32 copper = 3;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 3;
  inline ::google::protobuf::int32 copper() const;
  inline void set_copper(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.medal)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_copper();
  inline void clear_has_copper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 silver_;
  ::google::protobuf::int32 copper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static medal* default_instance_;
};
// -------------------------------------------------------------------

class device_info : public ::google::protobuf::Message {
 public:
  device_info();
  virtual ~device_info();

  device_info(const device_info& from);

  inline device_info& operator=(const device_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const device_info& default_instance();

  void Swap(device_info* other);

  // implements Message ----------------------------------------------

  device_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const device_info& from);
  void MergeFrom(const device_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string system_os = 2;
  inline bool has_system_os() const;
  inline void clear_system_os();
  static const int kSystemOsFieldNumber = 2;
  inline const ::std::string& system_os() const;
  inline void set_system_os(const ::std::string& value);
  inline void set_system_os(const char* value);
  inline void set_system_os(const char* value, size_t size);
  inline ::std::string* mutable_system_os();
  inline ::std::string* release_system_os();
  inline void set_allocated_system_os(::std::string* system_os);

  // optional string device_name = 3;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 3;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  inline void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:FNF.device_info)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_system_os();
  inline void clear_has_system_os();
  inline void set_has_device_name();
  inline void clear_has_device_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* device_id_;
  ::std::string* system_os_;
  ::std::string* device_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static device_info* default_instance_;
};
// -------------------------------------------------------------------

class oauth_auth : public ::google::protobuf::Message {
 public:
  oauth_auth();
  virtual ~oauth_auth();

  oauth_auth(const oauth_auth& from);

  inline oauth_auth& operator=(const oauth_auth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const oauth_auth& default_instance();

  void Swap(oauth_auth* other);

  // implements Message ----------------------------------------------

  oauth_auth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const oauth_auth& from);
  void MergeFrom(const oauth_auth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string access_token = 1;
  inline bool has_access_token() const;
  inline void clear_access_token();
  static const int kAccessTokenFieldNumber = 1;
  inline const ::std::string& access_token() const;
  inline void set_access_token(const ::std::string& value);
  inline void set_access_token(const char* value);
  inline void set_access_token(const char* value, size_t size);
  inline ::std::string* mutable_access_token();
  inline ::std::string* release_access_token();
  inline void set_allocated_access_token(::std::string* access_token);

  // optional string refresh_token = 2;
  inline bool has_refresh_token() const;
  inline void clear_refresh_token();
  static const int kRefreshTokenFieldNumber = 2;
  inline const ::std::string& refresh_token() const;
  inline void set_refresh_token(const ::std::string& value);
  inline void set_refresh_token(const char* value);
  inline void set_refresh_token(const char* value, size_t size);
  inline ::std::string* mutable_refresh_token();
  inline ::std::string* release_refresh_token();
  inline void set_allocated_refresh_token(::std::string* refresh_token);

  // @@protoc_insertion_point(class_scope:FNF.oauth_auth)
 private:
  inline void set_has_access_token();
  inline void clear_has_access_token();
  inline void set_has_refresh_token();
  inline void clear_has_refresh_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* access_token_;
  ::std::string* refresh_token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static oauth_auth* default_instance_;
};
// -------------------------------------------------------------------

class ptnumber : public ::google::protobuf::Message {
 public:
  ptnumber();
  virtual ~ptnumber();

  ptnumber(const ptnumber& from);

  inline ptnumber& operator=(const ptnumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ptnumber& default_instance();

  void Swap(ptnumber* other);

  // implements Message ----------------------------------------------

  ptnumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ptnumber& from);
  void MergeFrom(const ptnumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 starfruit = 1;
  inline bool has_starfruit() const;
  inline void clear_starfruit();
  static const int kStarfruitFieldNumber = 1;
  inline ::google::protobuf::int32 starfruit() const;
  inline void set_starfruit(::google::protobuf::int32 value);

  // required int32 gem = 2;
  inline bool has_gem() const;
  inline void clear_gem();
  static const int kGemFieldNumber = 2;
  inline ::google::protobuf::int32 gem() const;
  inline void set_gem(::google::protobuf::int32 value);

  // required int32 energy = 3;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 3;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);

  // required int32 last_energy_time = 4;
  inline bool has_last_energy_time() const;
  inline void clear_last_energy_time();
  static const int kLastEnergyTimeFieldNumber = 4;
  inline ::google::protobuf::int32 last_energy_time() const;
  inline void set_last_energy_time(::google::protobuf::int32 value);

  // optional int32 gem_add = 5;
  inline bool has_gem_add() const;
  inline void clear_gem_add();
  static const int kGemAddFieldNumber = 5;
  inline ::google::protobuf::int32 gem_add() const;
  inline void set_gem_add(::google::protobuf::int32 value);

  // optional int32 gem_del = 6;
  inline bool has_gem_del() const;
  inline void clear_gem_del();
  static const int kGemDelFieldNumber = 6;
  inline ::google::protobuf::int32 gem_del() const;
  inline void set_gem_del(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.ptnumber)
 private:
  inline void set_has_starfruit();
  inline void clear_has_starfruit();
  inline void set_has_gem();
  inline void clear_has_gem();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_last_energy_time();
  inline void clear_has_last_energy_time();
  inline void set_has_gem_add();
  inline void clear_has_gem_add();
  inline void set_has_gem_del();
  inline void clear_has_gem_del();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 starfruit_;
  ::google::protobuf::int32 gem_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 last_energy_time_;
  ::google::protobuf::int32 gem_add_;
  ::google::protobuf::int32 gem_del_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static ptnumber* default_instance_;
};
// -------------------------------------------------------------------

class prop : public ::google::protobuf::Message {
 public:
  prop();
  virtual ~prop();

  prop(const prop& from);

  inline prop& operator=(const prop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const prop& default_instance();

  void Swap(prop* other);

  // implements Message ----------------------------------------------

  prop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const prop& from);
  void MergeFrom(const prop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 use_limit = 3;
  inline bool has_use_limit() const;
  inline void clear_use_limit();
  static const int kUseLimitFieldNumber = 3;
  inline ::google::protobuf::int32 use_limit() const;
  inline void set_use_limit(::google::protobuf::int32 value);

  // optional int32 time_limit = 4;
  inline bool has_time_limit() const;
  inline void clear_time_limit();
  static const int kTimeLimitFieldNumber = 4;
  inline ::google::protobuf::int32 time_limit() const;
  inline void set_time_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.prop)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_use_limit();
  inline void clear_has_use_limit();
  inline void set_has_time_limit();
  inline void clear_has_time_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 use_limit_;
  ::google::protobuf::int32 time_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static prop* default_instance_;
};
// -------------------------------------------------------------------

class roll_info : public ::google::protobuf::Message {
 public:
  roll_info();
  virtual ~roll_info();

  roll_info(const roll_info& from);

  inline roll_info& operator=(const roll_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roll_info& default_instance();

  void Swap(roll_info* other);

  // implements Message ----------------------------------------------

  roll_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roll_info& from);
  void MergeFrom(const roll_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .FNF.EM_ROLL_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FNF::EM_ROLL_TYPE type() const;
  inline void set_type(::FNF::EM_ROLL_TYPE value);

  // required int32 real_no = 3;
  inline bool has_real_no() const;
  inline void clear_real_no();
  static const int kRealNoFieldNumber = 3;
  inline ::google::protobuf::int32 real_no() const;
  inline void set_real_no(::google::protobuf::int32 value);

  // required .FNF.EM_ROLL_STATUS status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::FNF::EM_ROLL_STATUS status() const;
  inline void set_status(::FNF::EM_ROLL_STATUS value);

  // @@protoc_insertion_point(class_scope:FNF.roll_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_real_no();
  inline void clear_has_real_no();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::int32 real_no_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static roll_info* default_instance_;
};
// -------------------------------------------------------------------

class skin : public ::google::protobuf::Message {
 public:
  skin();
  virtual ~skin();

  skin(const skin& from);

  inline skin& operator=(const skin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skin& default_instance();

  void Swap(skin* other);

  // implements Message ----------------------------------------------

  skin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skin& from);
  void MergeFrom(const skin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 got_time = 2;
  inline bool has_got_time() const;
  inline void clear_got_time();
  static const int kGotTimeFieldNumber = 2;
  inline ::google::protobuf::int32 got_time() const;
  inline void set_got_time(::google::protobuf::int32 value);

  // required int32 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int32 expire_time() const;
  inline void set_expire_time(::google::protobuf::int32 value);

  // optional int32 is_active = 4;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 4;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.skin)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_got_time();
  inline void clear_has_got_time();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_is_active();
  inline void clear_has_is_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 got_time_;
  ::google::protobuf::int32 expire_time_;
  ::google::protobuf::int32 is_active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static skin* default_instance_;
};
// -------------------------------------------------------------------

class score : public ::google::protobuf::Message {
 public:
  score();
  virtual ~score();

  score(const score& from);

  inline score& operator=(const score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const score& default_instance();

  void Swap(score* other);

  // implements Message ----------------------------------------------

  score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const score& from);
  void MergeFrom(const score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 week_top_score = 1;
  inline bool has_week_top_score() const;
  inline void clear_week_top_score();
  static const int kWeekTopScoreFieldNumber = 1;
  inline ::google::protobuf::int32 week_top_score() const;
  inline void set_week_top_score(::google::protobuf::int32 value);

  // required int32 week_top_score_time = 2;
  inline bool has_week_top_score_time() const;
  inline void clear_week_top_score_time();
  static const int kWeekTopScoreTimeFieldNumber = 2;
  inline ::google::protobuf::int32 week_top_score_time() const;
  inline void set_week_top_score_time(::google::protobuf::int32 value);

  // required int32 history_top_score = 3;
  inline bool has_history_top_score() const;
  inline void clear_history_top_score();
  static const int kHistoryTopScoreFieldNumber = 3;
  inline ::google::protobuf::int32 history_top_score() const;
  inline void set_history_top_score(::google::protobuf::int32 value);

  // required int32 history_top_score_time = 4;
  inline bool has_history_top_score_time() const;
  inline void clear_history_top_score_time();
  static const int kHistoryTopScoreTimeFieldNumber = 4;
  inline ::google::protobuf::int32 history_top_score_time() const;
  inline void set_history_top_score_time(::google::protobuf::int32 value);

  // optional int32 lastweek_top_score = 5;
  inline bool has_lastweek_top_score() const;
  inline void clear_lastweek_top_score();
  static const int kLastweekTopScoreFieldNumber = 5;
  inline ::google::protobuf::int32 lastweek_top_score() const;
  inline void set_lastweek_top_score(::google::protobuf::int32 value);

  // optional int32 lastweek_top_score_time = 6;
  inline bool has_lastweek_top_score_time() const;
  inline void clear_lastweek_top_score_time();
  static const int kLastweekTopScoreTimeFieldNumber = 6;
  inline ::google::protobuf::int32 lastweek_top_score_time() const;
  inline void set_lastweek_top_score_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.score)
 private:
  inline void set_has_week_top_score();
  inline void clear_has_week_top_score();
  inline void set_has_week_top_score_time();
  inline void clear_has_week_top_score_time();
  inline void set_has_history_top_score();
  inline void clear_has_history_top_score();
  inline void set_has_history_top_score_time();
  inline void clear_has_history_top_score_time();
  inline void set_has_lastweek_top_score();
  inline void clear_has_lastweek_top_score();
  inline void set_has_lastweek_top_score_time();
  inline void clear_has_lastweek_top_score_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 week_top_score_;
  ::google::protobuf::int32 week_top_score_time_;
  ::google::protobuf::int32 history_top_score_;
  ::google::protobuf::int32 history_top_score_time_;
  ::google::protobuf::int32 lastweek_top_score_;
  ::google::protobuf::int32 lastweek_top_score_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static score* default_instance_;
};
// -------------------------------------------------------------------

class blade : public ::google::protobuf::Message {
 public:
  blade();
  virtual ~blade();

  blade(const blade& from);

  inline blade& operator=(const blade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blade& default_instance();

  void Swap(blade* other);

  // implements Message ----------------------------------------------

  blade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blade& from);
  void MergeFrom(const blade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 got_time = 3;
  inline bool has_got_time() const;
  inline void clear_got_time();
  static const int kGotTimeFieldNumber = 3;
  inline ::google::protobuf::int32 got_time() const;
  inline void set_got_time(::google::protobuf::int32 value);

  // optional int32 is_active = 4;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 4;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.blade)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_got_time();
  inline void clear_has_got_time();
  inline void set_has_is_active();
  inline void clear_has_is_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 got_time_;
  ::google::protobuf::int32 is_active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static blade* default_instance_;
};
// -------------------------------------------------------------------

class ninjia : public ::google::protobuf::Message {
 public:
  ninjia();
  virtual ~ninjia();

  ninjia(const ninjia& from);

  inline ninjia& operator=(const ninjia& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ninjia& default_instance();

  void Swap(ninjia* other);

  // implements Message ----------------------------------------------

  ninjia* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ninjia& from);
  void MergeFrom(const ninjia& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 got_time = 3;
  inline bool has_got_time() const;
  inline void clear_got_time();
  static const int kGotTimeFieldNumber = 3;
  inline ::google::protobuf::int32 got_time() const;
  inline void set_got_time(::google::protobuf::int32 value);

  // optional int32 is_active = 4;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 4;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.ninjia)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_got_time();
  inline void clear_has_got_time();
  inline void set_has_is_active();
  inline void clear_has_is_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 got_time_;
  ::google::protobuf::int32 is_active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static ninjia* default_instance_;
};
// -------------------------------------------------------------------

class pet : public ::google::protobuf::Message {
 public:
  pet();
  virtual ~pet();

  pet(const pet& from);

  inline pet& operator=(const pet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet& default_instance();

  void Swap(pet* other);

  // implements Message ----------------------------------------------

  pet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet& from);
  void MergeFrom(const pet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 feed_time = 5;
  inline bool has_feed_time() const;
  inline void clear_feed_time();
  static const int kFeedTimeFieldNumber = 5;
  inline ::google::protobuf::int32 feed_time() const;
  inline void set_feed_time(::google::protobuf::int32 value);

  // optional int32 gift_got_time = 6;
  inline bool has_gift_got_time() const;
  inline void clear_gift_got_time();
  static const int kGiftGotTimeFieldNumber = 6;
  inline ::google::protobuf::int32 gift_got_time() const;
  inline void set_gift_got_time(::google::protobuf::int32 value);

  // optional int32 is_active = 7;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 7;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.pet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_feed_time();
  inline void clear_has_feed_time();
  inline void set_has_gift_got_time();
  inline void clear_has_gift_got_time();
  inline void set_has_is_active();
  inline void clear_has_is_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 feed_time_;
  ::google::protobuf::int32 gift_got_time_;
  ::google::protobuf::int32 is_active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static pet* default_instance_;
};
// -------------------------------------------------------------------

class achievement : public ::google::protobuf::Message {
 public:
  achievement();
  virtual ~achievement();

  achievement(const achievement& from);

  inline achievement& operator=(const achievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const achievement& default_instance();

  void Swap(achievement* other);

  // implements Message ----------------------------------------------

  achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const achievement& from);
  void MergeFrom(const achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.achievement)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static achievement* default_instance_;
};
// -------------------------------------------------------------------

class task : public ::google::protobuf::Message {
 public:
  task();
  virtual ~task();

  task(const task& from);

  inline task& operator=(const task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const task& default_instance();

  void Swap(task* other);

  // implements Message ----------------------------------------------

  task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const task& from);
  void MergeFrom(const task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required .FNF.EMTaskStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::FNF::EMTaskStatus status() const;
  inline void set_status(::FNF::EMTaskStatus value);

  // required int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // required int32 order_id = 7;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 7;
  inline ::google::protobuf::int32 order_id() const;
  inline void set_order_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_order_id();
  inline void clear_has_order_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 lv_;
  int status_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 order_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static task* default_instance_;
};
// -------------------------------------------------------------------

class activity : public ::google::protobuf::Message {
 public:
  activity();
  virtual ~activity();

  activity(const activity& from);

  inline activity& operator=(const activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const activity& default_instance();

  void Swap(activity* other);

  // implements Message ----------------------------------------------

  activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const activity& from);
  void MergeFrom(const activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .FNF.EMActivityType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FNF::EMActivityType type() const;
  inline void set_type(::FNF::EMActivityType value);

  // optional int32 condition = 3;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 3;
  inline ::google::protobuf::int32 condition() const;
  inline void set_condition(::google::protobuf::int32 value);

  // optional int32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::int32 update_time() const;
  inline void set_update_time(::google::protobuf::int32 value);

  // optional .FNF.EMActivityGiftStatus gift_status = 5;
  inline bool has_gift_status() const;
  inline void clear_gift_status();
  static const int kGiftStatusFieldNumber = 5;
  inline ::FNF::EMActivityGiftStatus gift_status() const;
  inline void set_gift_status(::FNF::EMActivityGiftStatus value);

  // @@protoc_insertion_point(class_scope:FNF.activity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_gift_status();
  inline void clear_has_gift_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::int32 condition_;
  ::google::protobuf::int32 update_time_;
  int gift_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static activity* default_instance_;
};
// -------------------------------------------------------------------

class signin : public ::google::protobuf::Message {
 public:
  signin();
  virtual ~signin();

  signin(const signin& from);

  inline signin& operator=(const signin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const signin& default_instance();

  void Swap(signin* other);

  // implements Message ----------------------------------------------

  signin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const signin& from);
  void MergeFrom(const signin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 resign_count = 3;
  inline bool has_resign_count() const;
  inline void clear_resign_count();
  static const int kResignCountFieldNumber = 3;
  inline ::google::protobuf::int32 resign_count() const;
  inline void set_resign_count(::google::protobuf::int32 value);

  // required int32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::int32 update_time() const;
  inline void set_update_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.signin)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_resign_count();
  inline void clear_has_resign_count();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 resign_count_;
  ::google::protobuf::int32 update_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static signin* default_instance_;
};
// -------------------------------------------------------------------

class numbers : public ::google::protobuf::Message {
 public:
  numbers();
  virtual ~numbers();

  numbers(const numbers& from);

  inline numbers& operator=(const numbers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const numbers& default_instance();

  void Swap(numbers* other);

  // implements Message ----------------------------------------------

  numbers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const numbers& from);
  void MergeFrom(const numbers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mail_count = 1;
  inline bool has_mail_count() const;
  inline void clear_mail_count();
  static const int kMailCountFieldNumber = 1;
  inline ::google::protobuf::int32 mail_count() const;
  inline void set_mail_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FNF.numbers)
 private:
  inline void set_has_mail_count();
  inline void clear_has_mail_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mail_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fnf_5fuser_2eproto();
  friend void protobuf_AssignDesc_fnf_5fuser_2eproto();
  friend void protobuf_ShutdownFile_fnf_5fuser_2eproto();

  void InitAsDefaultInstance();
  static numbers* default_instance_;
};
// ===================================================================


// ===================================================================

// wallet

// required int32 gem = 1;
inline bool wallet::has_gem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wallet::set_has_gem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wallet::clear_has_gem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wallet::clear_gem() {
  gem_ = 0;
  clear_has_gem();
}
inline ::google::protobuf::int32 wallet::gem() const {
  return gem_;
}
inline void wallet::set_gem(::google::protobuf::int32 value) {
  set_has_gem();
  gem_ = value;
}

// optional int32 gem_add = 2;
inline bool wallet::has_gem_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wallet::set_has_gem_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wallet::clear_has_gem_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wallet::clear_gem_add() {
  gem_add_ = 0;
  clear_has_gem_add();
}
inline ::google::protobuf::int32 wallet::gem_add() const {
  return gem_add_;
}
inline void wallet::set_gem_add(::google::protobuf::int32 value) {
  set_has_gem_add();
  gem_add_ = value;
}

// optional int32 gem_del = 3;
inline bool wallet::has_gem_del() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wallet::set_has_gem_del() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wallet::clear_has_gem_del() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wallet::clear_gem_del() {
  gem_del_ = 0;
  clear_has_gem_del();
}
inline ::google::protobuf::int32 wallet::gem_del() const {
  return gem_del_;
}
inline void wallet::set_gem_del(::google::protobuf::int32 value) {
  set_has_gem_del();
  gem_del_ = value;
}

// optional int32 update_time = 4;
inline bool wallet::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wallet::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wallet::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wallet::clear_update_time() {
  update_time_ = 0;
  clear_has_update_time();
}
inline ::google::protobuf::int32 wallet::update_time() const {
  return update_time_;
}
inline void wallet::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
}

// -------------------------------------------------------------------

// profile

// required int64 uid = 1;
inline bool profile::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void profile::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void profile::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void profile::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 profile::uid() const {
  return uid_;
}
inline void profile::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// required int32 mail_switch = 4;
inline bool profile::has_mail_switch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void profile::set_has_mail_switch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void profile::clear_has_mail_switch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void profile::clear_mail_switch() {
  mail_switch_ = 0;
  clear_has_mail_switch();
}
inline ::google::protobuf::int32 profile::mail_switch() const {
  return mail_switch_;
}
inline void profile::set_mail_switch(::google::protobuf::int32 value) {
  set_has_mail_switch();
  mail_switch_ = value;
}

// optional int32 vip_lv = 5;
inline bool profile::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void profile::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void profile::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void profile::clear_vip_lv() {
  vip_lv_ = 0;
  clear_has_vip_lv();
}
inline ::google::protobuf::int32 profile::vip_lv() const {
  return vip_lv_;
}
inline void profile::set_vip_lv(::google::protobuf::int32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// optional .FNF.score score = 6;
inline bool profile::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void profile::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void profile::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void profile::clear_score() {
  if (score_ != NULL) score_->::FNF::score::Clear();
  clear_has_score();
}
inline const ::FNF::score& profile::score() const {
  return score_ != NULL ? *score_ : *default_instance_->score_;
}
inline ::FNF::score* profile::mutable_score() {
  set_has_score();
  if (score_ == NULL) score_ = new ::FNF::score;
  return score_;
}
inline ::FNF::score* profile::release_score() {
  clear_has_score();
  ::FNF::score* temp = score_;
  score_ = NULL;
  return temp;
}
inline void profile::set_allocated_score(::FNF::score* score) {
  delete score_;
  score_ = score;
  if (score) {
    set_has_score();
  } else {
    clear_has_score();
  }
}

// optional .FNF.ptnumber ios_number = 7;
inline bool profile::has_ios_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void profile::set_has_ios_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void profile::clear_has_ios_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void profile::clear_ios_number() {
  if (ios_number_ != NULL) ios_number_->::FNF::ptnumber::Clear();
  clear_has_ios_number();
}
inline const ::FNF::ptnumber& profile::ios_number() const {
  return ios_number_ != NULL ? *ios_number_ : *default_instance_->ios_number_;
}
inline ::FNF::ptnumber* profile::mutable_ios_number() {
  set_has_ios_number();
  if (ios_number_ == NULL) ios_number_ = new ::FNF::ptnumber;
  return ios_number_;
}
inline ::FNF::ptnumber* profile::release_ios_number() {
  clear_has_ios_number();
  ::FNF::ptnumber* temp = ios_number_;
  ios_number_ = NULL;
  return temp;
}
inline void profile::set_allocated_ios_number(::FNF::ptnumber* ios_number) {
  delete ios_number_;
  ios_number_ = ios_number;
  if (ios_number) {
    set_has_ios_number();
  } else {
    clear_has_ios_number();
  }
}

// optional .FNF.ptnumber and_number = 8;
inline bool profile::has_and_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void profile::set_has_and_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void profile::clear_has_and_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void profile::clear_and_number() {
  if (and_number_ != NULL) and_number_->::FNF::ptnumber::Clear();
  clear_has_and_number();
}
inline const ::FNF::ptnumber& profile::and_number() const {
  return and_number_ != NULL ? *and_number_ : *default_instance_->and_number_;
}
inline ::FNF::ptnumber* profile::mutable_and_number() {
  set_has_and_number();
  if (and_number_ == NULL) and_number_ = new ::FNF::ptnumber;
  return and_number_;
}
inline ::FNF::ptnumber* profile::release_and_number() {
  clear_has_and_number();
  ::FNF::ptnumber* temp = and_number_;
  and_number_ = NULL;
  return temp;
}
inline void profile::set_allocated_and_number(::FNF::ptnumber* and_number) {
  delete and_number_;
  and_number_ = and_number;
  if (and_number) {
    set_has_and_number();
  } else {
    clear_has_and_number();
  }
}

// required int32 reg_time = 9;
inline bool profile::has_reg_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void profile::set_has_reg_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void profile::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void profile::clear_reg_time() {
  reg_time_ = 0;
  clear_has_reg_time();
}
inline ::google::protobuf::int32 profile::reg_time() const {
  return reg_time_;
}
inline void profile::set_reg_time(::google::protobuf::int32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required int32 last_active_time = 10;
inline bool profile::has_last_active_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void profile::set_has_last_active_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void profile::clear_has_last_active_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void profile::clear_last_active_time() {
  last_active_time_ = 0;
  clear_has_last_active_time();
}
inline ::google::protobuf::int32 profile::last_active_time() const {
  return last_active_time_;
}
inline void profile::set_last_active_time(::google::protobuf::int32 value) {
  set_has_last_active_time();
  last_active_time_ = value;
}

// required int32 cont_active_days = 11;
inline bool profile::has_cont_active_days() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void profile::set_has_cont_active_days() {
  _has_bits_[0] |= 0x00000100u;
}
inline void profile::clear_has_cont_active_days() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void profile::clear_cont_active_days() {
  cont_active_days_ = 0;
  clear_has_cont_active_days();
}
inline ::google::protobuf::int32 profile::cont_active_days() const {
  return cont_active_days_;
}
inline void profile::set_cont_active_days(::google::protobuf::int32 value) {
  set_has_cont_active_days();
  cont_active_days_ = value;
}

// optional int32 cont_active_giftmask = 12;
inline bool profile::has_cont_active_giftmask() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void profile::set_has_cont_active_giftmask() {
  _has_bits_[0] |= 0x00000200u;
}
inline void profile::clear_has_cont_active_giftmask() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void profile::clear_cont_active_giftmask() {
  cont_active_giftmask_ = 0;
  clear_has_cont_active_giftmask();
}
inline ::google::protobuf::int32 profile::cont_active_giftmask() const {
  return cont_active_giftmask_;
}
inline void profile::set_cont_active_giftmask(::google::protobuf::int32 value) {
  set_has_cont_active_giftmask();
  cont_active_giftmask_ = value;
}

// optional int32 last_play_time = 13;
inline bool profile::has_last_play_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void profile::set_has_last_play_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void profile::clear_has_last_play_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void profile::clear_last_play_time() {
  last_play_time_ = 0;
  clear_has_last_play_time();
}
inline ::google::protobuf::int32 profile::last_play_time() const {
  return last_play_time_;
}
inline void profile::set_last_play_time(::google::protobuf::int32 value) {
  set_has_last_play_time();
  last_play_time_ = value;
}

// required string nickname = 14;
inline bool profile::has_nickname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void profile::set_has_nickname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void profile::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void profile::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& profile::nickname() const {
  return *nickname_;
}
inline void profile::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void profile::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void profile::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* profile::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* profile::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void profile::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string avatar = 15;
inline bool profile::has_avatar() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void profile::set_has_avatar() {
  _has_bits_[0] |= 0x00001000u;
}
inline void profile::clear_has_avatar() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void profile::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& profile::avatar() const {
  return *avatar_;
}
inline void profile::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void profile::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void profile::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* profile::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* profile::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void profile::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender = 16;
inline bool profile::has_gender() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void profile::set_has_gender() {
  _has_bits_[0] |= 0x00002000u;
}
inline void profile::clear_has_gender() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void profile::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 profile::gender() const {
  return gender_;
}
inline void profile::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
}

// required string openid = 17;
inline bool profile::has_openid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void profile::set_has_openid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void profile::clear_has_openid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void profile::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& profile::openid() const {
  return *openid_;
}
inline void profile::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void profile::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void profile::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* profile::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* profile::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void profile::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .FNF.oauth_auth oauth_auth = 19;
inline bool profile::has_oauth_auth() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void profile::set_has_oauth_auth() {
  _has_bits_[0] |= 0x00008000u;
}
inline void profile::clear_has_oauth_auth() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void profile::clear_oauth_auth() {
  if (oauth_auth_ != NULL) oauth_auth_->::FNF::oauth_auth::Clear();
  clear_has_oauth_auth();
}
inline const ::FNF::oauth_auth& profile::oauth_auth() const {
  return oauth_auth_ != NULL ? *oauth_auth_ : *default_instance_->oauth_auth_;
}
inline ::FNF::oauth_auth* profile::mutable_oauth_auth() {
  set_has_oauth_auth();
  if (oauth_auth_ == NULL) oauth_auth_ = new ::FNF::oauth_auth;
  return oauth_auth_;
}
inline ::FNF::oauth_auth* profile::release_oauth_auth() {
  clear_has_oauth_auth();
  ::FNF::oauth_auth* temp = oauth_auth_;
  oauth_auth_ = NULL;
  return temp;
}
inline void profile::set_allocated_oauth_auth(::FNF::oauth_auth* oauth_auth) {
  delete oauth_auth_;
  oauth_auth_ = oauth_auth;
  if (oauth_auth) {
    set_has_oauth_auth();
  } else {
    clear_has_oauth_auth();
  }
}

// optional .FNF.task single_play_task = 20;
inline bool profile::has_single_play_task() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void profile::set_has_single_play_task() {
  _has_bits_[0] |= 0x00010000u;
}
inline void profile::clear_has_single_play_task() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void profile::clear_single_play_task() {
  if (single_play_task_ != NULL) single_play_task_->::FNF::task::Clear();
  clear_has_single_play_task();
}
inline const ::FNF::task& profile::single_play_task() const {
  return single_play_task_ != NULL ? *single_play_task_ : *default_instance_->single_play_task_;
}
inline ::FNF::task* profile::mutable_single_play_task() {
  set_has_single_play_task();
  if (single_play_task_ == NULL) single_play_task_ = new ::FNF::task;
  return single_play_task_;
}
inline ::FNF::task* profile::release_single_play_task() {
  clear_has_single_play_task();
  ::FNF::task* temp = single_play_task_;
  single_play_task_ = NULL;
  return temp;
}
inline void profile::set_allocated_single_play_task(::FNF::task* single_play_task) {
  delete single_play_task_;
  single_play_task_ = single_play_task;
  if (single_play_task) {
    set_has_single_play_task();
  } else {
    clear_has_single_play_task();
  }
}

// optional .FNF.medal medal = 21;
inline bool profile::has_medal() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void profile::set_has_medal() {
  _has_bits_[0] |= 0x00020000u;
}
inline void profile::clear_has_medal() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void profile::clear_medal() {
  if (medal_ != NULL) medal_->::FNF::medal::Clear();
  clear_has_medal();
}
inline const ::FNF::medal& profile::medal() const {
  return medal_ != NULL ? *medal_ : *default_instance_->medal_;
}
inline ::FNF::medal* profile::mutable_medal() {
  set_has_medal();
  if (medal_ == NULL) medal_ = new ::FNF::medal;
  return medal_;
}
inline ::FNF::medal* profile::release_medal() {
  clear_has_medal();
  ::FNF::medal* temp = medal_;
  medal_ = NULL;
  return temp;
}
inline void profile::set_allocated_medal(::FNF::medal* medal) {
  delete medal_;
  medal_ = medal;
  if (medal) {
    set_has_medal();
  } else {
    clear_has_medal();
  }
}

// optional int32 medal_time = 22;
inline bool profile::has_medal_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void profile::set_has_medal_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void profile::clear_has_medal_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void profile::clear_medal_time() {
  medal_time_ = 0;
  clear_has_medal_time();
}
inline ::google::protobuf::int32 profile::medal_time() const {
  return medal_time_;
}
inline void profile::set_medal_time(::google::protobuf::int32 value) {
  set_has_medal_time();
  medal_time_ = value;
}

// optional int32 curr_play_dropid = 23;
inline bool profile::has_curr_play_dropid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void profile::set_has_curr_play_dropid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void profile::clear_has_curr_play_dropid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void profile::clear_curr_play_dropid() {
  curr_play_dropid_ = 0;
  clear_has_curr_play_dropid();
}
inline ::google::protobuf::int32 profile::curr_play_dropid() const {
  return curr_play_dropid_;
}
inline void profile::set_curr_play_dropid(::google::protobuf::int32 value) {
  set_has_curr_play_dropid();
  curr_play_dropid_ = value;
}

// optional int32 friend_list_succ_time = 24;
inline bool profile::has_friend_list_succ_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void profile::set_has_friend_list_succ_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void profile::clear_has_friend_list_succ_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void profile::clear_friend_list_succ_time() {
  friend_list_succ_time_ = 0;
  clear_has_friend_list_succ_time();
}
inline ::google::protobuf::int32 profile::friend_list_succ_time() const {
  return friend_list_succ_time_;
}
inline void profile::set_friend_list_succ_time(::google::protobuf::int32 value) {
  set_has_friend_list_succ_time();
  friend_list_succ_time_ = value;
}

// optional int32 game_count = 25;
inline bool profile::has_game_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void profile::set_has_game_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void profile::clear_has_game_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void profile::clear_game_count() {
  game_count_ = 0;
  clear_has_game_count();
}
inline ::google::protobuf::int32 profile::game_count() const {
  return game_count_;
}
inline void profile::set_game_count(::google::protobuf::int32 value) {
  set_has_game_count();
  game_count_ = value;
}

// optional int32 friend_count = 26;
inline bool profile::has_friend_count() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void profile::set_has_friend_count() {
  _has_bits_[0] |= 0x00400000u;
}
inline void profile::clear_has_friend_count() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void profile::clear_friend_count() {
  friend_count_ = 0;
  clear_has_friend_count();
}
inline ::google::protobuf::int32 profile::friend_count() const {
  return friend_count_;
}
inline void profile::set_friend_count(::google::protobuf::int32 value) {
  set_has_friend_count();
  friend_count_ = value;
}

// optional int32 friend_count_giftmask = 27;
inline bool profile::has_friend_count_giftmask() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void profile::set_has_friend_count_giftmask() {
  _has_bits_[0] |= 0x00800000u;
}
inline void profile::clear_has_friend_count_giftmask() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void profile::clear_friend_count_giftmask() {
  friend_count_giftmask_ = 0;
  clear_has_friend_count_giftmask();
}
inline ::google::protobuf::int32 profile::friend_count_giftmask() const {
  return friend_count_giftmask_;
}
inline void profile::set_friend_count_giftmask(::google::protobuf::int32 value) {
  set_has_friend_count_giftmask();
  friend_count_giftmask_ = value;
}

// optional int32 send_energy = 28;
inline bool profile::has_send_energy() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void profile::set_has_send_energy() {
  _has_bits_[0] |= 0x01000000u;
}
inline void profile::clear_has_send_energy() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void profile::clear_send_energy() {
  send_energy_ = 0;
  clear_has_send_energy();
}
inline ::google::protobuf::int32 profile::send_energy() const {
  return send_energy_;
}
inline void profile::set_send_energy(::google::protobuf::int32 value) {
  set_has_send_energy();
  send_energy_ = value;
}

// optional .FNF.signin signin = 29;
inline bool profile::has_signin() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void profile::set_has_signin() {
  _has_bits_[0] |= 0x02000000u;
}
inline void profile::clear_has_signin() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void profile::clear_signin() {
  if (signin_ != NULL) signin_->::FNF::signin::Clear();
  clear_has_signin();
}
inline const ::FNF::signin& profile::signin() const {
  return signin_ != NULL ? *signin_ : *default_instance_->signin_;
}
inline ::FNF::signin* profile::mutable_signin() {
  set_has_signin();
  if (signin_ == NULL) signin_ = new ::FNF::signin;
  return signin_;
}
inline ::FNF::signin* profile::release_signin() {
  clear_has_signin();
  ::FNF::signin* temp = signin_;
  signin_ = NULL;
  return temp;
}
inline void profile::set_allocated_signin(::FNF::signin* signin) {
  delete signin_;
  signin_ = signin;
  if (signin) {
    set_has_signin();
  } else {
    clear_has_signin();
  }
}

// optional int32 today_total_starfruit = 30;
inline bool profile::has_today_total_starfruit() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void profile::set_has_today_total_starfruit() {
  _has_bits_[0] |= 0x04000000u;
}
inline void profile::clear_has_today_total_starfruit() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void profile::clear_today_total_starfruit() {
  today_total_starfruit_ = 0;
  clear_has_today_total_starfruit();
}
inline ::google::protobuf::int32 profile::today_total_starfruit() const {
  return today_total_starfruit_;
}
inline void profile::set_today_total_starfruit(::google::protobuf::int32 value) {
  set_has_today_total_starfruit();
  today_total_starfruit_ = value;
}

// optional .FNF.SafeRank safe_rank = 31;
inline bool profile::has_safe_rank() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void profile::set_has_safe_rank() {
  _has_bits_[0] |= 0x08000000u;
}
inline void profile::clear_has_safe_rank() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void profile::clear_safe_rank() {
  if (safe_rank_ != NULL) safe_rank_->::FNF::SafeRank::Clear();
  clear_has_safe_rank();
}
inline const ::FNF::SafeRank& profile::safe_rank() const {
  return safe_rank_ != NULL ? *safe_rank_ : *default_instance_->safe_rank_;
}
inline ::FNF::SafeRank* profile::mutable_safe_rank() {
  set_has_safe_rank();
  if (safe_rank_ == NULL) safe_rank_ = new ::FNF::SafeRank;
  return safe_rank_;
}
inline ::FNF::SafeRank* profile::release_safe_rank() {
  clear_has_safe_rank();
  ::FNF::SafeRank* temp = safe_rank_;
  safe_rank_ = NULL;
  return temp;
}
inline void profile::set_allocated_safe_rank(::FNF::SafeRank* safe_rank) {
  delete safe_rank_;
  safe_rank_ = safe_rank;
  if (safe_rank) {
    set_has_safe_rank();
  } else {
    clear_has_safe_rank();
  }
}

// optional .FNF.SafeGain safe_gain = 32;
inline bool profile::has_safe_gain() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void profile::set_has_safe_gain() {
  _has_bits_[0] |= 0x10000000u;
}
inline void profile::clear_has_safe_gain() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void profile::clear_safe_gain() {
  if (safe_gain_ != NULL) safe_gain_->::FNF::SafeGain::Clear();
  clear_has_safe_gain();
}
inline const ::FNF::SafeGain& profile::safe_gain() const {
  return safe_gain_ != NULL ? *safe_gain_ : *default_instance_->safe_gain_;
}
inline ::FNF::SafeGain* profile::mutable_safe_gain() {
  set_has_safe_gain();
  if (safe_gain_ == NULL) safe_gain_ = new ::FNF::SafeGain;
  return safe_gain_;
}
inline ::FNF::SafeGain* profile::release_safe_gain() {
  clear_has_safe_gain();
  ::FNF::SafeGain* temp = safe_gain_;
  safe_gain_ = NULL;
  return temp;
}
inline void profile::set_allocated_safe_gain(::FNF::SafeGain* safe_gain) {
  delete safe_gain_;
  safe_gain_ = safe_gain;
  if (safe_gain) {
    set_has_safe_gain();
  } else {
    clear_has_safe_gain();
  }
}

// optional .FNF.newlife_count newlife_count = 33;
inline bool profile::has_newlife_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void profile::set_has_newlife_count() {
  _has_bits_[0] |= 0x20000000u;
}
inline void profile::clear_has_newlife_count() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void profile::clear_newlife_count() {
  if (newlife_count_ != NULL) newlife_count_->::FNF::newlife_count::Clear();
  clear_has_newlife_count();
}
inline const ::FNF::newlife_count& profile::newlife_count() const {
  return newlife_count_ != NULL ? *newlife_count_ : *default_instance_->newlife_count_;
}
inline ::FNF::newlife_count* profile::mutable_newlife_count() {
  set_has_newlife_count();
  if (newlife_count_ == NULL) newlife_count_ = new ::FNF::newlife_count;
  return newlife_count_;
}
inline ::FNF::newlife_count* profile::release_newlife_count() {
  clear_has_newlife_count();
  ::FNF::newlife_count* temp = newlife_count_;
  newlife_count_ = NULL;
  return temp;
}
inline void profile::set_allocated_newlife_count(::FNF::newlife_count* newlife_count) {
  delete newlife_count_;
  newlife_count_ = newlife_count;
  if (newlife_count) {
    set_has_newlife_count();
  } else {
    clear_has_newlife_count();
  }
}

// optional .FNF.lottery_protection lottery_protection = 34;
inline bool profile::has_lottery_protection() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void profile::set_has_lottery_protection() {
  _has_bits_[0] |= 0x40000000u;
}
inline void profile::clear_has_lottery_protection() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void profile::clear_lottery_protection() {
  if (lottery_protection_ != NULL) lottery_protection_->::FNF::lottery_protection::Clear();
  clear_has_lottery_protection();
}
inline const ::FNF::lottery_protection& profile::lottery_protection() const {
  return lottery_protection_ != NULL ? *lottery_protection_ : *default_instance_->lottery_protection_;
}
inline ::FNF::lottery_protection* profile::mutable_lottery_protection() {
  set_has_lottery_protection();
  if (lottery_protection_ == NULL) lottery_protection_ = new ::FNF::lottery_protection;
  return lottery_protection_;
}
inline ::FNF::lottery_protection* profile::release_lottery_protection() {
  clear_has_lottery_protection();
  ::FNF::lottery_protection* temp = lottery_protection_;
  lottery_protection_ = NULL;
  return temp;
}
inline void profile::set_allocated_lottery_protection(::FNF::lottery_protection* lottery_protection) {
  delete lottery_protection_;
  lottery_protection_ = lottery_protection;
  if (lottery_protection) {
    set_has_lottery_protection();
  } else {
    clear_has_lottery_protection();
  }
}

// optional int64 tips_bit = 35;
inline bool profile::has_tips_bit() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void profile::set_has_tips_bit() {
  _has_bits_[0] |= 0x80000000u;
}
inline void profile::clear_has_tips_bit() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void profile::clear_tips_bit() {
  tips_bit_ = GOOGLE_LONGLONG(0);
  clear_has_tips_bit();
}
inline ::google::protobuf::int64 profile::tips_bit() const {
  return tips_bit_;
}
inline void profile::set_tips_bit(::google::protobuf::int64 value) {
  set_has_tips_bit();
  tips_bit_ = value;
}

// optional int32 challenge_count = 36;
inline bool profile::has_challenge_count() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void profile::set_has_challenge_count() {
  _has_bits_[1] |= 0x00000001u;
}
inline void profile::clear_has_challenge_count() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void profile::clear_challenge_count() {
  challenge_count_ = 0;
  clear_has_challenge_count();
}
inline ::google::protobuf::int32 profile::challenge_count() const {
  return challenge_count_;
}
inline void profile::set_challenge_count(::google::protobuf::int32 value) {
  set_has_challenge_count();
  challenge_count_ = value;
}

// optional int32 challenge_time = 37;
inline bool profile::has_challenge_time() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void profile::set_has_challenge_time() {
  _has_bits_[1] |= 0x00000002u;
}
inline void profile::clear_has_challenge_time() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void profile::clear_challenge_time() {
  challenge_time_ = 0;
  clear_has_challenge_time();
}
inline ::google::protobuf::int32 profile::challenge_time() const {
  return challenge_time_;
}
inline void profile::set_challenge_time(::google::protobuf::int32 value) {
  set_has_challenge_time();
  challenge_time_ = value;
}

// optional int32 challenge_score = 38;
inline bool profile::has_challenge_score() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void profile::set_has_challenge_score() {
  _has_bits_[1] |= 0x00000004u;
}
inline void profile::clear_has_challenge_score() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void profile::clear_challenge_score() {
  challenge_score_ = 0;
  clear_has_challenge_score();
}
inline ::google::protobuf::int32 profile::challenge_score() const {
  return challenge_score_;
}
inline void profile::set_challenge_score(::google::protobuf::int32 value) {
  set_has_challenge_score();
  challenge_score_ = value;
}

// optional int32 vipscore = 39;
inline bool profile::has_vipscore() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void profile::set_has_vipscore() {
  _has_bits_[1] |= 0x00000008u;
}
inline void profile::clear_has_vipscore() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void profile::clear_vipscore() {
  vipscore_ = 0;
  clear_has_vipscore();
}
inline ::google::protobuf::int32 profile::vipscore() const {
  return vipscore_;
}
inline void profile::set_vipscore(::google::protobuf::int32 value) {
  set_has_vipscore();
  vipscore_ = value;
}

// optional int32 vipgift_time = 40;
inline bool profile::has_vipgift_time() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void profile::set_has_vipgift_time() {
  _has_bits_[1] |= 0x00000010u;
}
inline void profile::clear_has_vipgift_time() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void profile::clear_vipgift_time() {
  vipgift_time_ = 0;
  clear_has_vipgift_time();
}
inline ::google::protobuf::int32 profile::vipgift_time() const {
  return vipgift_time_;
}
inline void profile::set_vipgift_time(::google::protobuf::int32 value) {
  set_has_vipgift_time();
  vipgift_time_ = value;
}

// -------------------------------------------------------------------

// back_pack

// repeated .FNF.blade blades = 1;
inline int back_pack::blades_size() const {
  return blades_.size();
}
inline void back_pack::clear_blades() {
  blades_.Clear();
}
inline const ::FNF::blade& back_pack::blades(int index) const {
  return blades_.Get(index);
}
inline ::FNF::blade* back_pack::mutable_blades(int index) {
  return blades_.Mutable(index);
}
inline ::FNF::blade* back_pack::add_blades() {
  return blades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::blade >&
back_pack::blades() const {
  return blades_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::blade >*
back_pack::mutable_blades() {
  return &blades_;
}

// repeated .FNF.ninjia ninjias = 2;
inline int back_pack::ninjias_size() const {
  return ninjias_.size();
}
inline void back_pack::clear_ninjias() {
  ninjias_.Clear();
}
inline const ::FNF::ninjia& back_pack::ninjias(int index) const {
  return ninjias_.Get(index);
}
inline ::FNF::ninjia* back_pack::mutable_ninjias(int index) {
  return ninjias_.Mutable(index);
}
inline ::FNF::ninjia* back_pack::add_ninjias() {
  return ninjias_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::ninjia >&
back_pack::ninjias() const {
  return ninjias_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::ninjia >*
back_pack::mutable_ninjias() {
  return &ninjias_;
}

// repeated .FNF.pet pets = 3;
inline int back_pack::pets_size() const {
  return pets_.size();
}
inline void back_pack::clear_pets() {
  pets_.Clear();
}
inline const ::FNF::pet& back_pack::pets(int index) const {
  return pets_.Get(index);
}
inline ::FNF::pet* back_pack::mutable_pets(int index) {
  return pets_.Mutable(index);
}
inline ::FNF::pet* back_pack::add_pets() {
  return pets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::pet >&
back_pack::pets() const {
  return pets_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::pet >*
back_pack::mutable_pets() {
  return &pets_;
}

// repeated .FNF.prop props = 4;
inline int back_pack::props_size() const {
  return props_.size();
}
inline void back_pack::clear_props() {
  props_.Clear();
}
inline const ::FNF::prop& back_pack::props(int index) const {
  return props_.Get(index);
}
inline ::FNF::prop* back_pack::mutable_props(int index) {
  return props_.Mutable(index);
}
inline ::FNF::prop* back_pack::add_props() {
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::prop >&
back_pack::props() const {
  return props_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::prop >*
back_pack::mutable_props() {
  return &props_;
}

// optional .FNF.roll_info roll = 5;
inline bool back_pack::has_roll() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void back_pack::set_has_roll() {
  _has_bits_[0] |= 0x00000010u;
}
inline void back_pack::clear_has_roll() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void back_pack::clear_roll() {
  if (roll_ != NULL) roll_->::FNF::roll_info::Clear();
  clear_has_roll();
}
inline const ::FNF::roll_info& back_pack::roll() const {
  return roll_ != NULL ? *roll_ : *default_instance_->roll_;
}
inline ::FNF::roll_info* back_pack::mutable_roll() {
  set_has_roll();
  if (roll_ == NULL) roll_ = new ::FNF::roll_info;
  return roll_;
}
inline ::FNF::roll_info* back_pack::release_roll() {
  clear_has_roll();
  ::FNF::roll_info* temp = roll_;
  roll_ = NULL;
  return temp;
}
inline void back_pack::set_allocated_roll(::FNF::roll_info* roll) {
  delete roll_;
  roll_ = roll;
  if (roll) {
    set_has_roll();
  } else {
    clear_has_roll();
  }
}

// repeated .FNF.skin skins = 6;
inline int back_pack::skins_size() const {
  return skins_.size();
}
inline void back_pack::clear_skins() {
  skins_.Clear();
}
inline const ::FNF::skin& back_pack::skins(int index) const {
  return skins_.Get(index);
}
inline ::FNF::skin* back_pack::mutable_skins(int index) {
  return skins_.Mutable(index);
}
inline ::FNF::skin* back_pack::add_skins() {
  return skins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::skin >&
back_pack::skins() const {
  return skins_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::skin >*
back_pack::mutable_skins() {
  return &skins_;
}

// repeated .FNF.material materials = 7;
inline int back_pack::materials_size() const {
  return materials_.size();
}
inline void back_pack::clear_materials() {
  materials_.Clear();
}
inline const ::FNF::material& back_pack::materials(int index) const {
  return materials_.Get(index);
}
inline ::FNF::material* back_pack::mutable_materials(int index) {
  return materials_.Mutable(index);
}
inline ::FNF::material* back_pack::add_materials() {
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::material >&
back_pack::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::material >*
back_pack::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// grow_up

// repeated .FNF.achievement achievements = 1;
inline int grow_up::achievements_size() const {
  return achievements_.size();
}
inline void grow_up::clear_achievements() {
  achievements_.Clear();
}
inline const ::FNF::achievement& grow_up::achievements(int index) const {
  return achievements_.Get(index);
}
inline ::FNF::achievement* grow_up::mutable_achievements(int index) {
  return achievements_.Mutable(index);
}
inline ::FNF::achievement* grow_up::add_achievements() {
  return achievements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::achievement >&
grow_up::achievements() const {
  return achievements_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::achievement >*
grow_up::mutable_achievements() {
  return &achievements_;
}

// repeated .FNF.task daily_tasks = 2;
inline int grow_up::daily_tasks_size() const {
  return daily_tasks_.size();
}
inline void grow_up::clear_daily_tasks() {
  daily_tasks_.Clear();
}
inline const ::FNF::task& grow_up::daily_tasks(int index) const {
  return daily_tasks_.Get(index);
}
inline ::FNF::task* grow_up::mutable_daily_tasks(int index) {
  return daily_tasks_.Mutable(index);
}
inline ::FNF::task* grow_up::add_daily_tasks() {
  return daily_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::task >&
grow_up::daily_tasks() const {
  return daily_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::task >*
grow_up::mutable_daily_tasks() {
  return &daily_tasks_;
}

// repeated .FNF.task cumulative_tasks = 3;
inline int grow_up::cumulative_tasks_size() const {
  return cumulative_tasks_.size();
}
inline void grow_up::clear_cumulative_tasks() {
  cumulative_tasks_.Clear();
}
inline const ::FNF::task& grow_up::cumulative_tasks(int index) const {
  return cumulative_tasks_.Get(index);
}
inline ::FNF::task* grow_up::mutable_cumulative_tasks(int index) {
  return cumulative_tasks_.Mutable(index);
}
inline ::FNF::task* grow_up::add_cumulative_tasks() {
  return cumulative_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::task >&
grow_up::cumulative_tasks() const {
  return cumulative_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::task >*
grow_up::mutable_cumulative_tasks() {
  return &cumulative_tasks_;
}

// repeated .FNF.activity current_activity = 4;
inline int grow_up::current_activity_size() const {
  return current_activity_.size();
}
inline void grow_up::clear_current_activity() {
  current_activity_.Clear();
}
inline const ::FNF::activity& grow_up::current_activity(int index) const {
  return current_activity_.Get(index);
}
inline ::FNF::activity* grow_up::mutable_current_activity(int index) {
  return current_activity_.Mutable(index);
}
inline ::FNF::activity* grow_up::add_current_activity() {
  return current_activity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::activity >&
grow_up::current_activity() const {
  return current_activity_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::activity >*
grow_up::mutable_current_activity() {
  return &current_activity_;
}

// optional .FNF.task_daily_limit cumulative_task_limit = 5;
inline bool grow_up::has_cumulative_task_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void grow_up::set_has_cumulative_task_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void grow_up::clear_has_cumulative_task_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void grow_up::clear_cumulative_task_limit() {
  if (cumulative_task_limit_ != NULL) cumulative_task_limit_->::FNF::task_daily_limit::Clear();
  clear_has_cumulative_task_limit();
}
inline const ::FNF::task_daily_limit& grow_up::cumulative_task_limit() const {
  return cumulative_task_limit_ != NULL ? *cumulative_task_limit_ : *default_instance_->cumulative_task_limit_;
}
inline ::FNF::task_daily_limit* grow_up::mutable_cumulative_task_limit() {
  set_has_cumulative_task_limit();
  if (cumulative_task_limit_ == NULL) cumulative_task_limit_ = new ::FNF::task_daily_limit;
  return cumulative_task_limit_;
}
inline ::FNF::task_daily_limit* grow_up::release_cumulative_task_limit() {
  clear_has_cumulative_task_limit();
  ::FNF::task_daily_limit* temp = cumulative_task_limit_;
  cumulative_task_limit_ = NULL;
  return temp;
}
inline void grow_up::set_allocated_cumulative_task_limit(::FNF::task_daily_limit* cumulative_task_limit) {
  delete cumulative_task_limit_;
  cumulative_task_limit_ = cumulative_task_limit;
  if (cumulative_task_limit) {
    set_has_cumulative_task_limit();
  } else {
    clear_has_cumulative_task_limit();
  }
}

// repeated .FNF.active_item active_items = 6;
inline int grow_up::active_items_size() const {
  return active_items_.size();
}
inline void grow_up::clear_active_items() {
  active_items_.Clear();
}
inline const ::FNF::active_item& grow_up::active_items(int index) const {
  return active_items_.Get(index);
}
inline ::FNF::active_item* grow_up::mutable_active_items(int index) {
  return active_items_.Mutable(index);
}
inline ::FNF::active_item* grow_up::add_active_items() {
  return active_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FNF::active_item >&
grow_up::active_items() const {
  return active_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::FNF::active_item >*
grow_up::mutable_active_items() {
  return &active_items_;
}

// optional int32 active_receive_step = 7;
inline bool grow_up::has_active_receive_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void grow_up::set_has_active_receive_step() {
  _has_bits_[0] |= 0x00000040u;
}
inline void grow_up::clear_has_active_receive_step() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void grow_up::clear_active_receive_step() {
  active_receive_step_ = 0;
  clear_has_active_receive_step();
}
inline ::google::protobuf::int32 grow_up::active_receive_step() const {
  return active_receive_step_;
}
inline void grow_up::set_active_receive_step(::google::protobuf::int32 value) {
  set_has_active_receive_step();
  active_receive_step_ = value;
}

// optional int32 active_time = 8;
inline bool grow_up::has_active_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void grow_up::set_has_active_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void grow_up::clear_has_active_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void grow_up::clear_active_time() {
  active_time_ = 0;
  clear_has_active_time();
}
inline ::google::protobuf::int32 grow_up::active_time() const {
  return active_time_;
}
inline void grow_up::set_active_time(::google::protobuf::int32 value) {
  set_has_active_time();
  active_time_ = value;
}

// -------------------------------------------------------------------

// material

// required int32 id = 1;
inline bool material::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void material::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void material::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void material::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 material::id() const {
  return id_;
}
inline void material::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 count = 2;
inline bool material::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void material::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void material::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void material::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 material::count() const {
  return count_;
}
inline void material::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// active_item

// required int32 id = 1;
inline bool active_item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void active_item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void active_item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void active_item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 active_item::id() const {
  return id_;
}
inline void active_item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 count = 2;
inline bool active_item::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void active_item::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void active_item::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void active_item::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 active_item::count() const {
  return count_;
}
inline void active_item::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// task_daily_limit

// required int32 cumulative_task_count = 1;
inline bool task_daily_limit::has_cumulative_task_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void task_daily_limit::set_has_cumulative_task_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void task_daily_limit::clear_has_cumulative_task_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void task_daily_limit::clear_cumulative_task_count() {
  cumulative_task_count_ = 0;
  clear_has_cumulative_task_count();
}
inline ::google::protobuf::int32 task_daily_limit::cumulative_task_count() const {
  return cumulative_task_count_;
}
inline void task_daily_limit::set_cumulative_task_count(::google::protobuf::int32 value) {
  set_has_cumulative_task_count();
  cumulative_task_count_ = value;
}

// required int32 cumulative_task_updatetime = 2;
inline bool task_daily_limit::has_cumulative_task_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void task_daily_limit::set_has_cumulative_task_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void task_daily_limit::clear_has_cumulative_task_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void task_daily_limit::clear_cumulative_task_updatetime() {
  cumulative_task_updatetime_ = 0;
  clear_has_cumulative_task_updatetime();
}
inline ::google::protobuf::int32 task_daily_limit::cumulative_task_updatetime() const {
  return cumulative_task_updatetime_;
}
inline void task_daily_limit::set_cumulative_task_updatetime(::google::protobuf::int32 value) {
  set_has_cumulative_task_updatetime();
  cumulative_task_updatetime_ = value;
}

// -------------------------------------------------------------------

// newlife_count

// required int32 newlife_end_count = 1;
inline bool newlife_count::has_newlife_end_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void newlife_count::set_has_newlife_end_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void newlife_count::clear_has_newlife_end_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void newlife_count::clear_newlife_end_count() {
  newlife_end_count_ = 0;
  clear_has_newlife_end_count();
}
inline ::google::protobuf::int32 newlife_count::newlife_end_count() const {
  return newlife_end_count_;
}
inline void newlife_count::set_newlife_end_count(::google::protobuf::int32 value) {
  set_has_newlife_end_count();
  newlife_end_count_ = value;
}

// required int32 newlife_bomb_count = 2;
inline bool newlife_count::has_newlife_bomb_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void newlife_count::set_has_newlife_bomb_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void newlife_count::clear_has_newlife_bomb_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void newlife_count::clear_newlife_bomb_count() {
  newlife_bomb_count_ = 0;
  clear_has_newlife_bomb_count();
}
inline ::google::protobuf::int32 newlife_count::newlife_bomb_count() const {
  return newlife_bomb_count_;
}
inline void newlife_count::set_newlife_bomb_count(::google::protobuf::int32 value) {
  set_has_newlife_bomb_count();
  newlife_bomb_count_ = value;
}

// -------------------------------------------------------------------

// lottery_protection

// optional int32 gem_no_rare_count = 1;
inline bool lottery_protection::has_gem_no_rare_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lottery_protection::set_has_gem_no_rare_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lottery_protection::clear_has_gem_no_rare_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lottery_protection::clear_gem_no_rare_count() {
  gem_no_rare_count_ = 0;
  clear_has_gem_no_rare_count();
}
inline ::google::protobuf::int32 lottery_protection::gem_no_rare_count() const {
  return gem_no_rare_count_;
}
inline void lottery_protection::set_gem_no_rare_count(::google::protobuf::int32 value) {
  set_has_gem_no_rare_count();
  gem_no_rare_count_ = value;
}

// optional int32 starfruit_no_rare_count = 2;
inline bool lottery_protection::has_starfruit_no_rare_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lottery_protection::set_has_starfruit_no_rare_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lottery_protection::clear_has_starfruit_no_rare_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lottery_protection::clear_starfruit_no_rare_count() {
  starfruit_no_rare_count_ = 0;
  clear_has_starfruit_no_rare_count();
}
inline ::google::protobuf::int32 lottery_protection::starfruit_no_rare_count() const {
  return starfruit_no_rare_count_;
}
inline void lottery_protection::set_starfruit_no_rare_count(::google::protobuf::int32 value) {
  set_has_starfruit_no_rare_count();
  starfruit_no_rare_count_ = value;
}

// -------------------------------------------------------------------

// SafeRank

// required .FNF.EmRankSafe rank_safe = 1;
inline bool SafeRank::has_rank_safe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeRank::set_has_rank_safe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeRank::clear_has_rank_safe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeRank::clear_rank_safe() {
  rank_safe_ = 0;
  clear_has_rank_safe();
}
inline ::FNF::EmRankSafe SafeRank::rank_safe() const {
  return static_cast< ::FNF::EmRankSafe >(rank_safe_);
}
inline void SafeRank::set_rank_safe(::FNF::EmRankSafe value) {
  assert(::FNF::EmRankSafe_IsValid(value));
  set_has_rank_safe();
  rank_safe_ = value;
}

// required int32 rank_safe_end = 2;
inline bool SafeRank::has_rank_safe_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeRank::set_has_rank_safe_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeRank::clear_has_rank_safe_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeRank::clear_rank_safe_end() {
  rank_safe_end_ = 0;
  clear_has_rank_safe_end();
}
inline ::google::protobuf::int32 SafeRank::rank_safe_end() const {
  return rank_safe_end_;
}
inline void SafeRank::set_rank_safe_end(::google::protobuf::int32 value) {
  set_has_rank_safe_end();
  rank_safe_end_ = value;
}

// -------------------------------------------------------------------

// SafeGain

// required .FNF.EmGainSafe gain_safe = 1;
inline bool SafeGain::has_gain_safe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeGain::set_has_gain_safe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeGain::clear_has_gain_safe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeGain::clear_gain_safe() {
  gain_safe_ = 0;
  clear_has_gain_safe();
}
inline ::FNF::EmGainSafe SafeGain::gain_safe() const {
  return static_cast< ::FNF::EmGainSafe >(gain_safe_);
}
inline void SafeGain::set_gain_safe(::FNF::EmGainSafe value) {
  assert(::FNF::EmGainSafe_IsValid(value));
  set_has_gain_safe();
  gain_safe_ = value;
}

// required int32 gain_safe_end = 2;
inline bool SafeGain::has_gain_safe_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeGain::set_has_gain_safe_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeGain::clear_has_gain_safe_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeGain::clear_gain_safe_end() {
  gain_safe_end_ = 0;
  clear_has_gain_safe_end();
}
inline ::google::protobuf::int32 SafeGain::gain_safe_end() const {
  return gain_safe_end_;
}
inline void SafeGain::set_gain_safe_end(::google::protobuf::int32 value) {
  set_has_gain_safe_end();
  gain_safe_end_ = value;
}

// -------------------------------------------------------------------

// medal

// required int32 gold = 1;
inline bool medal::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void medal::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void medal::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void medal::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 medal::gold() const {
  return gold_;
}
inline void medal::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// required int32 silver = 2;
inline bool medal::has_silver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void medal::set_has_silver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void medal::clear_has_silver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void medal::clear_silver() {
  silver_ = 0;
  clear_has_silver();
}
inline ::google::protobuf::int32 medal::silver() const {
  return silver_;
}
inline void medal::set_silver(::google::protobuf::int32 value) {
  set_has_silver();
  silver_ = value;
}

// required int32 copper = 3;
inline bool medal::has_copper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void medal::set_has_copper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void medal::clear_has_copper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void medal::clear_copper() {
  copper_ = 0;
  clear_has_copper();
}
inline ::google::protobuf::int32 medal::copper() const {
  return copper_;
}
inline void medal::set_copper(::google::protobuf::int32 value) {
  set_has_copper();
  copper_ = value;
}

// -------------------------------------------------------------------

// device_info

// optional string device_id = 1;
inline bool device_info::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void device_info::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void device_info::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void device_info::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& device_info::device_id() const {
  return *device_id_;
}
inline void device_info::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void device_info::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void device_info::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* device_info::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* device_info::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void device_info::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string system_os = 2;
inline bool device_info::has_system_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void device_info::set_has_system_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void device_info::clear_has_system_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void device_info::clear_system_os() {
  if (system_os_ != &::google::protobuf::internal::kEmptyString) {
    system_os_->clear();
  }
  clear_has_system_os();
}
inline const ::std::string& device_info::system_os() const {
  return *system_os_;
}
inline void device_info::set_system_os(const ::std::string& value) {
  set_has_system_os();
  if (system_os_ == &::google::protobuf::internal::kEmptyString) {
    system_os_ = new ::std::string;
  }
  system_os_->assign(value);
}
inline void device_info::set_system_os(const char* value) {
  set_has_system_os();
  if (system_os_ == &::google::protobuf::internal::kEmptyString) {
    system_os_ = new ::std::string;
  }
  system_os_->assign(value);
}
inline void device_info::set_system_os(const char* value, size_t size) {
  set_has_system_os();
  if (system_os_ == &::google::protobuf::internal::kEmptyString) {
    system_os_ = new ::std::string;
  }
  system_os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* device_info::mutable_system_os() {
  set_has_system_os();
  if (system_os_ == &::google::protobuf::internal::kEmptyString) {
    system_os_ = new ::std::string;
  }
  return system_os_;
}
inline ::std::string* device_info::release_system_os() {
  clear_has_system_os();
  if (system_os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = system_os_;
    system_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void device_info::set_allocated_system_os(::std::string* system_os) {
  if (system_os_ != &::google::protobuf::internal::kEmptyString) {
    delete system_os_;
  }
  if (system_os) {
    set_has_system_os();
    system_os_ = system_os;
  } else {
    clear_has_system_os();
    system_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_name = 3;
inline bool device_info::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void device_info::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void device_info::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void device_info::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& device_info::device_name() const {
  return *device_name_;
}
inline void device_info::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void device_info::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void device_info::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* device_info::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* device_info::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void device_info::set_allocated_device_name(::std::string* device_name) {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (device_name) {
    set_has_device_name();
    device_name_ = device_name;
  } else {
    clear_has_device_name();
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// oauth_auth

// optional string access_token = 1;
inline bool oauth_auth::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void oauth_auth::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void oauth_auth::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void oauth_auth::clear_access_token() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    access_token_->clear();
  }
  clear_has_access_token();
}
inline const ::std::string& oauth_auth::access_token() const {
  return *access_token_;
}
inline void oauth_auth::set_access_token(const ::std::string& value) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
}
inline void oauth_auth::set_access_token(const char* value) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
}
inline void oauth_auth::set_access_token(const char* value, size_t size) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* oauth_auth::mutable_access_token() {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  return access_token_;
}
inline ::std::string* oauth_auth::release_access_token() {
  clear_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = access_token_;
    access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void oauth_auth::set_allocated_access_token(::std::string* access_token) {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (access_token) {
    set_has_access_token();
    access_token_ = access_token;
  } else {
    clear_has_access_token();
    access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refresh_token = 2;
inline bool oauth_auth::has_refresh_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void oauth_auth::set_has_refresh_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void oauth_auth::clear_has_refresh_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void oauth_auth::clear_refresh_token() {
  if (refresh_token_ != &::google::protobuf::internal::kEmptyString) {
    refresh_token_->clear();
  }
  clear_has_refresh_token();
}
inline const ::std::string& oauth_auth::refresh_token() const {
  return *refresh_token_;
}
inline void oauth_auth::set_refresh_token(const ::std::string& value) {
  set_has_refresh_token();
  if (refresh_token_ == &::google::protobuf::internal::kEmptyString) {
    refresh_token_ = new ::std::string;
  }
  refresh_token_->assign(value);
}
inline void oauth_auth::set_refresh_token(const char* value) {
  set_has_refresh_token();
  if (refresh_token_ == &::google::protobuf::internal::kEmptyString) {
    refresh_token_ = new ::std::string;
  }
  refresh_token_->assign(value);
}
inline void oauth_auth::set_refresh_token(const char* value, size_t size) {
  set_has_refresh_token();
  if (refresh_token_ == &::google::protobuf::internal::kEmptyString) {
    refresh_token_ = new ::std::string;
  }
  refresh_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* oauth_auth::mutable_refresh_token() {
  set_has_refresh_token();
  if (refresh_token_ == &::google::protobuf::internal::kEmptyString) {
    refresh_token_ = new ::std::string;
  }
  return refresh_token_;
}
inline ::std::string* oauth_auth::release_refresh_token() {
  clear_has_refresh_token();
  if (refresh_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refresh_token_;
    refresh_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void oauth_auth::set_allocated_refresh_token(::std::string* refresh_token) {
  if (refresh_token_ != &::google::protobuf::internal::kEmptyString) {
    delete refresh_token_;
  }
  if (refresh_token) {
    set_has_refresh_token();
    refresh_token_ = refresh_token;
  } else {
    clear_has_refresh_token();
    refresh_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ptnumber

// required int32 starfruit = 1;
inline bool ptnumber::has_starfruit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ptnumber::set_has_starfruit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ptnumber::clear_has_starfruit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ptnumber::clear_starfruit() {
  starfruit_ = 0;
  clear_has_starfruit();
}
inline ::google::protobuf::int32 ptnumber::starfruit() const {
  return starfruit_;
}
inline void ptnumber::set_starfruit(::google::protobuf::int32 value) {
  set_has_starfruit();
  starfruit_ = value;
}

// required int32 gem = 2;
inline bool ptnumber::has_gem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ptnumber::set_has_gem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ptnumber::clear_has_gem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ptnumber::clear_gem() {
  gem_ = 0;
  clear_has_gem();
}
inline ::google::protobuf::int32 ptnumber::gem() const {
  return gem_;
}
inline void ptnumber::set_gem(::google::protobuf::int32 value) {
  set_has_gem();
  gem_ = value;
}

// required int32 energy = 3;
inline bool ptnumber::has_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ptnumber::set_has_energy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ptnumber::clear_has_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ptnumber::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 ptnumber::energy() const {
  return energy_;
}
inline void ptnumber::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// required int32 last_energy_time = 4;
inline bool ptnumber::has_last_energy_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ptnumber::set_has_last_energy_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ptnumber::clear_has_last_energy_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ptnumber::clear_last_energy_time() {
  last_energy_time_ = 0;
  clear_has_last_energy_time();
}
inline ::google::protobuf::int32 ptnumber::last_energy_time() const {
  return last_energy_time_;
}
inline void ptnumber::set_last_energy_time(::google::protobuf::int32 value) {
  set_has_last_energy_time();
  last_energy_time_ = value;
}

// optional int32 gem_add = 5;
inline bool ptnumber::has_gem_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ptnumber::set_has_gem_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ptnumber::clear_has_gem_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ptnumber::clear_gem_add() {
  gem_add_ = 0;
  clear_has_gem_add();
}
inline ::google::protobuf::int32 ptnumber::gem_add() const {
  return gem_add_;
}
inline void ptnumber::set_gem_add(::google::protobuf::int32 value) {
  set_has_gem_add();
  gem_add_ = value;
}

// optional int32 gem_del = 6;
inline bool ptnumber::has_gem_del() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ptnumber::set_has_gem_del() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ptnumber::clear_has_gem_del() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ptnumber::clear_gem_del() {
  gem_del_ = 0;
  clear_has_gem_del();
}
inline ::google::protobuf::int32 ptnumber::gem_del() const {
  return gem_del_;
}
inline void ptnumber::set_gem_del(::google::protobuf::int32 value) {
  set_has_gem_del();
  gem_del_ = value;
}

// -------------------------------------------------------------------

// prop

// required int32 id = 1;
inline bool prop::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void prop::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void prop::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void prop::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 prop::id() const {
  return id_;
}
inline void prop::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 count = 2;
inline bool prop::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void prop::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void prop::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void prop::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 prop::count() const {
  return count_;
}
inline void prop::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 use_limit = 3;
inline bool prop::has_use_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void prop::set_has_use_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void prop::clear_has_use_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void prop::clear_use_limit() {
  use_limit_ = 0;
  clear_has_use_limit();
}
inline ::google::protobuf::int32 prop::use_limit() const {
  return use_limit_;
}
inline void prop::set_use_limit(::google::protobuf::int32 value) {
  set_has_use_limit();
  use_limit_ = value;
}

// optional int32 time_limit = 4;
inline bool prop::has_time_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void prop::set_has_time_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void prop::clear_has_time_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void prop::clear_time_limit() {
  time_limit_ = 0;
  clear_has_time_limit();
}
inline ::google::protobuf::int32 prop::time_limit() const {
  return time_limit_;
}
inline void prop::set_time_limit(::google::protobuf::int32 value) {
  set_has_time_limit();
  time_limit_ = value;
}

// -------------------------------------------------------------------

// roll_info

// required int32 id = 1;
inline bool roll_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roll_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roll_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roll_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 roll_info::id() const {
  return id_;
}
inline void roll_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .FNF.EM_ROLL_TYPE type = 2;
inline bool roll_info::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void roll_info::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void roll_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void roll_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FNF::EM_ROLL_TYPE roll_info::type() const {
  return static_cast< ::FNF::EM_ROLL_TYPE >(type_);
}
inline void roll_info::set_type(::FNF::EM_ROLL_TYPE value) {
  assert(::FNF::EM_ROLL_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 real_no = 3;
inline bool roll_info::has_real_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void roll_info::set_has_real_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void roll_info::clear_has_real_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void roll_info::clear_real_no() {
  real_no_ = 0;
  clear_has_real_no();
}
inline ::google::protobuf::int32 roll_info::real_no() const {
  return real_no_;
}
inline void roll_info::set_real_no(::google::protobuf::int32 value) {
  set_has_real_no();
  real_no_ = value;
}

// required .FNF.EM_ROLL_STATUS status = 4;
inline bool roll_info::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void roll_info::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void roll_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void roll_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::FNF::EM_ROLL_STATUS roll_info::status() const {
  return static_cast< ::FNF::EM_ROLL_STATUS >(status_);
}
inline void roll_info::set_status(::FNF::EM_ROLL_STATUS value) {
  assert(::FNF::EM_ROLL_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// skin

// required int32 id = 1;
inline bool skin::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skin::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skin::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skin::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 skin::id() const {
  return id_;
}
inline void skin::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 got_time = 2;
inline bool skin::has_got_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void skin::set_has_got_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void skin::clear_has_got_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void skin::clear_got_time() {
  got_time_ = 0;
  clear_has_got_time();
}
inline ::google::protobuf::int32 skin::got_time() const {
  return got_time_;
}
inline void skin::set_got_time(::google::protobuf::int32 value) {
  set_has_got_time();
  got_time_ = value;
}

// required int32 expire_time = 3;
inline bool skin::has_expire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void skin::set_has_expire_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void skin::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void skin::clear_expire_time() {
  expire_time_ = 0;
  clear_has_expire_time();
}
inline ::google::protobuf::int32 skin::expire_time() const {
  return expire_time_;
}
inline void skin::set_expire_time(::google::protobuf::int32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional int32 is_active = 4;
inline bool skin::has_is_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void skin::set_has_is_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void skin::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void skin::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 skin::is_active() const {
  return is_active_;
}
inline void skin::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// -------------------------------------------------------------------

// score

// required int32 week_top_score = 1;
inline bool score::has_week_top_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void score::set_has_week_top_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void score::clear_has_week_top_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void score::clear_week_top_score() {
  week_top_score_ = 0;
  clear_has_week_top_score();
}
inline ::google::protobuf::int32 score::week_top_score() const {
  return week_top_score_;
}
inline void score::set_week_top_score(::google::protobuf::int32 value) {
  set_has_week_top_score();
  week_top_score_ = value;
}

// required int32 week_top_score_time = 2;
inline bool score::has_week_top_score_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void score::set_has_week_top_score_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void score::clear_has_week_top_score_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void score::clear_week_top_score_time() {
  week_top_score_time_ = 0;
  clear_has_week_top_score_time();
}
inline ::google::protobuf::int32 score::week_top_score_time() const {
  return week_top_score_time_;
}
inline void score::set_week_top_score_time(::google::protobuf::int32 value) {
  set_has_week_top_score_time();
  week_top_score_time_ = value;
}

// required int32 history_top_score = 3;
inline bool score::has_history_top_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void score::set_has_history_top_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void score::clear_has_history_top_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void score::clear_history_top_score() {
  history_top_score_ = 0;
  clear_has_history_top_score();
}
inline ::google::protobuf::int32 score::history_top_score() const {
  return history_top_score_;
}
inline void score::set_history_top_score(::google::protobuf::int32 value) {
  set_has_history_top_score();
  history_top_score_ = value;
}

// required int32 history_top_score_time = 4;
inline bool score::has_history_top_score_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void score::set_has_history_top_score_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void score::clear_has_history_top_score_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void score::clear_history_top_score_time() {
  history_top_score_time_ = 0;
  clear_has_history_top_score_time();
}
inline ::google::protobuf::int32 score::history_top_score_time() const {
  return history_top_score_time_;
}
inline void score::set_history_top_score_time(::google::protobuf::int32 value) {
  set_has_history_top_score_time();
  history_top_score_time_ = value;
}

// optional int32 lastweek_top_score = 5;
inline bool score::has_lastweek_top_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void score::set_has_lastweek_top_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void score::clear_has_lastweek_top_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void score::clear_lastweek_top_score() {
  lastweek_top_score_ = 0;
  clear_has_lastweek_top_score();
}
inline ::google::protobuf::int32 score::lastweek_top_score() const {
  return lastweek_top_score_;
}
inline void score::set_lastweek_top_score(::google::protobuf::int32 value) {
  set_has_lastweek_top_score();
  lastweek_top_score_ = value;
}

// optional int32 lastweek_top_score_time = 6;
inline bool score::has_lastweek_top_score_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void score::set_has_lastweek_top_score_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void score::clear_has_lastweek_top_score_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void score::clear_lastweek_top_score_time() {
  lastweek_top_score_time_ = 0;
  clear_has_lastweek_top_score_time();
}
inline ::google::protobuf::int32 score::lastweek_top_score_time() const {
  return lastweek_top_score_time_;
}
inline void score::set_lastweek_top_score_time(::google::protobuf::int32 value) {
  set_has_lastweek_top_score_time();
  lastweek_top_score_time_ = value;
}

// -------------------------------------------------------------------

// blade

// required int32 id = 1;
inline bool blade::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blade::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blade::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blade::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 blade::id() const {
  return id_;
}
inline void blade::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 lv = 2;
inline bool blade::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blade::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blade::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blade::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 blade::lv() const {
  return lv_;
}
inline void blade::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 got_time = 3;
inline bool blade::has_got_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blade::set_has_got_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blade::clear_has_got_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blade::clear_got_time() {
  got_time_ = 0;
  clear_has_got_time();
}
inline ::google::protobuf::int32 blade::got_time() const {
  return got_time_;
}
inline void blade::set_got_time(::google::protobuf::int32 value) {
  set_has_got_time();
  got_time_ = value;
}

// optional int32 is_active = 4;
inline bool blade::has_is_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blade::set_has_is_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blade::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blade::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 blade::is_active() const {
  return is_active_;
}
inline void blade::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// -------------------------------------------------------------------

// ninjia

// required int32 id = 1;
inline bool ninjia::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ninjia::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ninjia::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ninjia::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ninjia::id() const {
  return id_;
}
inline void ninjia::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 lv = 2;
inline bool ninjia::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ninjia::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ninjia::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ninjia::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 ninjia::lv() const {
  return lv_;
}
inline void ninjia::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 got_time = 3;
inline bool ninjia::has_got_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ninjia::set_has_got_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ninjia::clear_has_got_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ninjia::clear_got_time() {
  got_time_ = 0;
  clear_has_got_time();
}
inline ::google::protobuf::int32 ninjia::got_time() const {
  return got_time_;
}
inline void ninjia::set_got_time(::google::protobuf::int32 value) {
  set_has_got_time();
  got_time_ = value;
}

// optional int32 is_active = 4;
inline bool ninjia::has_is_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ninjia::set_has_is_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ninjia::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ninjia::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 ninjia::is_active() const {
  return is_active_;
}
inline void ninjia::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// -------------------------------------------------------------------

// pet

// required int32 id = 1;
inline bool pet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 pet::id() const {
  return id_;
}
inline void pet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 exp = 2;
inline bool pet::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 pet::exp() const {
  return exp_;
}
inline void pet::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 lv = 3;
inline bool pet::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 pet::lv() const {
  return lv_;
}
inline void pet::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 count = 4;
inline bool pet::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 pet::count() const {
  return count_;
}
inline void pet::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 feed_time = 5;
inline bool pet::has_feed_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet::set_has_feed_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet::clear_has_feed_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet::clear_feed_time() {
  feed_time_ = 0;
  clear_has_feed_time();
}
inline ::google::protobuf::int32 pet::feed_time() const {
  return feed_time_;
}
inline void pet::set_feed_time(::google::protobuf::int32 value) {
  set_has_feed_time();
  feed_time_ = value;
}

// optional int32 gift_got_time = 6;
inline bool pet::has_gift_got_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pet::set_has_gift_got_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pet::clear_has_gift_got_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pet::clear_gift_got_time() {
  gift_got_time_ = 0;
  clear_has_gift_got_time();
}
inline ::google::protobuf::int32 pet::gift_got_time() const {
  return gift_got_time_;
}
inline void pet::set_gift_got_time(::google::protobuf::int32 value) {
  set_has_gift_got_time();
  gift_got_time_ = value;
}

// optional int32 is_active = 7;
inline bool pet::has_is_active() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pet::set_has_is_active() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pet::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pet::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 pet::is_active() const {
  return is_active_;
}
inline void pet::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// -------------------------------------------------------------------

// achievement

// required int32 id = 1;
inline bool achievement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void achievement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void achievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void achievement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 achievement::id() const {
  return id_;
}
inline void achievement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool achievement::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void achievement::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void achievement::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void achievement::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 achievement::type() const {
  return type_;
}
inline void achievement::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 lv = 3;
inline bool achievement::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void achievement::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void achievement::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void achievement::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 achievement::lv() const {
  return lv_;
}
inline void achievement::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 count = 4;
inline bool achievement::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void achievement::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void achievement::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void achievement::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 achievement::count() const {
  return count_;
}
inline void achievement::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// task

// required int32 id = 1;
inline bool task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 task::id() const {
  return id_;
}
inline void task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool task::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void task::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void task::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void task::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 task::type() const {
  return type_;
}
inline void task::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 lv = 3;
inline bool task::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void task::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void task::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void task::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 task::lv() const {
  return lv_;
}
inline void task::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required .FNF.EMTaskStatus status = 4;
inline bool task::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void task::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void task::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void task::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::FNF::EMTaskStatus task::status() const {
  return static_cast< ::FNF::EMTaskStatus >(status_);
}
inline void task::set_status(::FNF::EMTaskStatus value) {
  assert(::FNF::EMTaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required int32 count = 5;
inline bool task::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void task::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void task::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void task::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 task::count() const {
  return count_;
}
inline void task::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// required int32 start_time = 6;
inline bool task::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void task::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void task::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void task::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 task::start_time() const {
  return start_time_;
}
inline void task::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required int32 order_id = 7;
inline bool task::has_order_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void task::set_has_order_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void task::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void task::clear_order_id() {
  order_id_ = 0;
  clear_has_order_id();
}
inline ::google::protobuf::int32 task::order_id() const {
  return order_id_;
}
inline void task::set_order_id(::google::protobuf::int32 value) {
  set_has_order_id();
  order_id_ = value;
}

// -------------------------------------------------------------------

// activity

// required int32 id = 1;
inline bool activity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void activity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void activity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void activity::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 activity::id() const {
  return id_;
}
inline void activity::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .FNF.EMActivityType type = 2;
inline bool activity::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void activity::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void activity::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void activity::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::FNF::EMActivityType activity::type() const {
  return static_cast< ::FNF::EMActivityType >(type_);
}
inline void activity::set_type(::FNF::EMActivityType value) {
  assert(::FNF::EMActivityType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 condition = 3;
inline bool activity::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void activity::set_has_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void activity::clear_has_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void activity::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 activity::condition() const {
  return condition_;
}
inline void activity::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
}

// optional int32 update_time = 4;
inline bool activity::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void activity::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void activity::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void activity::clear_update_time() {
  update_time_ = 0;
  clear_has_update_time();
}
inline ::google::protobuf::int32 activity::update_time() const {
  return update_time_;
}
inline void activity::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
}

// optional .FNF.EMActivityGiftStatus gift_status = 5;
inline bool activity::has_gift_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void activity::set_has_gift_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void activity::clear_has_gift_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void activity::clear_gift_status() {
  gift_status_ = 0;
  clear_has_gift_status();
}
inline ::FNF::EMActivityGiftStatus activity::gift_status() const {
  return static_cast< ::FNF::EMActivityGiftStatus >(gift_status_);
}
inline void activity::set_gift_status(::FNF::EMActivityGiftStatus value) {
  assert(::FNF::EMActivityGiftStatus_IsValid(value));
  set_has_gift_status();
  gift_status_ = value;
}

// -------------------------------------------------------------------

// signin

// required int32 id = 1;
inline bool signin::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void signin::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void signin::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void signin::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 signin::id() const {
  return id_;
}
inline void signin::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 count = 2;
inline bool signin::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void signin::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void signin::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void signin::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 signin::count() const {
  return count_;
}
inline void signin::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// required int32 resign_count = 3;
inline bool signin::has_resign_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void signin::set_has_resign_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void signin::clear_has_resign_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void signin::clear_resign_count() {
  resign_count_ = 0;
  clear_has_resign_count();
}
inline ::google::protobuf::int32 signin::resign_count() const {
  return resign_count_;
}
inline void signin::set_resign_count(::google::protobuf::int32 value) {
  set_has_resign_count();
  resign_count_ = value;
}

// required int32 update_time = 4;
inline bool signin::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void signin::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void signin::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void signin::clear_update_time() {
  update_time_ = 0;
  clear_has_update_time();
}
inline ::google::protobuf::int32 signin::update_time() const {
  return update_time_;
}
inline void signin::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
}

// -------------------------------------------------------------------

// numbers

// required int32 mail_count = 1;
inline bool numbers::has_mail_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void numbers::set_has_mail_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void numbers::clear_has_mail_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void numbers::clear_mail_count() {
  mail_count_ = 0;
  clear_has_mail_count();
}
inline ::google::protobuf::int32 numbers::mail_count() const {
  return mail_count_;
}
inline void numbers::set_mail_count(::google::protobuf::int32 value) {
  set_has_mail_count();
  mail_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FNF

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EmRankSafe>() {
  return ::FNF::EmRankSafe_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EmGainSafe>() {
  return ::FNF::EmGainSafe_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EM_ROLL_TYPE>() {
  return ::FNF::EM_ROLL_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EM_ROLL_STATUS>() {
  return ::FNF::EM_ROLL_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMTaskStatus>() {
  return ::FNF::EMTaskStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMActivityType>() {
  return ::FNF::EMActivityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNF::EMActivityGiftStatus>() {
  return ::FNF::EMActivityGiftStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fnf_5fuser_2eproto__INCLUDED
